
Deadpool Irrigation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000041e0  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000074  20000000  000041e0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000134  20000074  00004254  00010074  2**2
                  ALLOC
  3 .stack        00002000  200001a8  00004388  00010074  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010074  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  0001009c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002bf49  00000000  00000000  000100f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003a69  00000000  00000000  0003c040  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006693  00000000  00000000  0003faa9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000618  00000000  00000000  0004613c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000680  00000000  00000000  00046754  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001b597  00000000  00000000  00046dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000f032  00000000  00000000  0006236b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008cb2d  00000000  00000000  0007139d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001720  00000000  00000000  000fdecc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	200021a8 	.word	0x200021a8
       4:	00001f49 	.word	0x00001f49
       8:	00001f45 	.word	0x00001f45
       c:	00001f45 	.word	0x00001f45
	...
      2c:	00001f45 	.word	0x00001f45
	...
      38:	00001f45 	.word	0x00001f45
      3c:	00001f45 	.word	0x00001f45
      40:	00001f45 	.word	0x00001f45
      44:	00001f45 	.word	0x00001f45
      48:	00001f45 	.word	0x00001f45
      4c:	00001f45 	.word	0x00001f45
      50:	00001f45 	.word	0x00001f45
      54:	00001f45 	.word	0x00001f45
      58:	00001f45 	.word	0x00001f45
      5c:	00001f45 	.word	0x00001f45
      60:	00001f45 	.word	0x00001f45
      64:	00001879 	.word	0x00001879
      68:	00001889 	.word	0x00001889
      6c:	00001899 	.word	0x00001899
      70:	000018a9 	.word	0x000018a9
      74:	000018b9 	.word	0x000018b9
      78:	000018c9 	.word	0x000018c9
      7c:	00000875 	.word	0x00000875
      80:	00000885 	.word	0x00000885
      84:	00000895 	.word	0x00000895
      88:	00001f45 	.word	0x00001f45
      8c:	00001f45 	.word	0x00001f45
      90:	00001f45 	.word	0x00001f45
      94:	00001f45 	.word	0x00001f45
      98:	00001f45 	.word	0x00001f45
      9c:	00000d89 	.word	0x00000d89
      a0:	00001f45 	.word	0x00001f45
      a4:	00001f45 	.word	0x00001f45
      a8:	00001f45 	.word	0x00001f45
      ac:	00001f45 	.word	0x00001f45

000000b0 <__do_global_dtors_aux>:
      b0:	b510      	push	{r4, lr}
      b2:	4c06      	ldr	r4, [pc, #24]	; (cc <__do_global_dtors_aux+0x1c>)
      b4:	7823      	ldrb	r3, [r4, #0]
      b6:	2b00      	cmp	r3, #0
      b8:	d107      	bne.n	ca <__do_global_dtors_aux+0x1a>
      ba:	4b05      	ldr	r3, [pc, #20]	; (d0 <__do_global_dtors_aux+0x20>)
      bc:	2b00      	cmp	r3, #0
      be:	d002      	beq.n	c6 <__do_global_dtors_aux+0x16>
      c0:	4804      	ldr	r0, [pc, #16]	; (d4 <__do_global_dtors_aux+0x24>)
      c2:	e000      	b.n	c6 <__do_global_dtors_aux+0x16>
      c4:	bf00      	nop
      c6:	2301      	movs	r3, #1
      c8:	7023      	strb	r3, [r4, #0]
      ca:	bd10      	pop	{r4, pc}
      cc:	20000074 	.word	0x20000074
      d0:	00000000 	.word	0x00000000
      d4:	000041e0 	.word	0x000041e0

000000d8 <frame_dummy>:
      d8:	b508      	push	{r3, lr}
      da:	4b08      	ldr	r3, [pc, #32]	; (fc <frame_dummy+0x24>)
      dc:	2b00      	cmp	r3, #0
      de:	d003      	beq.n	e8 <frame_dummy+0x10>
      e0:	4807      	ldr	r0, [pc, #28]	; (100 <frame_dummy+0x28>)
      e2:	4908      	ldr	r1, [pc, #32]	; (104 <frame_dummy+0x2c>)
      e4:	e000      	b.n	e8 <frame_dummy+0x10>
      e6:	bf00      	nop
      e8:	4807      	ldr	r0, [pc, #28]	; (108 <frame_dummy+0x30>)
      ea:	6803      	ldr	r3, [r0, #0]
      ec:	2b00      	cmp	r3, #0
      ee:	d003      	beq.n	f8 <frame_dummy+0x20>
      f0:	4b06      	ldr	r3, [pc, #24]	; (10c <frame_dummy+0x34>)
      f2:	2b00      	cmp	r3, #0
      f4:	d000      	beq.n	f8 <frame_dummy+0x20>
      f6:	4798      	blx	r3
      f8:	bd08      	pop	{r3, pc}
      fa:	46c0      	nop			; (mov r8, r8)
      fc:	00000000 	.word	0x00000000
     100:	000041e0 	.word	0x000041e0
     104:	20000078 	.word	0x20000078
     108:	000041e0 	.word	0x000041e0
     10c:	00000000 	.word	0x00000000

00000110 <configure_adc>:
* POSITIVE INPUT		-> PA02
* NEGATIVE INPUT		-> GND
*/

void configure_adc(void)
{
     110:	b510      	push	{r4, lr}
     112:	b08c      	sub	sp, #48	; 0x30
	struct adc_config conf_adc;
	
	adc_get_config_defaults(&conf_adc);
     114:	4668      	mov	r0, sp
     116:	4b14      	ldr	r3, [pc, #80]	; (168 <configure_adc+0x58>)
     118:	4798      	blx	r3
	
	conf_adc.clock_source = GCLK_GENERATOR_1;
     11a:	2301      	movs	r3, #1
     11c:	466a      	mov	r2, sp
     11e:	7013      	strb	r3, [r2, #0]
	conf_adc.reference = ADC_REFERENCE_INTVCC1;
     120:	2302      	movs	r3, #2
     122:	7053      	strb	r3, [r2, #1]
	conf_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV16;
     124:	2380      	movs	r3, #128	; 0x80
     126:	009b      	lsls	r3, r3, #2
     128:	8053      	strh	r3, [r2, #2]
	conf_adc.positive_input = ADC_POSITIVE_INPUT_PIN0;
     12a:	2300      	movs	r3, #0
     12c:	7313      	strb	r3, [r2, #12]
	conf_adc.negative_input = ADC_NEGATIVE_INPUT_GND;
     12e:	23c0      	movs	r3, #192	; 0xc0
     130:	015b      	lsls	r3, r3, #5
     132:	81d3      	strh	r3, [r2, #14]
	
	adc_init(&adc_instance, ADC, &conf_adc);
     134:	4c0d      	ldr	r4, [pc, #52]	; (16c <configure_adc+0x5c>)
     136:	1c20      	adds	r0, r4, #0
     138:	490d      	ldr	r1, [pc, #52]	; (170 <configure_adc+0x60>)
     13a:	4b0e      	ldr	r3, [pc, #56]	; (174 <configure_adc+0x64>)
     13c:	4798      	blx	r3
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     13e:	6823      	ldr	r3, [r4, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     140:	7e5a      	ldrb	r2, [r3, #25]

	while (adc_is_syncing(module_inst)) {
     142:	b252      	sxtb	r2, r2
     144:	2a00      	cmp	r2, #0
     146:	dbfb      	blt.n	140 <configure_adc+0x30>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     148:	2180      	movs	r1, #128	; 0x80
     14a:	0409      	lsls	r1, r1, #16
     14c:	4a0a      	ldr	r2, [pc, #40]	; (178 <configure_adc+0x68>)
     14e:	6011      	str	r1, [r2, #0]

#if ADC_CALLBACK_MODE == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#endif

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
     150:	7819      	ldrb	r1, [r3, #0]
     152:	2202      	movs	r2, #2
     154:	430a      	orrs	r2, r1
     156:	701a      	strb	r2, [r3, #0]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     158:	4b04      	ldr	r3, [pc, #16]	; (16c <configure_adc+0x5c>)
     15a:	681a      	ldr	r2, [r3, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     15c:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     15e:	b25b      	sxtb	r3, r3
     160:	2b00      	cmp	r3, #0
     162:	dbfb      	blt.n	15c <configure_adc+0x4c>
	
	adc_enable(&adc_instance);
}
     164:	b00c      	add	sp, #48	; 0x30
     166:	bd10      	pop	{r4, pc}
     168:	0000090d 	.word	0x0000090d
     16c:	20000184 	.word	0x20000184
     170:	42004000 	.word	0x42004000
     174:	00000955 	.word	0x00000955
     178:	e000e100 	.word	0xe000e100

0000017c <hitecServoInit>:

volatile float angle2pwm_factor = (SERVO_MAX_PULSE-SERVO_ZERO_PULSE)/180;
struct tcc_module tcc_instance;

void hitecServoInit(void)
{
     17c:	b570      	push	{r4, r5, r6, lr}
     17e:	b0aa      	sub	sp, #168	; 0xa8
	struct tcc_config config_tcc;
	tcc_get_config_defaults(&config_tcc, TCC0);
     180:	ac01      	add	r4, sp, #4
     182:	4e13      	ldr	r6, [pc, #76]	; (1d0 <hitecServoInit+0x54>)
     184:	1c20      	adds	r0, r4, #0
     186:	1c31      	adds	r1, r6, #0
     188:	4b12      	ldr	r3, [pc, #72]	; (1d4 <hitecServoInit+0x58>)
     18a:	4798      	blx	r3
	config_tcc.counter.clock_source = GCLK_GENERATOR_3;
     18c:	2303      	movs	r3, #3
     18e:	72a3      	strb	r3, [r4, #10]
	config_tcc.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV1;
     190:	2300      	movs	r3, #0
     192:	72e3      	strb	r3, [r4, #11]
	config_tcc.counter.period = HITECSERVO_TIME_PERIOD;
     194:	4b10      	ldr	r3, [pc, #64]	; (1d8 <hitecServoInit+0x5c>)
     196:	6063      	str	r3, [r4, #4]
	config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
     198:	2302      	movs	r3, #2
     19a:	7623      	strb	r3, [r4, #24]
	config_tcc.pins.enable_wave_out_pin[6] = true;
     19c:	2201      	movs	r2, #1
     19e:	239e      	movs	r3, #158	; 0x9e
     1a0:	54e2      	strb	r2, [r4, r3]
	config_tcc.pins.wave_out_pin[6] = PIN_PB12F_TCC0_WO6 ;
     1a2:	232c      	movs	r3, #44	; 0x2c
     1a4:	6723      	str	r3, [r4, #112]	; 0x70
	config_tcc.pins.wave_out_pin_mux[6] = MUX_PB12F_TCC0_WO6;
     1a6:	2205      	movs	r2, #5
     1a8:	2390      	movs	r3, #144	; 0x90
     1aa:	50e2      	str	r2, [r4, r3]
	tcc_init(&tcc_instance, TCC0, &config_tcc);
     1ac:	4d0b      	ldr	r5, [pc, #44]	; (1dc <hitecServoInit+0x60>)
     1ae:	1c28      	adds	r0, r5, #0
     1b0:	1c31      	adds	r1, r6, #0
     1b2:	1c22      	adds	r2, r4, #0
     1b4:	4b0a      	ldr	r3, [pc, #40]	; (1e0 <hitecServoInit+0x64>)
     1b6:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
     1b8:	682a      	ldr	r2, [r5, #0]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
     1ba:	2102      	movs	r1, #2
     1bc:	6893      	ldr	r3, [r2, #8]
     1be:	4219      	tst	r1, r3
     1c0:	d1fc      	bne.n	1bc <hitecServoInit+0x40>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
     1c2:	6811      	ldr	r1, [r2, #0]
     1c4:	2302      	movs	r3, #2
     1c6:	430b      	orrs	r3, r1
     1c8:	6013      	str	r3, [r2, #0]
	tcc_enable(&tcc_instance);
}
     1ca:	b02a      	add	sp, #168	; 0xa8
     1cc:	bd70      	pop	{r4, r5, r6, pc}
     1ce:	46c0      	nop			; (mov r8, r8)
     1d0:	42002000 	.word	0x42002000
     1d4:	000002d9 	.word	0x000002d9
     1d8:	00004e20 	.word	0x00004e20
     1dc:	200000dc 	.word	0x200000dc
     1e0:	00000425 	.word	0x00000425

000001e4 <setHitecServoAngle>:

void setHitecServoAngle(float angle)
{
     1e4:	b510      	push	{r4, lr}
	uint32_t angle_ = (angle*angle2pwm_factor)+SERVO_ZERO_PULSE;
     1e6:	4b0b      	ldr	r3, [pc, #44]	; (214 <setHitecServoAngle+0x30>)
     1e8:	6819      	ldr	r1, [r3, #0]
     1ea:	4b0b      	ldr	r3, [pc, #44]	; (218 <setHitecServoAngle+0x34>)
     1ec:	4798      	blx	r3
     1ee:	490b      	ldr	r1, [pc, #44]	; (21c <setHitecServoAngle+0x38>)
     1f0:	4b0b      	ldr	r3, [pc, #44]	; (220 <setHitecServoAngle+0x3c>)
     1f2:	4798      	blx	r3
     1f4:	4b0b      	ldr	r3, [pc, #44]	; (224 <setHitecServoAngle+0x40>)
     1f6:	4798      	blx	r3
     1f8:	1c04      	adds	r4, r0, #0
	printf("%d",(int)(angle_*1000));	
     1fa:	21fa      	movs	r1, #250	; 0xfa
     1fc:	0089      	lsls	r1, r1, #2
     1fe:	4341      	muls	r1, r0
     200:	4809      	ldr	r0, [pc, #36]	; (228 <setHitecServoAngle+0x44>)
     202:	4b0a      	ldr	r3, [pc, #40]	; (22c <setHitecServoAngle+0x48>)
     204:	4798      	blx	r3
	tcc_set_compare_value(&tcc_instance,2,angle_);
     206:	480a      	ldr	r0, [pc, #40]	; (230 <setHitecServoAngle+0x4c>)
     208:	2102      	movs	r1, #2
     20a:	1c22      	adds	r2, r4, #0
     20c:	4b09      	ldr	r3, [pc, #36]	; (234 <setHitecServoAngle+0x50>)
     20e:	4798      	blx	r3
     210:	bd10      	pop	{r4, pc}
     212:	46c0      	nop			; (mov r8, r8)
     214:	20000000 	.word	0x20000000
     218:	00002705 	.word	0x00002705
     21c:	44098000 	.word	0x44098000
     220:	0000242d 	.word	0x0000242d
     224:	000023fd 	.word	0x000023fd
     228:	00003edc 	.word	0x00003edc
     22c:	00002fd9 	.word	0x00002fd9
     230:	200000dc 	.word	0x200000dc
     234:	0000081d 	.word	0x0000081d

00000238 <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
     238:	1c03      	adds	r3, r0, #0
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
     23a:	4a08      	ldr	r2, [pc, #32]	; (25c <_tcc_get_inst_index+0x24>)
     23c:	4290      	cmp	r0, r2
     23e:	d00a      	beq.n	256 <_tcc_get_inst_index+0x1e>
     240:	4a07      	ldr	r2, [pc, #28]	; (260 <_tcc_get_inst_index+0x28>)
     242:	4290      	cmp	r0, r2
     244:	d005      	beq.n	252 <_tcc_get_inst_index+0x1a>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     246:	2000      	movs	r0, #0
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
		if (hw == tcc_modules[i]) {
     248:	4a06      	ldr	r2, [pc, #24]	; (264 <_tcc_get_inst_index+0x2c>)
     24a:	4293      	cmp	r3, r2
     24c:	d105      	bne.n	25a <_tcc_get_inst_index+0x22>
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
     24e:	2002      	movs	r0, #2
     250:	e002      	b.n	258 <_tcc_get_inst_index+0x20>
     252:	2001      	movs	r0, #1
     254:	e000      	b.n	258 <_tcc_get_inst_index+0x20>
     256:	2000      	movs	r0, #0
		if (hw == tcc_modules[i]) {
			return i;
     258:	b2c0      	uxtb	r0, r0
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
     25a:	4770      	bx	lr
     25c:	42002000 	.word	0x42002000
     260:	42002400 	.word	0x42002400
     264:	42002800 	.word	0x42002800

00000268 <_tcc_set_compare_value>:
static enum status_code _tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare,
		const bool double_buffering_enabled)
{
     268:	b5f0      	push	{r4, r5, r6, r7, lr}
     26a:	4647      	mov	r7, r8
     26c:	b480      	push	{r7}
     26e:	1c0e      	adds	r6, r1, #0
     270:	1c17      	adds	r7, r2, #0
     272:	4698      	mov	r8, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
     274:	6804      	ldr	r4, [r0, #0]
	/* Get a index of the module */
	uint8_t module_index = _tcc_get_inst_index(tcc_module);
     276:	1c20      	adds	r0, r4, #0
     278:	4914      	ldr	r1, [pc, #80]	; (2cc <_tcc_set_compare_value+0x64>)
     27a:	4788      	blx	r1

	/* Check index */
	if (channel_index >= _tcc_cc_nums[module_index]) {
     27c:	4b14      	ldr	r3, [pc, #80]	; (2d0 <_tcc_set_compare_value+0x68>)
     27e:	5c1b      	ldrb	r3, [r3, r0]
		return STATUS_ERR_INVALID_ARG;
     280:	2517      	movs	r5, #23
	Tcc *const tcc_module = module_inst->hw;
	/* Get a index of the module */
	uint8_t module_index = _tcc_get_inst_index(tcc_module);

	/* Check index */
	if (channel_index >= _tcc_cc_nums[module_index]) {
     282:	42b3      	cmp	r3, r6
     284:	d91d      	bls.n	2c2 <_tcc_set_compare_value+0x5a>
		return STATUS_ERR_INVALID_ARG;
	}

	uint32_t max_count = _tcc_maxs[module_index];
     286:	0080      	lsls	r0, r0, #2

	/* Check compare value */
	if (compare > max_count) {
     288:	4b12      	ldr	r3, [pc, #72]	; (2d4 <_tcc_set_compare_value+0x6c>)
     28a:	58c3      	ldr	r3, [r0, r3]
     28c:	42bb      	cmp	r3, r7
     28e:	d318      	bcc.n	2c2 <_tcc_set_compare_value+0x5a>
		return STATUS_ERR_INVALID_ARG;
	}

	if (double_buffering_enabled) {
     290:	4643      	mov	r3, r8
     292:	2b00      	cmp	r3, #0
     294:	d00a      	beq.n	2ac <_tcc_set_compare_value+0x44>
#if (SAML21)
		tcc_module->CCBUF[channel_index].reg = compare;
#else
		while(tcc_module->SYNCBUSY.reg  &
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
     296:	2280      	movs	r2, #128	; 0x80
     298:	0312      	lsls	r2, r2, #12
     29a:	40b2      	lsls	r2, r6

	if (double_buffering_enabled) {
#if (SAML21)
		tcc_module->CCBUF[channel_index].reg = compare;
#else
		while(tcc_module->SYNCBUSY.reg  &
     29c:	68a3      	ldr	r3, [r4, #8]
     29e:	4213      	tst	r3, r2
     2a0:	d1fc      	bne.n	29c <_tcc_set_compare_value+0x34>
				(TCC_SYNCBUSY_CCB0 << channel_index)) {
			/* Sync wait */
		}
		tcc_module->CCB[channel_index].reg = compare;
     2a2:	361c      	adds	r6, #28
     2a4:	00b6      	lsls	r6, r6, #2
     2a6:	5137      	str	r7, [r6, r4]
		while(tcc_module->SYNCBUSY.reg  & (TCC_SYNCBUSY_CC0 << channel_index)) {
			/* Sync wait */
		}
		tcc_module->CC[channel_index].reg = compare;
	}
	return STATUS_OK;
     2a8:	2500      	movs	r5, #0
     2aa:	e00a      	b.n	2c2 <_tcc_set_compare_value+0x5a>
			/* Sync wait */
		}
		tcc_module->CCB[channel_index].reg = compare;
#endif
	} else {
		while(tcc_module->SYNCBUSY.reg  & (TCC_SYNCBUSY_CC0 << channel_index)) {
     2ac:	2280      	movs	r2, #128	; 0x80
     2ae:	0052      	lsls	r2, r2, #1
     2b0:	40b2      	lsls	r2, r6
     2b2:	68a3      	ldr	r3, [r4, #8]
     2b4:	4213      	tst	r3, r2
     2b6:	d1fc      	bne.n	2b2 <_tcc_set_compare_value+0x4a>
			/* Sync wait */
		}
		tcc_module->CC[channel_index].reg = compare;
     2b8:	3610      	adds	r6, #16
     2ba:	00b6      	lsls	r6, r6, #2
     2bc:	19a4      	adds	r4, r4, r6
     2be:	6067      	str	r7, [r4, #4]
	}
	return STATUS_OK;
     2c0:	2500      	movs	r5, #0
}
     2c2:	1c28      	adds	r0, r5, #0
     2c4:	bc04      	pop	{r2}
     2c6:	4690      	mov	r8, r2
     2c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     2ca:	46c0      	nop			; (mov r8, r8)
     2cc:	00000239 	.word	0x00000239
     2d0:	00003efc 	.word	0x00003efc
     2d4:	00003ef0 	.word	0x00003ef0

000002d8 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
     2d8:	b510      	push	{r4, lr}
     2da:	1c04      	adds	r4, r0, #0
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
     2dc:	1c08      	adds	r0, r1, #0
     2de:	4b4f      	ldr	r3, [pc, #316]	; (41c <tcc_get_config_defaults+0x144>)
     2e0:	4798      	blx	r3

	/* Base counter defaults */
	config->counter.count                  = 0;
     2e2:	2300      	movs	r3, #0
     2e4:	6023      	str	r3, [r4, #0]

	config->counter.period                 = _tcc_maxs[module_index];
     2e6:	0080      	lsls	r0, r0, #2
     2e8:	4a4d      	ldr	r2, [pc, #308]	; (420 <tcc_get_config_defaults+0x148>)
     2ea:	5880      	ldr	r0, [r0, r2]
     2ec:	6060      	str	r0, [r4, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
     2ee:	72a3      	strb	r3, [r4, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
     2f0:	72e3      	strb	r3, [r4, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
     2f2:	7323      	strb	r3, [r4, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
     2f4:	7263      	strb	r3, [r4, #9]
	config->counter.oneshot                = false;
     2f6:	7223      	strb	r3, [r4, #8]

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
     2f8:	61e3      	str	r3, [r4, #28]
     2fa:	6223      	str	r3, [r4, #32]
     2fc:	6263      	str	r3, [r4, #36]	; 0x24
     2fe:	62a3      	str	r3, [r4, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
     300:	7523      	strb	r3, [r4, #20]
     302:	7563      	strb	r3, [r4, #21]
     304:	75a3      	strb	r3, [r4, #22]
     306:	75e3      	strb	r3, [r4, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
     308:	7623      	strb	r3, [r4, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
     30a:	7663      	strb	r3, [r4, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
     30c:	7423      	strb	r3, [r4, #16]
     30e:	7463      	strb	r3, [r4, #17]
     310:	74a3      	strb	r3, [r4, #18]
     312:	74e3      	strb	r3, [r4, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
     314:	222c      	movs	r2, #44	; 0x2c
     316:	54a3      	strb	r3, [r4, r2]
     318:	222d      	movs	r2, #45	; 0x2d
     31a:	54a3      	strb	r3, [r4, r2]
     31c:	222e      	movs	r2, #46	; 0x2e
     31e:	54a3      	strb	r3, [r4, r2]
     320:	222f      	movs	r2, #47	; 0x2f
     322:	54a3      	strb	r3, [r4, r2]
     324:	2230      	movs	r2, #48	; 0x30
     326:	54a3      	strb	r3, [r4, r2]
     328:	2231      	movs	r2, #49	; 0x31
     32a:	54a3      	strb	r3, [r4, r2]
     32c:	2232      	movs	r2, #50	; 0x32
     32e:	54a3      	strb	r3, [r4, r2]
     330:	2233      	movs	r2, #51	; 0x33
     332:	54a3      	strb	r3, [r4, r2]
     334:	2234      	movs	r2, #52	; 0x34
     336:	54a3      	strb	r3, [r4, r2]
     338:	2235      	movs	r2, #53	; 0x35
     33a:	54a3      	strb	r3, [r4, r2]
     33c:	2236      	movs	r2, #54	; 0x36
     33e:	54a3      	strb	r3, [r4, r2]
     340:	2237      	movs	r2, #55	; 0x37
     342:	54a3      	strb	r3, [r4, r2]
     344:	2238      	movs	r2, #56	; 0x38
     346:	54a3      	strb	r3, [r4, r2]
     348:	2239      	movs	r2, #57	; 0x39
     34a:	54a3      	strb	r3, [r4, r2]
     34c:	223a      	movs	r2, #58	; 0x3a
     34e:	54a3      	strb	r3, [r4, r2]
     350:	223b      	movs	r2, #59	; 0x3b
     352:	54a3      	strb	r3, [r4, r2]
     354:	223c      	movs	r2, #60	; 0x3c
     356:	54a3      	strb	r3, [r4, r2]
     358:	223d      	movs	r2, #61	; 0x3d
     35a:	54a3      	strb	r3, [r4, r2]
     35c:	223e      	movs	r2, #62	; 0x3e
     35e:	54a3      	strb	r3, [r4, r2]
     360:	223f      	movs	r2, #63	; 0x3f
     362:	54a3      	strb	r3, [r4, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
     364:	2240      	movs	r2, #64	; 0x40
     366:	54a3      	strb	r3, [r4, r2]
     368:	2241      	movs	r2, #65	; 0x41
     36a:	54a3      	strb	r3, [r4, r2]
     36c:	2242      	movs	r2, #66	; 0x42
     36e:	54a3      	strb	r3, [r4, r2]
     370:	2243      	movs	r2, #67	; 0x43
     372:	54a3      	strb	r3, [r4, r2]
     374:	2244      	movs	r2, #68	; 0x44
     376:	54a3      	strb	r3, [r4, r2]
     378:	2245      	movs	r2, #69	; 0x45
     37a:	54a3      	strb	r3, [r4, r2]
     37c:	2246      	movs	r2, #70	; 0x46
     37e:	54a3      	strb	r3, [r4, r2]
     380:	2247      	movs	r2, #71	; 0x47
     382:	54a3      	strb	r3, [r4, r2]
     384:	2248      	movs	r2, #72	; 0x48
     386:	54a3      	strb	r3, [r4, r2]
     388:	2249      	movs	r2, #73	; 0x49
     38a:	54a3      	strb	r3, [r4, r2]
     38c:	224a      	movs	r2, #74	; 0x4a
     38e:	54a3      	strb	r3, [r4, r2]
     390:	224b      	movs	r2, #75	; 0x4b
     392:	54a3      	strb	r3, [r4, r2]
     394:	224c      	movs	r2, #76	; 0x4c
     396:	54a3      	strb	r3, [r4, r2]
     398:	224d      	movs	r2, #77	; 0x4d
     39a:	54a3      	strb	r3, [r4, r2]
     39c:	224e      	movs	r2, #78	; 0x4e
     39e:	54a3      	strb	r3, [r4, r2]
     3a0:	224f      	movs	r2, #79	; 0x4f
     3a2:	54a3      	strb	r3, [r4, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
     3a4:	2250      	movs	r2, #80	; 0x50
     3a6:	54a3      	strb	r3, [r4, r2]
     3a8:	2251      	movs	r2, #81	; 0x51
     3aa:	54a3      	strb	r3, [r4, r2]
     3ac:	2252      	movs	r2, #82	; 0x52
     3ae:	54a3      	strb	r3, [r4, r2]
     3b0:	2253      	movs	r2, #83	; 0x53
     3b2:	54a3      	strb	r3, [r4, r2]
     3b4:	2254      	movs	r2, #84	; 0x54
     3b6:	54a3      	strb	r3, [r4, r2]
     3b8:	2255      	movs	r2, #85	; 0x55
     3ba:	54a3      	strb	r3, [r4, r2]
     3bc:	2256      	movs	r2, #86	; 0x56
     3be:	54a3      	strb	r3, [r4, r2]
     3c0:	2257      	movs	r2, #87	; 0x57
     3c2:	54a3      	strb	r3, [r4, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
     3c4:	2298      	movs	r2, #152	; 0x98
     3c6:	54a3      	strb	r3, [r4, r2]
     3c8:	65a3      	str	r3, [r4, #88]	; 0x58
     3ca:	67a3      	str	r3, [r4, #120]	; 0x78
     3cc:	2299      	movs	r2, #153	; 0x99
     3ce:	54a3      	strb	r3, [r4, r2]
     3d0:	65e3      	str	r3, [r4, #92]	; 0x5c
     3d2:	67e3      	str	r3, [r4, #124]	; 0x7c
     3d4:	229a      	movs	r2, #154	; 0x9a
     3d6:	54a3      	strb	r3, [r4, r2]
     3d8:	6623      	str	r3, [r4, #96]	; 0x60
     3da:	2280      	movs	r2, #128	; 0x80
     3dc:	50a3      	str	r3, [r4, r2]
     3de:	229b      	movs	r2, #155	; 0x9b
     3e0:	54a3      	strb	r3, [r4, r2]
     3e2:	6663      	str	r3, [r4, #100]	; 0x64
     3e4:	2284      	movs	r2, #132	; 0x84
     3e6:	50a3      	str	r3, [r4, r2]
     3e8:	229c      	movs	r2, #156	; 0x9c
     3ea:	54a3      	strb	r3, [r4, r2]
     3ec:	66a3      	str	r3, [r4, #104]	; 0x68
     3ee:	2288      	movs	r2, #136	; 0x88
     3f0:	50a3      	str	r3, [r4, r2]
     3f2:	229d      	movs	r2, #157	; 0x9d
     3f4:	54a3      	strb	r3, [r4, r2]
     3f6:	66e3      	str	r3, [r4, #108]	; 0x6c
     3f8:	228c      	movs	r2, #140	; 0x8c
     3fa:	50a3      	str	r3, [r4, r2]
     3fc:	229e      	movs	r2, #158	; 0x9e
     3fe:	54a3      	strb	r3, [r4, r2]
     400:	6723      	str	r3, [r4, #112]	; 0x70
     402:	2290      	movs	r2, #144	; 0x90
     404:	50a3      	str	r3, [r4, r2]
     406:	229f      	movs	r2, #159	; 0x9f
     408:	54a3      	strb	r3, [r4, r2]
     40a:	6763      	str	r3, [r4, #116]	; 0x74
     40c:	2294      	movs	r2, #148	; 0x94
     40e:	50a3      	str	r3, [r4, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
     410:	2101      	movs	r1, #1
     412:	22a0      	movs	r2, #160	; 0xa0
     414:	54a1      	strb	r1, [r4, r2]
	config->run_in_standby            = false;
     416:	22a1      	movs	r2, #161	; 0xa1
     418:	54a3      	strb	r3, [r4, r2]
}
     41a:	bd10      	pop	{r4, pc}
     41c:	00000239 	.word	0x00000239
     420:	00003ef0 	.word	0x00003ef0

00000424 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
     424:	b5f0      	push	{r4, r5, r6, r7, lr}
     426:	465f      	mov	r7, fp
     428:	4656      	mov	r6, sl
     42a:	464d      	mov	r5, r9
     42c:	4644      	mov	r4, r8
     42e:	b4f0      	push	{r4, r5, r6, r7}
     430:	b08f      	sub	sp, #60	; 0x3c
     432:	4680      	mov	r8, r0
     434:	1c0c      	adds	r4, r1, #0
     436:	1c16      	adds	r6, r2, #0
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
     438:	1c08      	adds	r0, r1, #0
     43a:	4bdb      	ldr	r3, [pc, #876]	; (7a8 <tcc_init+0x384>)
     43c:	4798      	blx	r3
     43e:	1c05      	adds	r5, r0, #0

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
     440:	1c07      	adds	r7, r0, #0
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     442:	4bda      	ldr	r3, [pc, #872]	; (7ac <tcc_init+0x388>)
     444:	6a19      	ldr	r1, [r3, #32]
     446:	0080      	lsls	r0, r0, #2
     448:	4ad9      	ldr	r2, [pc, #868]	; (7b0 <tcc_init+0x38c>)
     44a:	5882      	ldr	r2, [r0, r2]
     44c:	430a      	orrs	r2, r1
     44e:	621a      	str	r2, [r3, #32]
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
     450:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     452:	201c      	movs	r0, #28
	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
     454:	0799      	lsls	r1, r3, #30
     456:	d500      	bpl.n	45a <tcc_init+0x36>
     458:	e1d9      	b.n	80e <tcc_init+0x3ea>
		return STATUS_ERR_DENIED;
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
     45a:	6823      	ldr	r3, [r4, #0]
     45c:	07da      	lsls	r2, r3, #31
     45e:	d500      	bpl.n	462 <tcc_init+0x3e>
     460:	e1d5      	b.n	80e <tcc_init+0x3ea>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
     462:	00ab      	lsls	r3, r5, #2
     464:	4ad3      	ldr	r2, [pc, #844]	; (7b4 <tcc_init+0x390>)
     466:	589b      	ldr	r3, [r3, r2]

	/* Check all counter values */
	if ((config->counter.count > count_max)
		|| (config->counter.period > count_max)
		) {
		return STATUS_ERR_INVALID_ARG;
     468:	2017      	movs	r0, #23

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];

	/* Check all counter values */
	if ((config->counter.count > count_max)
     46a:	6831      	ldr	r1, [r6, #0]
     46c:	428b      	cmp	r3, r1
     46e:	d200      	bcs.n	472 <tcc_init+0x4e>
     470:	e1cd      	b.n	80e <tcc_init+0x3ea>
		|| (config->counter.period > count_max)
     472:	6872      	ldr	r2, [r6, #4]
     474:	4293      	cmp	r3, r2
     476:	d200      	bcs.n	47a <tcc_init+0x56>
     478:	e1c9      	b.n	80e <tcc_init+0x3ea>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
		if ((config->compare.match[i] > count_max)
     47a:	69f0      	ldr	r0, [r6, #28]
     47c:	4283      	cmp	r3, r0
     47e:	d200      	bcs.n	482 <tcc_init+0x5e>
     480:	e1ae      	b.n	7e0 <tcc_init+0x3bc>
     482:	6a31      	ldr	r1, [r6, #32]
     484:	428b      	cmp	r3, r1
     486:	d200      	bcs.n	48a <tcc_init+0x66>
     488:	e1ac      	b.n	7e4 <tcc_init+0x3c0>
     48a:	6a72      	ldr	r2, [r6, #36]	; 0x24
     48c:	4293      	cmp	r3, r2
     48e:	d200      	bcs.n	492 <tcc_init+0x6e>
     490:	e1aa      	b.n	7e8 <tcc_init+0x3c4>
     492:	6ab0      	ldr	r0, [r6, #40]	; 0x28
     494:	4283      	cmp	r3, r0
     496:	d200      	bcs.n	49a <tcc_init+0x76>
     498:	e1a8      	b.n	7ec <tcc_init+0x3c8>
     49a:	2300      	movs	r3, #0
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
		if (!config->pins.enable_wave_out_pin[i]) {
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
     49c:	49c6      	ldr	r1, [pc, #792]	; (7b8 <tcc_init+0x394>)
     49e:	18f2      	adds	r2, r6, r3
     4a0:	3298      	adds	r2, #152	; 0x98
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
		if (!config->pins.enable_wave_out_pin[i]) {
     4a2:	7812      	ldrb	r2, [r2, #0]
     4a4:	2a00      	cmp	r2, #0
     4a6:	d003      	beq.n	4b0 <tcc_init+0x8c>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
     4a8:	5dca      	ldrb	r2, [r1, r7]
     4aa:	429a      	cmp	r2, r3
     4ac:	dc00      	bgt.n	4b0 <tcc_init+0x8c>
     4ae:	e19f      	b.n	7f0 <tcc_init+0x3cc>
			return STATUS_ERR_INVALID_ARG;
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
     4b0:	3301      	adds	r3, #1
     4b2:	2b08      	cmp	r3, #8
     4b4:	d1f3      	bne.n	49e <tcc_init+0x7a>
     4b6:	2100      	movs	r1, #0
     4b8:	468b      	mov	fp, r1
     4ba:	2300      	movs	r3, #0

			if (i > _tcc_cc_nums[module_index]) {
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
     4bc:	2180      	movs	r1, #128	; 0x80
     4be:	0449      	lsls	r1, r1, #17
     4c0:	468c      	mov	ip, r1
     4c2:	4658      	mov	r0, fp
     4c4:	18f2      	adds	r2, r6, r3
{
	uint32_t ctrla = 0;

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
		if (config->capture.channel_function[i] ==
     4c6:	7c12      	ldrb	r2, [r2, #16]
     4c8:	2a01      	cmp	r2, #1
     4ca:	d107      	bne.n	4dc <tcc_init+0xb8>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
     4cc:	49bb      	ldr	r1, [pc, #748]	; (7bc <tcc_init+0x398>)
     4ce:	5dca      	ldrb	r2, [r1, r7]
     4d0:	429a      	cmp	r2, r3
     4d2:	da00      	bge.n	4d6 <tcc_init+0xb2>
     4d4:	e18e      	b.n	7f4 <tcc_init+0x3d0>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
     4d6:	4662      	mov	r2, ip
     4d8:	409a      	lsls	r2, r3
     4da:	4310      	orrs	r0, r2
		uint32_t *value_buffer)
{
	uint32_t ctrla = 0;

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
     4dc:	3301      	adds	r3, #1
     4de:	2b04      	cmp	r3, #4
     4e0:	d1f0      	bne.n	4c4 <tcc_init+0xa0>
     4e2:	4683      	mov	fp, r0
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
		}
	}

	if (config->run_in_standby) {
     4e4:	23a1      	movs	r3, #161	; 0xa1
     4e6:	5cf3      	ldrb	r3, [r6, r3]
     4e8:	2b00      	cmp	r3, #0
     4ea:	d004      	beq.n	4f6 <tcc_init+0xd2>
		ctrla |= TCC_CTRLA_RUNSTDBY;
     4ec:	2380      	movs	r3, #128	; 0x80
     4ee:	011b      	lsls	r3, r3, #4
     4f0:	1c02      	adds	r2, r0, #0
     4f2:	431a      	orrs	r2, r3
     4f4:	4693      	mov	fp, r2
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
     4f6:	7b33      	ldrb	r3, [r6, #12]
     4f8:	9307      	str	r3, [sp, #28]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
     4fa:	7af0      	ldrb	r0, [r6, #11]
     4fc:	9008      	str	r0, [sp, #32]
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
	uint8_t ctrlb = 0;

	if (config->counter.oneshot) {
     4fe:	7a33      	ldrb	r3, [r6, #8]
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
	uint8_t ctrlb = 0;
     500:	1e5a      	subs	r2, r3, #1
     502:	4193      	sbcs	r3, r2
     504:	009b      	lsls	r3, r3, #2
     506:	9305      	str	r3, [sp, #20]

	if (config->counter.oneshot) {
		ctrlb |= TCC_CTRLBSET_ONESHOT;
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
     508:	7a73      	ldrb	r3, [r6, #9]
     50a:	2b01      	cmp	r3, #1
     50c:	d102      	bne.n	514 <tcc_init+0xf0>
		ctrlb |= TCC_CTRLBSET_DIR;
     50e:	9905      	ldr	r1, [sp, #20]
     510:	4319      	orrs	r1, r3
     512:	9105      	str	r1, [sp, #20]
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
     514:	4ba9      	ldr	r3, [pc, #676]	; (7bc <tcc_init+0x398>)
     516:	5d5b      	ldrb	r3, [r3, r5]
     518:	9304      	str	r3, [sp, #16]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
		cfg = (struct tcc_recoverable_fault_config *)
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
     51a:	1c33      	adds	r3, r6, #0
     51c:	332c      	adds	r3, #44	; 0x2c
     51e:	7a5a      	ldrb	r2, [r3, #9]
     520:	9b04      	ldr	r3, [sp, #16]
     522:	4293      	cmp	r3, r2
     524:	d800      	bhi.n	528 <tcc_init+0x104>
     526:	e171      	b.n	80c <tcc_init+0x3e8>
			return STATUS_ERR_INVALID_ARG;
		}
		if (cfg->filter_value > 0xF) {
     528:	232c      	movs	r3, #44	; 0x2c
     52a:	5cf1      	ldrb	r1, [r6, r3]
     52c:	290f      	cmp	r1, #15
     52e:	d900      	bls.n	532 <tcc_init+0x10e>
     530:	e16c      	b.n	80c <tcc_init+0x3e8>
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
		cfg = (struct tcc_recoverable_fault_config *)
     532:	1c33      	adds	r3, r6, #0
     534:	332c      	adds	r3, #44	; 0x2c
     536:	1c30      	adds	r0, r6, #0
     538:	3036      	adds	r0, #54	; 0x36
     53a:	9003      	str	r0, [sp, #12]
     53c:	a80c      	add	r0, sp, #48	; 0x30
     53e:	4681      	mov	r9, r0
     540:	a80d      	add	r0, sp, #52	; 0x34
     542:	9002      	str	r0, [sp, #8]
     544:	4648      	mov	r0, r9
     546:	46bc      	mov	ip, r7
     548:	465f      	mov	r7, fp
     54a:	9709      	str	r7, [sp, #36]	; 0x24
     54c:	46a1      	mov	r9, r4
     54e:	46b2      	mov	sl, r6
     550:	46ab      	mov	fp, r5
     552:	e00d      	b.n	570 <tcc_init+0x14c>
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
     554:	9b03      	ldr	r3, [sp, #12]
     556:	7a5a      	ldrb	r2, [r3, #9]
     558:	9904      	ldr	r1, [sp, #16]
     55a:	4291      	cmp	r1, r2
     55c:	d800      	bhi.n	560 <tcc_init+0x13c>
     55e:	e155      	b.n	80c <tcc_init+0x3e8>
			return STATUS_ERR_INVALID_ARG;
		}
		if (cfg->filter_value > 0xF) {
     560:	7819      	ldrb	r1, [r3, #0]
     562:	1c1c      	adds	r4, r3, #0
     564:	340a      	adds	r4, #10
     566:	9403      	str	r4, [sp, #12]
     568:	3004      	adds	r0, #4
     56a:	290f      	cmp	r1, #15
     56c:	d900      	bls.n	570 <tcc_init+0x14c>
     56e:	e14d      	b.n	80c <tcc_init+0x3e8>
			return STATUS_ERR_INVALID_ARG;
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     570:	060d      	lsls	r5, r1, #24
     572:	27f0      	movs	r7, #240	; 0xf0
     574:	053f      	lsls	r7, r7, #20
     576:	403d      	ands	r5, r7
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
     578:	785c      	ldrb	r4, [r3, #1]
     57a:	0424      	lsls	r4, r4, #16
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
     57c:	789f      	ldrb	r7, [r3, #2]
     57e:	1e79      	subs	r1, r7, #1
     580:	418f      	sbcs	r7, r1
     582:	01ff      	lsls	r7, r7, #7
     584:	9701      	str	r7, [sp, #4]
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
     586:	78d9      	ldrb	r1, [r3, #3]
     588:	1e4e      	subs	r6, r1, #1
     58a:	41b1      	sbcs	r1, r6
     58c:	00c9      	lsls	r1, r1, #3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
     58e:	791e      	ldrb	r6, [r3, #4]
     590:	1e77      	subs	r7, r6, #1
     592:	41be      	sbcs	r6, r7
     594:	0136      	lsls	r6, r6, #4
				| TCC_FCTRLA_SRC(cfg->source)
				| TCC_FCTRLA_BLANK(cfg->blanking)
				| TCC_FCTRLA_HALT(cfg->halt_action)
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
     596:	0292      	lsls	r2, r2, #10
     598:	27c0      	movs	r7, #192	; 0xc0
     59a:	013f      	lsls	r7, r7, #4
     59c:	403a      	ands	r2, r7
		}
		if (cfg->filter_value > 0xF) {
			return STATUS_ERR_INVALID_ARG;
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
     59e:	4315      	orrs	r5, r2
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
				| TCC_FCTRLA_SRC(cfg->source)
     5a0:	795a      	ldrb	r2, [r3, #5]
     5a2:	2703      	movs	r7, #3
     5a4:	403a      	ands	r2, r7
		if (cfg->filter_value > 0xF) {
			return STATUS_ERR_INVALID_ARG;
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
     5a6:	4315      	orrs	r5, r2
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
     5a8:	432c      	orrs	r4, r5
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
				| TCC_FCTRLA_SRC(cfg->source)
				| TCC_FCTRLA_BLANK(cfg->blanking)
     5aa:	799a      	ldrb	r2, [r3, #6]
     5ac:	0152      	lsls	r2, r2, #5
     5ae:	2560      	movs	r5, #96	; 0x60
     5b0:	402a      	ands	r2, r5
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
     5b2:	4314      	orrs	r4, r2
				| TCC_FCTRLA_SRC(cfg->source)
				| TCC_FCTRLA_BLANK(cfg->blanking)
				| TCC_FCTRLA_HALT(cfg->halt_action)
     5b4:	79da      	ldrb	r2, [r3, #7]
     5b6:	0212      	lsls	r2, r2, #8
     5b8:	27c0      	movs	r7, #192	; 0xc0
     5ba:	00bf      	lsls	r7, r7, #2
     5bc:	403a      	ands	r2, r7
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
				| TCC_FCTRLA_SRC(cfg->source)
     5be:	4314      	orrs	r4, r2
				| TCC_FCTRLA_BLANK(cfg->blanking)
				| TCC_FCTRLA_HALT(cfg->halt_action)
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
     5c0:	7a1a      	ldrb	r2, [r3, #8]
     5c2:	0312      	lsls	r2, r2, #12
     5c4:	23e0      	movs	r3, #224	; 0xe0
     5c6:	01db      	lsls	r3, r3, #7
     5c8:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
				| TCC_FCTRLA_SRC(cfg->source)
				| TCC_FCTRLA_BLANK(cfg->blanking)
     5ca:	4322      	orrs	r2, r4
				| TCC_FCTRLA_HALT(cfg->halt_action)
     5cc:	9f01      	ldr	r7, [sp, #4]
     5ce:	4317      	orrs	r7, r2
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
     5d0:	4339      	orrs	r1, r7
			return STATUS_ERR_INVALID_ARG;
		}
		if (cfg->filter_value > 0xF) {
			return STATUS_ERR_INVALID_ARG;
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
     5d2:	430e      	orrs	r6, r1
				| TCC_FCTRLA_SRC(cfg->source)
				| TCC_FCTRLA_BLANK(cfg->blanking)
				| TCC_FCTRLA_HALT(cfg->halt_action)
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
		value_buffer[i] = fault;
     5d4:	6006      	str	r6, [r0, #0]
{
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
     5d6:	9c02      	ldr	r4, [sp, #8]
     5d8:	42a0      	cmp	r0, r4
     5da:	d1bb      	bne.n	554 <tcc_init+0x130>
     5dc:	4667      	mov	r7, ip
     5de:	464c      	mov	r4, r9
     5e0:	4656      	mov	r6, sl
     5e2:	465d      	mov	r5, fp
     5e4:	9809      	ldr	r0, [sp, #36]	; 0x24
     5e6:	4683      	mov	fp, r0
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
     5e8:	4b73      	ldr	r3, [pc, #460]	; (7b8 <tcc_init+0x394>)
     5ea:	5d58      	ldrb	r0, [r3, r5]
     5ec:	4652      	mov	r2, sl
     5ee:	3241      	adds	r2, #65	; 0x41
	uint32_t drvctrl;

	drvctrl = 0;
     5f0:	2100      	movs	r1, #0
     5f2:	4689      	mov	r9, r1

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
     5f4:	2300      	movs	r3, #0
		if (config->wave_ext.invert[i]) {
			if (i >= ow_num) {
				return STATUS_ERR_INVALID_ARG;
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
     5f6:	2180      	movs	r1, #128	; 0x80
     5f8:	0249      	lsls	r1, r1, #9
     5fa:	468c      	mov	ip, r1
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
     5fc:	2101      	movs	r1, #1
     5fe:	468a      	mov	sl, r1
     600:	1c21      	adds	r1, r4, #0
     602:	1c04      	adds	r4, r0, #0
     604:	4648      	mov	r0, r9
     606:	4689      	mov	r9, r1
     608:	18f1      	adds	r1, r6, r3
     60a:	3150      	adds	r1, #80	; 0x50
	uint32_t drvctrl;

	drvctrl = 0;

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
		if (config->wave_ext.invert[i]) {
     60c:	7809      	ldrb	r1, [r1, #0]
     60e:	2900      	cmp	r1, #0
     610:	d005      	beq.n	61e <tcc_init+0x1fa>
			if (i >= ow_num) {
     612:	429c      	cmp	r4, r3
     614:	d800      	bhi.n	618 <tcc_init+0x1f4>
     616:	e0ef      	b.n	7f8 <tcc_init+0x3d4>
				return STATUS_ERR_INVALID_ARG;
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
     618:	4661      	mov	r1, ip
     61a:	4099      	lsls	r1, r3
     61c:	4308      	orrs	r0, r1
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
     61e:	7811      	ldrb	r1, [r2, #0]
     620:	2900      	cmp	r1, #0
     622:	d00c      	beq.n	63e <tcc_init+0x21a>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
     624:	429c      	cmp	r4, r3
     626:	d800      	bhi.n	62a <tcc_init+0x206>
     628:	e0e8      	b.n	7fc <tcc_init+0x3d8>
				return STATUS_ERR_INVALID_ARG;
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
     62a:	2902      	cmp	r1, #2
     62c:	d104      	bne.n	638 <tcc_init+0x214>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
     62e:	2102      	movs	r1, #2
     630:	31ff      	adds	r1, #255	; 0xff
     632:	4099      	lsls	r1, r3
     634:	4308      	orrs	r0, r1
     636:	e002      	b.n	63e <tcc_init+0x21a>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
     638:	4651      	mov	r1, sl
     63a:	4099      	lsls	r1, r3
     63c:	4308      	orrs	r0, r1
	uint8_t ow_num = _tcc_ow_nums[module_index];
	uint32_t drvctrl;

	drvctrl = 0;

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
     63e:	3301      	adds	r3, #1
     640:	3202      	adds	r2, #2
     642:	2b08      	cmp	r3, #8
     644:	d1e0      	bne.n	608 <tcc_init+0x1e4>
     646:	464c      	mov	r4, r9
     648:	4681      	mov	r9, r0
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
     64a:	4b5c      	ldr	r3, [pc, #368]	; (7bc <tcc_init+0x398>)
     64c:	5d5b      	ldrb	r3, [r3, r5]
     64e:	9304      	str	r3, [sp, #16]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
     650:	7e73      	ldrb	r3, [r6, #25]
     652:	011b      	lsls	r3, r3, #4
     654:	2230      	movs	r2, #48	; 0x30
     656:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
     658:	7e33      	ldrb	r3, [r6, #24]
     65a:	2107      	movs	r1, #7
     65c:	400b      	ands	r3, r1
	uint8_t cc_num = _tcc_cc_nums[module_index];
	struct tcc_match_wave_config const *wav_cfg = &config->compare;

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
     65e:	431a      	orrs	r2, r3
     660:	9203      	str	r2, [sp, #12]
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
     662:	2300      	movs	r3, #0
     664:	1c31      	adds	r1, r6, #0
     666:	3110      	adds	r1, #16
		if (wav_cfg->wave_polarity[n]) {
			if (n >= cc_num) {
				return STATUS_ERR_INVALID_ARG;
			}
			wave |= (TCC_WAVE_POL0 << n);
     668:	2080      	movs	r0, #128	; 0x80
     66a:	0240      	lsls	r0, r0, #9
     66c:	4684      	mov	ip, r0
     66e:	18ca      	adds	r2, r1, r3

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
		if (wav_cfg->wave_polarity[n]) {
     670:	7912      	ldrb	r2, [r2, #4]
     672:	2a00      	cmp	r2, #0
     674:	d008      	beq.n	688 <tcc_init+0x264>
			if (n >= cc_num) {
     676:	9a04      	ldr	r2, [sp, #16]
     678:	429a      	cmp	r2, r3
     67a:	dc00      	bgt.n	67e <tcc_init+0x25a>
     67c:	e0c0      	b.n	800 <tcc_init+0x3dc>
				return STATUS_ERR_INVALID_ARG;
			}
			wave |= (TCC_WAVE_POL0 << n);
     67e:	4662      	mov	r2, ip
     680:	409a      	lsls	r2, r3
     682:	9803      	ldr	r0, [sp, #12]
     684:	4310      	orrs	r0, r2
     686:	9003      	str	r0, [sp, #12]
	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
     688:	3301      	adds	r3, #1
     68a:	2b04      	cmp	r3, #4
     68c:	d1ef      	bne.n	66e <tcc_init+0x24a>
     68e:	2300      	movs	r3, #0

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		module_inst->callback[i] = NULL;
     690:	1c19      	adds	r1, r3, #0
     692:	4640      	mov	r0, r8
     694:	18c2      	adds	r2, r0, r3
     696:	6051      	str	r1, [r2, #4]
     698:	3304      	adds	r3, #4
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     69a:	2b30      	cmp	r3, #48	; 0x30
     69c:	d1fa      	bne.n	694 <tcc_init+0x270>
		module_inst->callback[i] = NULL;
	}
	module_inst->register_callback_mask = 0;
     69e:	2300      	movs	r3, #0
     6a0:	6343      	str	r3, [r0, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
     6a2:	6383      	str	r3, [r0, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
     6a4:	00aa      	lsls	r2, r5, #2
     6a6:	4b46      	ldr	r3, [pc, #280]	; (7c0 <tcc_init+0x39c>)
     6a8:	50d0      	str	r0, [r2, r3]
#endif

	module_inst->hw = hw;
     6aa:	6004      	str	r4, [r0, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
     6ac:	23a0      	movs	r3, #160	; 0xa0
     6ae:	5cf2      	ldrb	r2, [r6, r3]
     6b0:	233c      	movs	r3, #60	; 0x3c
     6b2:	54c2      	strb	r2, [r0, r3]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
	gclk_chan_config.source_generator = config->counter.clock_source;
     6b4:	a90b      	add	r1, sp, #44	; 0x2c
     6b6:	7ab3      	ldrb	r3, [r6, #10]
     6b8:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
     6ba:	4b42      	ldr	r3, [pc, #264]	; (7c4 <tcc_init+0x3a0>)
     6bc:	5d5b      	ldrb	r3, [r3, r5]
     6be:	4698      	mov	r8, r3
     6c0:	1c18      	adds	r0, r3, #0
     6c2:	4b41      	ldr	r3, [pc, #260]	; (7c8 <tcc_init+0x3a4>)
     6c4:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
     6c6:	4640      	mov	r0, r8
     6c8:	4b40      	ldr	r3, [pc, #256]	; (7cc <tcc_init+0x3a8>)
     6ca:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
     6cc:	4b3a      	ldr	r3, [pc, #232]	; (7b8 <tcc_init+0x394>)
     6ce:	5d5b      	ldrb	r3, [r3, r5]
     6d0:	2b00      	cmp	r3, #0
     6d2:	dd27      	ble.n	724 <tcc_init+0x300>
     6d4:	2178      	movs	r1, #120	; 0x78
     6d6:	1989      	adds	r1, r1, r6
     6d8:	2500      	movs	r5, #0
     6da:	4a37      	ldr	r2, [pc, #220]	; (7b8 <tcc_init+0x394>)
     6dc:	4692      	mov	sl, r2
     6de:	1c23      	adds	r3, r4, #0
     6e0:	1c0c      	adds	r4, r1, #0
     6e2:	4698      	mov	r8, r3
     6e4:	1973      	adds	r3, r6, r5
     6e6:	3398      	adds	r3, #152	; 0x98
		if (!config->pins.enable_wave_out_pin[i]) {
     6e8:	781b      	ldrb	r3, [r3, #0]
     6ea:	2b00      	cmp	r3, #0
     6ec:	d013      	beq.n	716 <tcc_init+0x2f2>
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     6ee:	2301      	movs	r3, #1
     6f0:	202a      	movs	r0, #42	; 0x2a
     6f2:	4468      	add	r0, sp
     6f4:	7003      	strb	r3, [r0, #0]
	config->powersave    = false;
     6f6:	2200      	movs	r2, #0
     6f8:	212b      	movs	r1, #43	; 0x2b
     6fa:	4469      	add	r1, sp
     6fc:	700a      	strb	r2, [r1, #0]
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
     6fe:	6820      	ldr	r0, [r4, #0]
     700:	aa0a      	add	r2, sp, #40	; 0x28
     702:	7010      	strb	r0, [r2, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     704:	2129      	movs	r1, #41	; 0x29
     706:	4469      	add	r1, sp
     708:	700b      	strb	r3, [r1, #0]
     70a:	1c23      	adds	r3, r4, #0
     70c:	3b20      	subs	r3, #32
		system_pinmux_pin_set_config(
     70e:	7818      	ldrb	r0, [r3, #0]
     710:	1c11      	adds	r1, r2, #0
     712:	4a2f      	ldr	r2, [pc, #188]	; (7d0 <tcc_init+0x3ac>)
     714:	4790      	blx	r2
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
     716:	3501      	adds	r5, #1
     718:	3404      	adds	r4, #4
     71a:	4650      	mov	r0, sl
     71c:	5dc3      	ldrb	r3, [r0, r7]
     71e:	42ab      	cmp	r3, r5
     720:	dce0      	bgt.n	6e4 <tcc_init+0x2c0>
     722:	4644      	mov	r4, r8

	if (config->run_in_standby) {
		ctrla |= TCC_CTRLA_RUNSTDBY;
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
     724:	9d08      	ldr	r5, [sp, #32]
     726:	022a      	lsls	r2, r5, #8
	}

	if (config->run_in_standby) {
		ctrla |= TCC_CTRLA_RUNSTDBY;
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
     728:	9f07      	ldr	r7, [sp, #28]
     72a:	033b      	lsls	r3, r7, #12
     72c:	4313      	orrs	r3, r2
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
     72e:	4658      	mov	r0, fp
     730:	4303      	orrs	r3, r0
				config->pins.wave_out_pin[i], &pin_config);
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
     732:	6023      	str	r3, [r4, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     734:	2204      	movs	r2, #4
     736:	68a3      	ldr	r3, [r4, #8]
     738:	421a      	tst	r2, r3
     73a:	d1fc      	bne.n	736 <tcc_init+0x312>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
     73c:	23ff      	movs	r3, #255	; 0xff
     73e:	7123      	strb	r3, [r4, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
     740:	2204      	movs	r2, #4
     742:	68a3      	ldr	r3, [r4, #8]
     744:	421a      	tst	r2, r3
     746:	d1fc      	bne.n	742 <tcc_init+0x31e>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
     748:	9d05      	ldr	r5, [sp, #20]
     74a:	7165      	strb	r5, [r4, #5]

	hw->FCTRLA.reg = faults[0];
     74c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
     74e:	60e7      	str	r7, [r4, #12]
	hw->FCTRLB.reg = faults[1];
     750:	980d      	ldr	r0, [sp, #52]	; 0x34
     752:	6120      	str	r0, [r4, #16]

	hw->DRVCTRL.reg = drvctrl;
     754:	4649      	mov	r1, r9
     756:	61a1      	str	r1, [r4, #24]

#if (!SAML21)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
     758:	4a1e      	ldr	r2, [pc, #120]	; (7d4 <tcc_init+0x3b0>)
     75a:	68a3      	ldr	r3, [r4, #8]
     75c:	4213      	tst	r3, r2
     75e:	d1fc      	bne.n	75a <tcc_init+0x336>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
     760:	9d03      	ldr	r5, [sp, #12]
     762:	63e5      	str	r5, [r4, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
     764:	2210      	movs	r2, #16
     766:	68a3      	ldr	r3, [r4, #8]
     768:	421a      	tst	r2, r3
     76a:	d1fc      	bne.n	766 <tcc_init+0x342>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
     76c:	6837      	ldr	r7, [r6, #0]
     76e:	6367      	str	r7, [r4, #52]	; 0x34

#if (!SAML21)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
     770:	4a19      	ldr	r2, [pc, #100]	; (7d8 <tcc_init+0x3b4>)
     772:	68a3      	ldr	r3, [r4, #8]
     774:	4213      	tst	r3, r2
     776:	d1fc      	bne.n	772 <tcc_init+0x34e>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
     778:	6870      	ldr	r0, [r6, #4]
     77a:	6420      	str	r0, [r4, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
     77c:	9804      	ldr	r0, [sp, #16]
     77e:	2800      	cmp	r0, #0
     780:	dd40      	ble.n	804 <tcc_init+0x3e0>
     782:	361c      	adds	r6, #28
     784:	2100      	movs	r1, #0
#if (!SAML21)
		while (hw->SYNCBUSY.reg & (
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
     786:	4d15      	ldr	r5, [pc, #84]	; (7dc <tcc_init+0x3b8>)
     788:	1c2a      	adds	r2, r5, #0
     78a:	408a      	lsls	r2, r1
#endif
	hw->PER.reg = (config->counter.period);

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
#if (!SAML21)
		while (hw->SYNCBUSY.reg & (
     78c:	68a3      	ldr	r3, [r4, #8]
     78e:	4213      	tst	r3, r2
     790:	d1fc      	bne.n	78c <tcc_init+0x368>
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
     792:	ce04      	ldmia	r6!, {r2}
     794:	1c0b      	adds	r3, r1, #0
     796:	3310      	adds	r3, #16
     798:	009b      	lsls	r3, r3, #2
     79a:	18e3      	adds	r3, r4, r3
     79c:	605a      	str	r2, [r3, #4]
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
     79e:	3101      	adds	r1, #1
     7a0:	4288      	cmp	r0, r1
     7a2:	dcf1      	bgt.n	788 <tcc_init+0x364>
     7a4:	e030      	b.n	808 <tcc_init+0x3e4>
     7a6:	46c0      	nop			; (mov r8, r8)
     7a8:	00000239 	.word	0x00000239
     7ac:	40000400 	.word	0x40000400
     7b0:	00003ee4 	.word	0x00003ee4
     7b4:	00003ef0 	.word	0x00003ef0
     7b8:	00003f00 	.word	0x00003f00
     7bc:	00003efc 	.word	0x00003efc
     7c0:	2000011c 	.word	0x2000011c
     7c4:	00003ee0 	.word	0x00003ee0
     7c8:	00001e15 	.word	0x00001e15
     7cc:	00001d89 	.word	0x00001d89
     7d0:	00001ef1 	.word	0x00001ef1
     7d4:	00020040 	.word	0x00020040
     7d8:	00040080 	.word	0x00040080
     7dc:	00080100 	.word	0x00080100

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
		if ((config->compare.match[i] > count_max)
			) {
			return STATUS_ERR_INVALID_ARG;
     7e0:	2017      	movs	r0, #23
     7e2:	e014      	b.n	80e <tcc_init+0x3ea>
     7e4:	2017      	movs	r0, #23
     7e6:	e012      	b.n	80e <tcc_init+0x3ea>
     7e8:	2017      	movs	r0, #23
     7ea:	e010      	b.n	80e <tcc_init+0x3ea>
     7ec:	2017      	movs	r0, #23
     7ee:	e00e      	b.n	80e <tcc_init+0x3ea>
		if (!config->pins.enable_wave_out_pin[i]) {
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
			return STATUS_ERR_INVALID_ARG;
     7f0:	2017      	movs	r0, #23
     7f2:	e00c      	b.n	80e <tcc_init+0x3ea>
		if (config->capture.channel_function[i] ==
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
     7f4:	2017      	movs	r0, #23
     7f6:	e00a      	b.n	80e <tcc_init+0x3ea>

	drvctrl = 0;

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
		if (config->wave_ext.invert[i]) {
			if (i >= ow_num) {
     7f8:	2017      	movs	r0, #23
     7fa:	e008      	b.n	80e <tcc_init+0x3ea>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
     7fc:	2017      	movs	r0, #23
     7fe:	e006      	b.n	80e <tcc_init+0x3ea>
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
		if (wav_cfg->wave_polarity[n]) {
			if (n >= cc_num) {
				return STATUS_ERR_INVALID_ARG;
     800:	2017      	movs	r0, #23
     802:	e004      	b.n	80e <tcc_init+0x3ea>
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
     804:	2000      	movs	r0, #0
     806:	e002      	b.n	80e <tcc_init+0x3ea>
     808:	2000      	movs	r0, #0
     80a:	e000      	b.n	80e <tcc_init+0x3ea>
		if (config->capture.channel_function[i] ==
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
     80c:	2017      	movs	r0, #23
#endif
		hw->CC[i].reg = (config->compare.match[i]);
	}

	return STATUS_OK;
}
     80e:	b00f      	add	sp, #60	; 0x3c
     810:	bc3c      	pop	{r2, r3, r4, r5}
     812:	4690      	mov	r8, r2
     814:	4699      	mov	r9, r3
     816:	46a2      	mov	sl, r4
     818:	46ab      	mov	fp, r5
     81a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000081c <tcc_set_compare_value>:
 */
enum status_code tcc_set_compare_value(
		const struct tcc_module *const module_inst,
		const enum tcc_match_capture_channel channel_index,
		const uint32_t compare)
{
     81c:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module_inst);

	return _tcc_set_compare_value(module_inst, channel_index, compare,
     81e:	233c      	movs	r3, #60	; 0x3c
     820:	5cc3      	ldrb	r3, [r0, r3]
     822:	4c01      	ldr	r4, [pc, #4]	; (828 <tcc_set_compare_value+0xc>)
     824:	47a0      	blx	r4
			module_inst->double_buffering_enabled);
}
     826:	bd10      	pop	{r4, pc}
     828:	00000269 	.word	0x00000269

0000082c <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler.
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
     82c:	b5f0      	push	{r4, r5, r6, r7, lr}
     82e:	4647      	mov	r7, r8
     830:	b480      	push	{r7}
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
     832:	0080      	lsls	r0, r0, #2
     834:	4b0d      	ldr	r3, [pc, #52]	; (86c <_tcc_interrupt_handler+0x40>)
     836:	58c6      	ldr	r6, [r0, r3]
			(struct tcc_module *)_tcc_instances[module_index];

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
     838:	6833      	ldr	r3, [r6, #0]
     83a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     83c:	6b72      	ldr	r2, [r6, #52]	; 0x34
     83e:	4013      	ands	r3, r2
     840:	6bb2      	ldr	r2, [r6, #56]	; 0x38
     842:	401a      	ands	r2, r3
     844:	4690      	mov	r8, r2
     846:	2400      	movs	r4, #0
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
     848:	4f09      	ldr	r7, [pc, #36]	; (870 <_tcc_interrupt_handler+0x44>)
     84a:	59e5      	ldr	r5, [r4, r7]
     84c:	4643      	mov	r3, r8
     84e:	422b      	tst	r3, r5
     850:	d005      	beq.n	85e <_tcc_interrupt_handler+0x32>
     852:	1933      	adds	r3, r6, r4
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
     854:	685b      	ldr	r3, [r3, #4]
     856:	1c30      	adds	r0, r6, #0
     858:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
     85a:	6833      	ldr	r3, [r6, #0]
     85c:	62dd      	str	r5, [r3, #44]	; 0x2c
     85e:	3404      	adds	r4, #4
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
			module->register_callback_mask &
			module->enable_callback_mask);

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
     860:	2c30      	cmp	r4, #48	; 0x30
     862:	d1f2      	bne.n	84a <_tcc_interrupt_handler+0x1e>
			(module->callback[i])(module);
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
		}
	}
}
     864:	bc04      	pop	{r2}
     866:	4690      	mov	r8, r2
     868:	bdf0      	pop	{r4, r5, r6, r7, pc}
     86a:	46c0      	nop			; (mov r8, r8)
     86c:	2000011c 	.word	0x2000011c
     870:	00003f04 	.word	0x00003f04

00000874 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
     874:	b508      	push	{r3, lr}
     876:	2000      	movs	r0, #0
     878:	4b01      	ldr	r3, [pc, #4]	; (880 <TCC0_Handler+0xc>)
     87a:	4798      	blx	r3
     87c:	bd08      	pop	{r3, pc}
     87e:	46c0      	nop			; (mov r8, r8)
     880:	0000082d 	.word	0x0000082d

00000884 <TCC1_Handler>:
     884:	b508      	push	{r3, lr}
     886:	2001      	movs	r0, #1
     888:	4b01      	ldr	r3, [pc, #4]	; (890 <TCC1_Handler+0xc>)
     88a:	4798      	blx	r3
     88c:	bd08      	pop	{r3, pc}
     88e:	46c0      	nop			; (mov r8, r8)
     890:	0000082d 	.word	0x0000082d

00000894 <TCC2_Handler>:
     894:	b508      	push	{r3, lr}
     896:	2002      	movs	r0, #2
     898:	4b01      	ldr	r3, [pc, #4]	; (8a0 <TCC2_Handler+0xc>)
     89a:	4798      	blx	r3
     89c:	bd08      	pop	{r3, pc}
     89e:	46c0      	nop			; (mov r8, r8)
     8a0:	0000082d 	.word	0x0000082d

000008a4 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     8a4:	b510      	push	{r4, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     8a6:	2000      	movs	r0, #0
     8a8:	4b08      	ldr	r3, [pc, #32]	; (8cc <delay_init+0x28>)
     8aa:	4798      	blx	r3
	cycles_per_ms /= 1000;
     8ac:	4c08      	ldr	r4, [pc, #32]	; (8d0 <delay_init+0x2c>)
     8ae:	21fa      	movs	r1, #250	; 0xfa
     8b0:	0089      	lsls	r1, r1, #2
     8b2:	47a0      	blx	r4
     8b4:	4b07      	ldr	r3, [pc, #28]	; (8d4 <delay_init+0x30>)
     8b6:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     8b8:	21fa      	movs	r1, #250	; 0xfa
     8ba:	0089      	lsls	r1, r1, #2
     8bc:	47a0      	blx	r4
     8be:	4b06      	ldr	r3, [pc, #24]	; (8d8 <delay_init+0x34>)
     8c0:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     8c2:	2205      	movs	r2, #5
     8c4:	4b05      	ldr	r3, [pc, #20]	; (8dc <delay_init+0x38>)
     8c6:	601a      	str	r2, [r3, #0]
}
     8c8:	bd10      	pop	{r4, pc}
     8ca:	46c0      	nop			; (mov r8, r8)
     8cc:	00001cfd 	.word	0x00001cfd
     8d0:	00002319 	.word	0x00002319
     8d4:	20000008 	.word	0x20000008
     8d8:	20000004 	.word	0x20000004
     8dc:	e000e010 	.word	0xe000e010

000008e0 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     8e0:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     8e2:	4b08      	ldr	r3, [pc, #32]	; (904 <delay_cycles_ms+0x24>)
     8e4:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     8e6:	4a08      	ldr	r2, [pc, #32]	; (908 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     8e8:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     8ea:	2180      	movs	r1, #128	; 0x80
     8ec:	0249      	lsls	r1, r1, #9
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
	while (n--) {
     8ee:	e006      	b.n	8fe <delay_cycles_ms+0x1e>
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
     8f0:	2c00      	cmp	r4, #0
     8f2:	d004      	beq.n	8fe <delay_cycles_ms+0x1e>
		SysTick->LOAD = n;
     8f4:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     8f6:	6095      	str	r5, [r2, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     8f8:	6813      	ldr	r3, [r2, #0]
     8fa:	420b      	tst	r3, r1
     8fc:	d0fc      	beq.n	8f8 <delay_cycles_ms+0x18>
     8fe:	3801      	subs	r0, #1
     900:	d2f6      	bcs.n	8f0 <delay_cycles_ms+0x10>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
}
     902:	bd30      	pop	{r4, r5, pc}
     904:	20000008 	.word	0x20000008
     908:	e000e010 	.word	0xe000e010

0000090c <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     90c:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     90e:	2200      	movs	r2, #0
     910:	2300      	movs	r3, #0
     912:	7002      	strb	r2, [r0, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
     914:	7042      	strb	r2, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
     916:	2100      	movs	r1, #0
     918:	8042      	strh	r2, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     91a:	7101      	strb	r1, [r0, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     91c:	7603      	strb	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     91e:	6202      	str	r2, [r0, #32]
	config->window.window_lower_value     = 0;
     920:	61c2      	str	r2, [r0, #28]
	config->gain_factor                   = ADC_GAIN_FACTOR_1X;
     922:	6082      	str	r2, [r0, #8]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
     924:	7303      	strb	r3, [r0, #12]
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
     926:	24c0      	movs	r4, #192	; 0xc0
     928:	0164      	lsls	r4, r4, #5
     92a:	81c4      	strh	r4, [r0, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     92c:	7403      	strb	r3, [r0, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     92e:	7443      	strb	r3, [r0, #17]
	config->left_adjust                   = false;
     930:	7483      	strb	r3, [r0, #18]
	config->differential_mode             = false;
     932:	74c3      	strb	r3, [r0, #19]
	config->freerunning                   = false;
     934:	7503      	strb	r3, [r0, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     936:	242a      	movs	r4, #42	; 0x2a
     938:	5503      	strb	r3, [r0, r4]
	config->run_in_standby                = false;
     93a:	7543      	strb	r3, [r0, #21]
	config->reference_compensation_enable = false;
     93c:	7583      	strb	r3, [r0, #22]
	config->correction.correction_enable  = false;
     93e:	2424      	movs	r4, #36	; 0x24
     940:	5503      	strb	r3, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     942:	84c2      	strh	r2, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     944:	8502      	strh	r2, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     946:	75c1      	strb	r1, [r0, #23]
	config->pin_scan.offset_start_scan    = 0;
     948:	232b      	movs	r3, #43	; 0x2b
     94a:	54c1      	strb	r1, [r0, r3]
	config->pin_scan.inputs_to_scan       = 0;
     94c:	232c      	movs	r3, #44	; 0x2c
     94e:	54c1      	strb	r1, [r0, r3]
}
     950:	bd10      	pop	{r4, pc}
     952:	46c0      	nop			; (mov r8, r8)

00000954 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     954:	b5f0      	push	{r4, r5, r6, r7, lr}
     956:	465f      	mov	r7, fp
     958:	4656      	mov	r6, sl
     95a:	464d      	mov	r5, r9
     95c:	4644      	mov	r4, r8
     95e:	b4f0      	push	{r4, r5, r6, r7}
     960:	b099      	sub	sp, #100	; 0x64
     962:	1c06      	adds	r6, r0, #0
     964:	1c14      	adds	r4, r2, #0
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     966:	6001      	str	r1, [r0, #0]
     968:	4bba      	ldr	r3, [pc, #744]	; (c54 <adc_init+0x300>)
     96a:	6a18      	ldr	r0, [r3, #32]
     96c:	2280      	movs	r2, #128	; 0x80
     96e:	0252      	lsls	r2, r2, #9
     970:	4302      	orrs	r2, r0
     972:	621a      	str	r2, [r3, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     974:	780b      	ldrb	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     976:	2005      	movs	r0, #5
	module_inst->hw = hw;

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     978:	07da      	lsls	r2, r3, #31
     97a:	d500      	bpl.n	97e <adc_init+0x2a>
     97c:	e1f4      	b.n	d68 <adc_init+0x414>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     97e:	780b      	ldrb	r3, [r1, #0]
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
     980:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     982:	0799      	lsls	r1, r3, #30
     984:	d500      	bpl.n	988 <adc_init+0x34>
     986:	e1ef      	b.n	d68 <adc_init+0x414>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
     988:	7863      	ldrb	r3, [r4, #1]
     98a:	7133      	strb	r3, [r6, #4]

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
     98c:	2b00      	cmp	r3, #0
     98e:	d000      	beq.n	992 <adc_init+0x3e>
     990:	e1da      	b.n	d48 <adc_init+0x3f4>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
     992:	4bb1      	ldr	r3, [pc, #708]	; (c58 <adc_init+0x304>)
     994:	6c19      	ldr	r1, [r3, #64]	; 0x40
     996:	2204      	movs	r2, #4
     998:	430a      	orrs	r2, r1
     99a:	641a      	str	r2, [r3, #64]	; 0x40
     99c:	e1d4      	b.n	d48 <adc_init+0x3f4>
	module_inst->remaining_conversions = 0;
	module_inst->job_status = STATUS_OK;

	_adc_instances[0] = module_inst;

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     99e:	7d23      	ldrb	r3, [r4, #20]
     9a0:	2b00      	cmp	r3, #0
     9a2:	d102      	bne.n	9aa <adc_init+0x56>
			!config->freerunning) {
		module_inst->software_trigger = true;
     9a4:	2301      	movs	r3, #1
     9a6:	7773      	strb	r3, [r6, #29]
     9a8:	e001      	b.n	9ae <adc_init+0x5a>
	} else {
		module_inst->software_trigger = false;
     9aa:	2300      	movs	r3, #0
     9ac:	7773      	strb	r3, [r6, #29]
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_DIE_Msk) >> DSU_DID_DIE_Pos);
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
     9ae:	6832      	ldr	r2, [r6, #0]
     9b0:	9201      	str	r2, [sp, #4]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->clock_source;
     9b2:	7823      	ldrb	r3, [r4, #0]
     9b4:	4668      	mov	r0, sp
     9b6:	7203      	strb	r3, [r0, #8]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     9b8:	201e      	movs	r0, #30
     9ba:	a902      	add	r1, sp, #8
     9bc:	4ba7      	ldr	r3, [pc, #668]	; (c5c <adc_init+0x308>)
     9be:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     9c0:	201e      	movs	r0, #30
     9c2:	4ba7      	ldr	r3, [pc, #668]	; (c60 <adc_init+0x30c>)
     9c4:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
     9c6:	232c      	movs	r3, #44	; 0x2c
     9c8:	5ce3      	ldrb	r3, [r4, r3]
     9ca:	2b00      	cmp	r3, #0
     9cc:	d042      	beq.n	a54 <adc_init+0x100>
		uint8_t offset = config->pin_scan.offset_start_scan;
     9ce:	222b      	movs	r2, #43	; 0x2b
     9d0:	5ca5      	ldrb	r5, [r4, r2]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
     9d2:	7b21      	ldrb	r1, [r4, #12]
     9d4:	4688      	mov	r8, r1
	system_gclk_chan_enable(ADC_GCLK_ID);

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
		uint8_t offset = config->pin_scan.offset_start_scan;
		uint8_t start_pin =
     9d6:	194a      	adds	r2, r1, r5
     9d8:	b2d2      	uxtb	r2, r2
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
     9da:	18d3      	adds	r3, r2, r3
     9dc:	b2db      	uxtb	r3, r3
     9de:	4699      	mov	r9, r3
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
     9e0:	429a      	cmp	r2, r3
     9e2:	d221      	bcs.n	a28 <adc_init+0xd4>
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     9e4:	4a9f      	ldr	r2, [pc, #636]	; (c64 <adc_init+0x310>)
     9e6:	4693      	mov	fp, r2
     9e8:	4b9f      	ldr	r3, [pc, #636]	; (c68 <adc_init+0x314>)
     9ea:	469a      	mov	sl, r3
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     9ec:	270f      	movs	r7, #15
     9ee:	402f      	ands	r7, r5
     9f0:	7b23      	ldrb	r3, [r4, #12]
     9f2:	18ff      	adds	r7, r7, r3
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     9f4:	a804      	add	r0, sp, #16
     9f6:	4659      	mov	r1, fp
     9f8:	2250      	movs	r2, #80	; 0x50
     9fa:	47d0      	blx	sl
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= ADC_EXTCHANNEL_MSB) {
     9fc:	2f13      	cmp	r7, #19
     9fe:	d80c      	bhi.n	a1a <adc_init+0xc6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     a00:	00bf      	lsls	r7, r7, #2
     a02:	ab04      	add	r3, sp, #16
     a04:	58f8      	ldr	r0, [r7, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     a06:	a903      	add	r1, sp, #12
     a08:	2300      	movs	r3, #0
     a0a:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     a0c:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     a0e:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     a10:	2301      	movs	r3, #1
     a12:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     a14:	b2c0      	uxtb	r0, r0
     a16:	4a95      	ldr	r2, [pc, #596]	; (c6c <adc_init+0x318>)
     a18:	4790      	blx	r2
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
			start_pin++;
			offset++;
     a1a:	3501      	adds	r5, #1
     a1c:	b2ed      	uxtb	r5, r5
     a1e:	4640      	mov	r0, r8
     a20:	1943      	adds	r3, r0, r5
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
     a22:	b2db      	uxtb	r3, r3
     a24:	454b      	cmp	r3, r9
     a26:	d3e1      	bcc.n	9ec <adc_init+0x98>
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
			start_pin++;
			offset++;
		}
		_adc_configure_ain_pin(config->negative_input);
     a28:	89e5      	ldrh	r5, [r4, #14]
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     a2a:	a804      	add	r0, sp, #16
     a2c:	498d      	ldr	r1, [pc, #564]	; (c64 <adc_init+0x310>)
     a2e:	2250      	movs	r2, #80	; 0x50
     a30:	4b8d      	ldr	r3, [pc, #564]	; (c68 <adc_init+0x314>)
     a32:	4798      	blx	r3
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= ADC_EXTCHANNEL_MSB) {
     a34:	2d13      	cmp	r5, #19
     a36:	d837      	bhi.n	aa8 <adc_init+0x154>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     a38:	00ad      	lsls	r5, r5, #2
     a3a:	ab04      	add	r3, sp, #16
     a3c:	58e8      	ldr	r0, [r5, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     a3e:	a903      	add	r1, sp, #12
     a40:	2300      	movs	r3, #0
     a42:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     a44:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     a46:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     a48:	2301      	movs	r3, #1
     a4a:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     a4c:	b2c0      	uxtb	r0, r0
     a4e:	4b87      	ldr	r3, [pc, #540]	; (c6c <adc_init+0x318>)
     a50:	4798      	blx	r3
     a52:	e029      	b.n	aa8 <adc_init+0x154>
			start_pin++;
			offset++;
		}
		_adc_configure_ain_pin(config->negative_input);
	} else {
		_adc_configure_ain_pin(config->positive_input);
     a54:	7b25      	ldrb	r5, [r4, #12]
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     a56:	a804      	add	r0, sp, #16
     a58:	4982      	ldr	r1, [pc, #520]	; (c64 <adc_init+0x310>)
     a5a:	2250      	movs	r2, #80	; 0x50
     a5c:	4b82      	ldr	r3, [pc, #520]	; (c68 <adc_init+0x314>)
     a5e:	4798      	blx	r3
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= ADC_EXTCHANNEL_MSB) {
     a60:	2d13      	cmp	r5, #19
     a62:	d80c      	bhi.n	a7e <adc_init+0x12a>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     a64:	00ad      	lsls	r5, r5, #2
     a66:	ab04      	add	r3, sp, #16
     a68:	58e8      	ldr	r0, [r5, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     a6a:	a903      	add	r1, sp, #12
     a6c:	2300      	movs	r3, #0
     a6e:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     a70:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     a72:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     a74:	2301      	movs	r3, #1
     a76:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     a78:	b2c0      	uxtb	r0, r0
     a7a:	4b7c      	ldr	r3, [pc, #496]	; (c6c <adc_init+0x318>)
     a7c:	4798      	blx	r3
			offset++;
		}
		_adc_configure_ain_pin(config->negative_input);
	} else {
		_adc_configure_ain_pin(config->positive_input);
		_adc_configure_ain_pin(config->negative_input);
     a7e:	89e5      	ldrh	r5, [r4, #14]
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     a80:	a804      	add	r0, sp, #16
     a82:	4978      	ldr	r1, [pc, #480]	; (c64 <adc_init+0x310>)
     a84:	2250      	movs	r2, #80	; 0x50
     a86:	4b78      	ldr	r3, [pc, #480]	; (c68 <adc_init+0x314>)
     a88:	4798      	blx	r3
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= ADC_EXTCHANNEL_MSB) {
     a8a:	2d13      	cmp	r5, #19
     a8c:	d80c      	bhi.n	aa8 <adc_init+0x154>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     a8e:	00ad      	lsls	r5, r5, #2
     a90:	ab04      	add	r3, sp, #16
     a92:	58e8      	ldr	r0, [r5, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     a94:	a903      	add	r1, sp, #12
     a96:	2300      	movs	r3, #0
     a98:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     a9a:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     a9c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     a9e:	2301      	movs	r3, #1
     aa0:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     aa2:	b2c0      	uxtb	r0, r0
     aa4:	4b71      	ldr	r3, [pc, #452]	; (c6c <adc_init+0x318>)
     aa6:	4798      	blx	r3
		_adc_configure_ain_pin(config->positive_input);
		_adc_configure_ain_pin(config->negative_input);
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     aa8:	7d63      	ldrb	r3, [r4, #21]
     aaa:	009b      	lsls	r3, r3, #2
     aac:	b2db      	uxtb	r3, r3
     aae:	9901      	ldr	r1, [sp, #4]
     ab0:	700b      	strb	r3, [r1, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     ab2:	7da3      	ldrb	r3, [r4, #22]
     ab4:	01db      	lsls	r3, r3, #7

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);

	/* Configure reference */
	adc_module->REFCTRL.reg =
     ab6:	7862      	ldrb	r2, [r4, #1]
     ab8:	4313      	orrs	r3, r2
     aba:	b2db      	uxtb	r3, r3
     abc:	704b      	strb	r3, [r1, #1]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
			(config->reference);

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
     abe:	7923      	ldrb	r3, [r4, #4]
     ac0:	2b34      	cmp	r3, #52	; 0x34
     ac2:	d900      	bls.n	ac6 <adc_init+0x172>
     ac4:	e13e      	b.n	d44 <adc_init+0x3f0>
     ac6:	009b      	lsls	r3, r3, #2
     ac8:	4a69      	ldr	r2, [pc, #420]	; (c70 <adc_init+0x31c>)
     aca:	58d3      	ldr	r3, [r2, r3]
     acc:	469f      	mov	pc, r3
		break;

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     ace:	2202      	movs	r2, #2
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     ad0:	2510      	movs	r5, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     ad2:	2301      	movs	r3, #1
     ad4:	e01a      	b.n	b0c <adc_init+0x1b8>

	/* Set adjusting result and number of samples */
	switch (config->resolution) {

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
     ad6:	7c63      	ldrb	r3, [r4, #17]
		accumulate = config->accumulate_samples;
     ad8:	7c22      	ldrb	r2, [r4, #16]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     ada:	2510      	movs	r5, #16
     adc:	e016      	b.n	b0c <adc_init+0x1b8>
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     ade:	2206      	movs	r2, #6
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     ae0:	2510      	movs	r5, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;
#else
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     ae2:	2301      	movs	r3, #1
     ae4:	e012      	b.n	b0c <adc_init+0x1b8>
		break;

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     ae6:	2208      	movs	r2, #8
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     ae8:	2510      	movs	r5, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_16BIT:
		/* Increase resolution by 4 bit */
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     aea:	2300      	movs	r3, #0
     aec:	e00e      	b.n	b0c <adc_init+0x1b8>
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     aee:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_16BIT;
		break;
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
     af0:	2530      	movs	r5, #48	; 0x30
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
     af2:	2300      	movs	r3, #0
     af4:	e00a      	b.n	b0c <adc_init+0x1b8>
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     af6:	2200      	movs	r2, #0
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
		break;
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
     af8:	2520      	movs	r5, #32
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
     afa:	2300      	movs	r3, #0
     afc:	e006      	b.n	b0c <adc_init+0x1b8>
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     afe:	2200      	movs	r2, #0
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
		break;
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
     b00:	2500      	movs	r5, #0
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
     b02:	2300      	movs	r3, #0
     b04:	e002      	b.n	b0c <adc_init+0x1b8>
		break;

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     b06:	2204      	movs	r2, #4
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     b08:	2510      	movs	r5, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
     b0a:	2302      	movs	r3, #2
	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     b0c:	011b      	lsls	r3, r3, #4
     b0e:	2170      	movs	r1, #112	; 0x70
     b10:	400b      	ands	r3, r1
     b12:	4313      	orrs	r3, r2
     b14:	9a01      	ldr	r2, [sp, #4]
     b16:	7093      	strb	r3, [r2, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
     b18:	7de3      	ldrb	r3, [r4, #23]
		return STATUS_ERR_INVALID_ARG;
     b1a:	2017      	movs	r0, #23
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
     b1c:	2b3f      	cmp	r3, #63	; 0x3f
     b1e:	d900      	bls.n	b22 <adc_init+0x1ce>
     b20:	e122      	b.n	d68 <adc_init+0x414>
		return STATUS_ERR_INVALID_ARG;
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
     b22:	70d3      	strb	r3, [r2, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     b24:	6832      	ldr	r2, [r6, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     b26:	7e53      	ldrb	r3, [r2, #25]
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
	}

	while (adc_is_syncing(module_inst)) {
     b28:	b25b      	sxtb	r3, r3
     b2a:	2b00      	cmp	r3, #0
     b2c:	dbfb      	blt.n	b26 <adc_init+0x1d2>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
     b2e:	7ce2      	ldrb	r2, [r4, #19]
     b30:	8863      	ldrh	r3, [r4, #2]
     b32:	4313      	orrs	r3, r2
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     b34:	2224      	movs	r2, #36	; 0x24
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
     b36:	5ca2      	ldrb	r2, [r4, r2]
     b38:	00d2      	lsls	r2, r2, #3
     b3a:	4313      	orrs	r3, r2
     b3c:	7d22      	ldrb	r2, [r4, #20]
     b3e:	0092      	lsls	r2, r2, #2
     b40:	4313      	orrs	r3, r2
     b42:	7ca2      	ldrb	r2, [r4, #18]
     b44:	0052      	lsls	r2, r2, #1
     b46:	4313      	orrs	r3, r2
     b48:	432b      	orrs	r3, r5
     b4a:	9801      	ldr	r0, [sp, #4]
     b4c:	8083      	strh	r3, [r0, #4]
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     b4e:	7e23      	ldrb	r3, [r4, #24]
     b50:	2b00      	cmp	r3, #0
     b52:	d101      	bne.n	b58 <adc_init+0x204>
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     b54:	6831      	ldr	r1, [r6, #0]
     b56:	e095      	b.n	c84 <adc_init+0x330>
		switch (resolution) {
     b58:	2d10      	cmp	r5, #16
     b5a:	d05b      	beq.n	c14 <adc_init+0x2c0>
     b5c:	d802      	bhi.n	b64 <adc_init+0x210>
     b5e:	2d00      	cmp	r5, #0
     b60:	d038      	beq.n	bd4 <adc_init+0x280>
     b62:	e7f7      	b.n	b54 <adc_init+0x200>
     b64:	2d20      	cmp	r5, #32
     b66:	d019      	beq.n	b9c <adc_init+0x248>
     b68:	2d30      	cmp	r5, #48	; 0x30
     b6a:	d1f3      	bne.n	b54 <adc_init+0x200>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
     b6c:	7ce2      	ldrb	r2, [r4, #19]
     b6e:	2a00      	cmp	r2, #0
     b70:	d00a      	beq.n	b88 <adc_init+0x234>
					(config->window.window_lower_value > 127 ||
     b72:	69e2      	ldr	r2, [r4, #28]
     b74:	3280      	adds	r2, #128	; 0x80
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     b76:	2017      	movs	r0, #23

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
     b78:	2aff      	cmp	r2, #255	; 0xff
     b7a:	d900      	bls.n	b7e <adc_init+0x22a>
     b7c:	e0f4      	b.n	d68 <adc_init+0x414>
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
     b7e:	6a22      	ldr	r2, [r4, #32]
     b80:	3280      	adds	r2, #128	; 0x80
     b82:	2aff      	cmp	r2, #255	; 0xff
     b84:	d900      	bls.n	b88 <adc_init+0x234>
     b86:	e0ef      	b.n	d68 <adc_init+0x414>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 255 ||
					config->window.window_upper_value > 255){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     b88:	2017      	movs	r0, #23
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 255 ||
     b8a:	69e1      	ldr	r1, [r4, #28]
     b8c:	29ff      	cmp	r1, #255	; 0xff
     b8e:	dd00      	ble.n	b92 <adc_init+0x23e>
     b90:	e0ea      	b.n	d68 <adc_init+0x414>
     b92:	6a22      	ldr	r2, [r4, #32]
     b94:	2aff      	cmp	r2, #255	; 0xff
     b96:	dd00      	ble.n	b9a <adc_init+0x246>
     b98:	e0e6      	b.n	d68 <adc_init+0x414>
     b9a:	e7db      	b.n	b54 <adc_init+0x200>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
     b9c:	7ce2      	ldrb	r2, [r4, #19]
     b9e:	2a00      	cmp	r2, #0
     ba0:	d00d      	beq.n	bbe <adc_init+0x26a>
					(config->window.window_lower_value > 511 ||
     ba2:	69e0      	ldr	r0, [r4, #28]
     ba4:	2280      	movs	r2, #128	; 0x80
     ba6:	0092      	lsls	r2, r2, #2
     ba8:	1881      	adds	r1, r0, r2
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value > -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     baa:	2017      	movs	r0, #23
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
     bac:	4a31      	ldr	r2, [pc, #196]	; (c74 <adc_init+0x320>)
     bae:	4291      	cmp	r1, r2
     bb0:	d900      	bls.n	bb4 <adc_init+0x260>
     bb2:	e0d9      	b.n	d68 <adc_init+0x414>
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
     bb4:	4a30      	ldr	r2, [pc, #192]	; (c78 <adc_init+0x324>)
     bb6:	6a21      	ldr	r1, [r4, #32]
     bb8:	4291      	cmp	r1, r2
     bba:	db00      	blt.n	bbe <adc_init+0x26a>
     bbc:	e0d4      	b.n	d68 <adc_init+0x414>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 1023 ||
					config->window.window_upper_value > 1023){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     bbe:	2017      	movs	r0, #23
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value > -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 1023 ||
     bc0:	4a2c      	ldr	r2, [pc, #176]	; (c74 <adc_init+0x320>)
     bc2:	69e1      	ldr	r1, [r4, #28]
     bc4:	4291      	cmp	r1, r2
     bc6:	dd00      	ble.n	bca <adc_init+0x276>
     bc8:	e0ce      	b.n	d68 <adc_init+0x414>
     bca:	6a21      	ldr	r1, [r4, #32]
     bcc:	4291      	cmp	r1, r2
     bce:	dd00      	ble.n	bd2 <adc_init+0x27e>
     bd0:	e0ca      	b.n	d68 <adc_init+0x414>
     bd2:	e7bf      	b.n	b54 <adc_init+0x200>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
     bd4:	7ce2      	ldrb	r2, [r4, #19]
     bd6:	2a00      	cmp	r2, #0
     bd8:	d011      	beq.n	bfe <adc_init+0x2aa>
					(config->window.window_lower_value > 2047 ||
     bda:	69e2      	ldr	r2, [r4, #28]
     bdc:	2080      	movs	r0, #128	; 0x80
     bde:	0100      	lsls	r0, r0, #4
     be0:	1811      	adds	r1, r2, r0
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     be2:	2017      	movs	r0, #23
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
     be4:	4a25      	ldr	r2, [pc, #148]	; (c7c <adc_init+0x328>)
     be6:	4291      	cmp	r1, r2
     be8:	d900      	bls.n	bec <adc_init+0x298>
     bea:	e0bd      	b.n	d68 <adc_init+0x414>
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
     bec:	6a22      	ldr	r2, [r4, #32]
     bee:	2080      	movs	r0, #128	; 0x80
     bf0:	0100      	lsls	r0, r0, #4
     bf2:	1811      	adds	r1, r2, r0
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     bf4:	2017      	movs	r0, #23
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
     bf6:	4a21      	ldr	r2, [pc, #132]	; (c7c <adc_init+0x328>)
     bf8:	4291      	cmp	r1, r2
     bfa:	d900      	bls.n	bfe <adc_init+0x2aa>
     bfc:	e0b4      	b.n	d68 <adc_init+0x414>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 4095 ||
					config->window.window_upper_value > 4095){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     bfe:	2017      	movs	r0, #23
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 4095 ||
     c00:	4a1e      	ldr	r2, [pc, #120]	; (c7c <adc_init+0x328>)
     c02:	69e1      	ldr	r1, [r4, #28]
     c04:	4291      	cmp	r1, r2
     c06:	dd00      	ble.n	c0a <adc_init+0x2b6>
     c08:	e0ae      	b.n	d68 <adc_init+0x414>
     c0a:	6a21      	ldr	r1, [r4, #32]
     c0c:	4291      	cmp	r1, r2
     c0e:	dd00      	ble.n	c12 <adc_init+0x2be>
     c10:	e0aa      	b.n	d68 <adc_init+0x414>
     c12:	e79f      	b.n	b54 <adc_init+0x200>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
     c14:	7ce2      	ldrb	r2, [r4, #19]
     c16:	2a00      	cmp	r2, #0
     c18:	d011      	beq.n	c3e <adc_init+0x2ea>
					(config->window.window_lower_value > 32767 ||
     c1a:	69e2      	ldr	r2, [r4, #28]
     c1c:	2080      	movs	r0, #128	; 0x80
     c1e:	0200      	lsls	r0, r0, #8
     c20:	1811      	adds	r1, r2, r0
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     c22:	2017      	movs	r0, #23
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
     c24:	4a16      	ldr	r2, [pc, #88]	; (c80 <adc_init+0x32c>)
     c26:	4291      	cmp	r1, r2
     c28:	d900      	bls.n	c2c <adc_init+0x2d8>
     c2a:	e09d      	b.n	d68 <adc_init+0x414>
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
     c2c:	6a22      	ldr	r2, [r4, #32]
     c2e:	2080      	movs	r0, #128	; 0x80
     c30:	0200      	lsls	r0, r0, #8
     c32:	1811      	adds	r1, r2, r0
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     c34:	2017      	movs	r0, #23
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
     c36:	4a12      	ldr	r2, [pc, #72]	; (c80 <adc_init+0x32c>)
     c38:	4291      	cmp	r1, r2
     c3a:	d900      	bls.n	c3e <adc_init+0x2ea>
     c3c:	e094      	b.n	d68 <adc_init+0x414>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 65535 ||
					config->window.window_upper_value > 65535){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     c3e:	2017      	movs	r0, #23
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 65535 ||
     c40:	4a0f      	ldr	r2, [pc, #60]	; (c80 <adc_init+0x32c>)
     c42:	69e1      	ldr	r1, [r4, #28]
     c44:	4291      	cmp	r1, r2
     c46:	dd00      	ble.n	c4a <adc_init+0x2f6>
     c48:	e08e      	b.n	d68 <adc_init+0x414>
     c4a:	6a21      	ldr	r1, [r4, #32]
     c4c:	4291      	cmp	r1, r2
     c4e:	dd00      	ble.n	c52 <adc_init+0x2fe>
     c50:	e08a      	b.n	d68 <adc_init+0x414>
     c52:	e77f      	b.n	b54 <adc_init+0x200>
     c54:	40000400 	.word	0x40000400
     c58:	40000800 	.word	0x40000800
     c5c:	00001e15 	.word	0x00001e15
     c60:	00001d89 	.word	0x00001d89
     c64:	00004008 	.word	0x00004008
     c68:	00002fb5 	.word	0x00002fb5
     c6c:	00001ef1 	.word	0x00001ef1
     c70:	00003f34 	.word	0x00003f34
     c74:	000003ff 	.word	0x000003ff
     c78:	fffffe01 	.word	0xfffffe01
     c7c:	00000fff 	.word	0x00000fff
     c80:	0000ffff 	.word	0x0000ffff

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     c84:	7e4a      	ldrb	r2, [r1, #25]
			}
			break;
		}
	}

	while (adc_is_syncing(module_inst)) {
     c86:	b252      	sxtb	r2, r2
     c88:	2a00      	cmp	r2, #0
     c8a:	dbfb      	blt.n	c84 <adc_init+0x330>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
     c8c:	9a01      	ldr	r2, [sp, #4]
     c8e:	7213      	strb	r3, [r2, #8]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     c90:	6832      	ldr	r2, [r6, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     c92:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     c94:	b25b      	sxtb	r3, r3
     c96:	2b00      	cmp	r3, #0
     c98:	dbfb      	blt.n	c92 <adc_init+0x33e>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
     c9a:	8ba3      	ldrh	r3, [r4, #28]
     c9c:	9801      	ldr	r0, [sp, #4]
     c9e:	8383      	strh	r3, [r0, #28]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     ca0:	6832      	ldr	r2, [r6, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     ca2:	7e53      	ldrb	r3, [r2, #25]
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;

	while (adc_is_syncing(module_inst)) {
     ca4:	b25b      	sxtb	r3, r3
     ca6:	2b00      	cmp	r3, #0
     ca8:	dbfb      	blt.n	ca2 <adc_init+0x34e>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
     caa:	8c23      	ldrh	r3, [r4, #32]
     cac:	9901      	ldr	r1, [sp, #4]
     cae:	840b      	strh	r3, [r1, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     cb0:	232c      	movs	r3, #44	; 0x2c
     cb2:	5ce3      	ldrb	r3, [r4, r3]
	if (inputs_to_scan > 0) {
     cb4:	2b00      	cmp	r3, #0
     cb6:	d004      	beq.n	cc2 <adc_init+0x36e>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
     cb8:	3b01      	subs	r3, #1
     cba:	b2db      	uxtb	r3, r3
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
     cbc:	2017      	movs	r0, #23
		* plus 1.
		*/
		inputs_to_scan--;
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     cbe:	2b0f      	cmp	r3, #15
     cc0:	d852      	bhi.n	d68 <adc_init+0x414>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     cc2:	222b      	movs	r2, #43	; 0x2b
     cc4:	5ca2      	ldrb	r2, [r4, r2]
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
     cc6:	2017      	movs	r0, #23
		* plus 1.
		*/
		inputs_to_scan--;
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     cc8:	2a0f      	cmp	r2, #15
     cca:	d84d      	bhi.n	d68 <adc_init+0x414>
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     ccc:	6831      	ldr	r1, [r6, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     cce:	7e48      	ldrb	r0, [r1, #25]
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
	}

	while (adc_is_syncing(module_inst)) {
     cd0:	b240      	sxtb	r0, r0
     cd2:	2800      	cmp	r0, #0
     cd4:	dbfb      	blt.n	cce <adc_init+0x37a>
	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     cd6:	89e0      	ldrh	r0, [r4, #14]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
     cd8:	7b21      	ldrb	r1, [r4, #12]
			config->gain_factor |
     cda:	4301      	orrs	r1, r0
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
     cdc:	68a0      	ldr	r0, [r4, #8]
     cde:	4301      	orrs	r1, r0
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
     ce0:	0512      	lsls	r2, r2, #20
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     ce2:	430a      	orrs	r2, r1
     ce4:	041b      	lsls	r3, r3, #16
			config->negative_input |
     ce6:	4313      	orrs	r3, r2
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
     ce8:	9901      	ldr	r1, [sp, #4]
     cea:	610b      	str	r3, [r1, #16]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
			config->positive_input;

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
     cec:	232a      	movs	r3, #42	; 0x2a
     cee:	5ce3      	ldrb	r3, [r4, r3]
     cf0:	750b      	strb	r3, [r1, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
     cf2:	230f      	movs	r3, #15
     cf4:	758b      	strb	r3, [r1, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
     cf6:	2324      	movs	r3, #36	; 0x24
     cf8:	5ce3      	ldrb	r3, [r4, r3]
     cfa:	2b00      	cmp	r3, #0
     cfc:	d010      	beq.n	d20 <adc_init+0x3cc>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     cfe:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
			return STATUS_ERR_INVALID_ARG;
     d00:	2017      	movs	r0, #23
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     d02:	4a1d      	ldr	r2, [pc, #116]	; (d78 <adc_init+0x424>)
     d04:	4293      	cmp	r3, r2
     d06:	d82f      	bhi.n	d68 <adc_init+0x414>
			return STATUS_ERR_INVALID_ARG;
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     d08:	848b      	strh	r3, [r1, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
     d0a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     d0c:	2080      	movs	r0, #128	; 0x80
     d0e:	0100      	lsls	r0, r0, #4
     d10:	1819      	adds	r1, r3, r0
     d12:	b289      	uxth	r1, r1
				config->correction.offset_correction < -2048) {
			return STATUS_ERR_INVALID_ARG;
     d14:	2017      	movs	r0, #23
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
     d16:	4a18      	ldr	r2, [pc, #96]	; (d78 <adc_init+0x424>)
     d18:	4291      	cmp	r1, r2
     d1a:	d825      	bhi.n	d68 <adc_init+0x414>
				config->correction.offset_correction < -2048) {
			return STATUS_ERR_INVALID_ARG;
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     d1c:	9901      	ldr	r1, [sp, #4]
     d1e:	84cb      	strh	r3, [r1, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
     d20:	4b16      	ldr	r3, [pc, #88]	; (d7c <adc_init+0x428>)
     d22:	681a      	ldr	r2, [r3, #0]
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
     d24:	0152      	lsls	r2, r2, #5
     d26:	23e0      	movs	r3, #224	; 0xe0
     d28:	00db      	lsls	r3, r3, #3
     d2a:	401a      	ands	r2, r3
			ADC_CALIB_BIAS_CAL(
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
     d2c:	4b14      	ldr	r3, [pc, #80]	; (d80 <adc_init+0x42c>)
     d2e:	6858      	ldr	r0, [r3, #4]
     d30:	0141      	lsls	r1, r0, #5
     d32:	681b      	ldr	r3, [r3, #0]
     d34:	0edb      	lsrs	r3, r3, #27
     d36:	430b      	orrs	r3, r1
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
     d38:	b2db      	uxtb	r3, r3
     d3a:	4313      	orrs	r3, r2
     d3c:	9901      	ldr	r1, [sp, #4]
     d3e:	850b      	strh	r3, [r1, #40]	; 0x28
			) |
			ADC_CALIB_LINEARITY_CAL(
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
     d40:	2000      	movs	r0, #0
     d42:	e011      	b.n	d68 <adc_init+0x414>
		resolution = ADC_RESOLUTION_12BIT;
		break;

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
     d44:	2017      	movs	r0, #23
     d46:	e00f      	b.n	d68 <adc_init+0x414>
		system_voltage_reference_enable(SYSTEM_VOLTAGE_REFERENCE_BANDGAP);
	}

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
		module_inst->callback[i] = NULL;
     d48:	2300      	movs	r3, #0
     d4a:	60b3      	str	r3, [r6, #8]
     d4c:	60f3      	str	r3, [r6, #12]
     d4e:	6133      	str	r3, [r6, #16]
	};

	module_inst->registered_callback_mask = 0;
     d50:	76b3      	strb	r3, [r6, #26]
	module_inst->enabled_callback_mask = 0;
     d52:	76f3      	strb	r3, [r6, #27]
	module_inst->remaining_conversions = 0;
     d54:	8333      	strh	r3, [r6, #24]
	module_inst->job_status = STATUS_OK;
     d56:	7733      	strb	r3, [r6, #28]

	_adc_instances[0] = module_inst;
     d58:	4b0a      	ldr	r3, [pc, #40]	; (d84 <adc_init+0x430>)
     d5a:	601e      	str	r6, [r3, #0]

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     d5c:	232a      	movs	r3, #42	; 0x2a
     d5e:	5ce3      	ldrb	r3, [r4, r3]
     d60:	2b00      	cmp	r3, #0
     d62:	d100      	bne.n	d66 <adc_init+0x412>
     d64:	e61b      	b.n	99e <adc_init+0x4a>
     d66:	e620      	b.n	9aa <adc_init+0x56>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     d68:	b019      	add	sp, #100	; 0x64
     d6a:	bc3c      	pop	{r2, r3, r4, r5}
     d6c:	4690      	mov	r8, r2
     d6e:	4699      	mov	r9, r3
     d70:	46a2      	mov	sl, r4
     d72:	46ab      	mov	fp, r5
     d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d76:	46c0      	nop			; (mov r8, r8)
     d78:	00000fff 	.word	0x00000fff
     d7c:	00806024 	.word	0x00806024
     d80:	00806020 	.word	0x00806020
     d84:	20000128 	.word	0x20000128

00000d88 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     d88:	b538      	push	{r3, r4, r5, lr}

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
	struct adc_module *module = _adc_instances[instance];
     d8a:	4b2b      	ldr	r3, [pc, #172]	; (e38 <ADC_Handler+0xb0>)
     d8c:	681c      	ldr	r4, [r3, #0]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;
     d8e:	6823      	ldr	r3, [r4, #0]
     d90:	7e1d      	ldrb	r5, [r3, #24]
     d92:	b2ed      	uxtb	r5, r5

	if (flags & ADC_INTFLAG_RESRDY) {
     d94:	07e9      	lsls	r1, r5, #31
     d96:	d531      	bpl.n	dfc <ADC_Handler+0x74>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
     d98:	7ee2      	ldrb	r2, [r4, #27]
     d9a:	07d1      	lsls	r1, r2, #31
     d9c:	d52e      	bpl.n	dfc <ADC_Handler+0x74>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
     d9e:	7ea2      	ldrb	r2, [r4, #26]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;

	if (flags & ADC_INTFLAG_RESRDY) {
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
     da0:	07d1      	lsls	r1, r2, #31
     da2:	d52b      	bpl.n	dfc <ADC_Handler+0x74>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
			/* clear interrupt flag */
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     da4:	2201      	movs	r2, #1
     da6:	761a      	strb	r2, [r3, #24]

			/* store ADC result in job buffer */
			*(module->job_buffer++) = module->hw->RESULT.reg;
     da8:	6963      	ldr	r3, [r4, #20]
     daa:	1c9a      	adds	r2, r3, #2
     dac:	6162      	str	r2, [r4, #20]
     dae:	6821      	ldr	r1, [r4, #0]
     db0:	8b4a      	ldrh	r2, [r1, #26]
     db2:	b292      	uxth	r2, r2
     db4:	801a      	strh	r2, [r3, #0]

			if (--module->remaining_conversions > 0) {
     db6:	8b23      	ldrh	r3, [r4, #24]
     db8:	3b01      	subs	r3, #1
     dba:	b29b      	uxth	r3, r3
     dbc:	8323      	strh	r3, [r4, #24]
     dbe:	2b00      	cmp	r3, #0
     dc0:	d011      	beq.n	de6 <ADC_Handler+0x5e>
				if (module->software_trigger == true) {
     dc2:	7f63      	ldrb	r3, [r4, #29]
     dc4:	2b00      	cmp	r3, #0
     dc6:	d019      	beq.n	dfc <ADC_Handler+0x74>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     dc8:	6823      	ldr	r3, [r4, #0]
     dca:	7e5a      	ldrb	r2, [r3, #25]

	while (adc_is_syncing(module_inst)) {
     dcc:	b252      	sxtb	r2, r2
     dce:	2a00      	cmp	r2, #0
     dd0:	dbfb      	blt.n	dca <ADC_Handler+0x42>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     dd2:	7b19      	ldrb	r1, [r3, #12]
     dd4:	2202      	movs	r2, #2
     dd6:	430a      	orrs	r2, r1
     dd8:	731a      	strb	r2, [r3, #12]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     dda:	6822      	ldr	r2, [r4, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     ddc:	7e53      	ldrb	r3, [r2, #25]

	while (adc_is_syncing(module_inst)) {
     dde:	b25b      	sxtb	r3, r3
     de0:	2b00      	cmp	r3, #0
     de2:	dbfb      	blt.n	ddc <ADC_Handler+0x54>
     de4:	e00a      	b.n	dfc <ADC_Handler+0x74>
					adc_start_conversion(module);
				}
			} else {
				if (module->job_status == STATUS_BUSY) {
     de6:	7f23      	ldrb	r3, [r4, #28]
     de8:	2b05      	cmp	r3, #5
     dea:	d107      	bne.n	dfc <ADC_Handler+0x74>
					/* job is complete. update status,disable interrupt
					 *and call callback */
					module->job_status = STATUS_OK;
     dec:	2300      	movs	r3, #0
     dee:	7723      	strb	r3, [r4, #28]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     df0:	2301      	movs	r3, #1
     df2:	6822      	ldr	r2, [r4, #0]
     df4:	7593      	strb	r3, [r2, #22]
					adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);

					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     df6:	1c20      	adds	r0, r4, #0
     df8:	68a3      	ldr	r3, [r4, #8]
     dfa:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
     dfc:	0769      	lsls	r1, r5, #29
     dfe:	d50b      	bpl.n	e18 <ADC_Handler+0x90>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     e00:	2304      	movs	r3, #4
     e02:	6822      	ldr	r2, [r4, #0]
     e04:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     e06:	7ee3      	ldrb	r3, [r4, #27]
     e08:	0799      	lsls	r1, r3, #30
     e0a:	d505      	bpl.n	e18 <ADC_Handler+0x90>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
     e0c:	7ea3      	ldrb	r3, [r4, #26]
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     e0e:	079a      	lsls	r2, r3, #30
     e10:	d502      	bpl.n	e18 <ADC_Handler+0x90>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     e12:	1c20      	adds	r0, r4, #0
     e14:	68e3      	ldr	r3, [r4, #12]
     e16:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
     e18:	07a9      	lsls	r1, r5, #30
     e1a:	d50b      	bpl.n	e34 <ADC_Handler+0xac>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     e1c:	2302      	movs	r3, #2
     e1e:	6822      	ldr	r2, [r4, #0]
     e20:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     e22:	7ee3      	ldrb	r3, [r4, #27]
     e24:	0759      	lsls	r1, r3, #29
     e26:	d505      	bpl.n	e34 <ADC_Handler+0xac>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
     e28:	7ea3      	ldrb	r3, [r4, #26]

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     e2a:	075a      	lsls	r2, r3, #29
     e2c:	d502      	bpl.n	e34 <ADC_Handler+0xac>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
			(module->callback[ADC_CALLBACK_ERROR])(module);
     e2e:	6923      	ldr	r3, [r4, #16]
     e30:	1c20      	adds	r0, r4, #0
     e32:	4798      	blx	r3

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
	_adc_interrupt_handler(0);
}
     e34:	bd38      	pop	{r3, r4, r5, pc}
     e36:	46c0      	nop			; (mov r8, r8)
     e38:	20000128 	.word	0x20000128

00000e3c <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     e3c:	b510      	push	{r4, lr}
     e3e:	1c03      	adds	r3, r0, #0
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     e40:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     e42:	2040      	movs	r0, #64	; 0x40
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     e44:	4299      	cmp	r1, r3
     e46:	d30c      	bcc.n	e62 <_sercom_get_sync_baud_val+0x26>
     e48:	2400      	movs	r4, #0
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
		clock_value = clock_value - baudrate;
     e4a:	1ac9      	subs	r1, r1, r3
		baud_calculated++;
     e4c:	1c60      	adds	r0, r4, #1
     e4e:	b280      	uxth	r0, r0
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
	while (clock_value >= baudrate) {
     e50:	428b      	cmp	r3, r1
     e52:	d801      	bhi.n	e58 <_sercom_get_sync_baud_val+0x1c>
		clock_value = clock_value - baudrate;
		baud_calculated++;
     e54:	1c04      	adds	r4, r0, #0
     e56:	e7f8      	b.n	e4a <_sercom_get_sync_baud_val+0xe>

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     e58:	2040      	movs	r0, #64	; 0x40
	}
	baud_calculated = baud_calculated - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     e5a:	2cff      	cmp	r4, #255	; 0xff
     e5c:	d801      	bhi.n	e62 <_sercom_get_sync_baud_val+0x26>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     e5e:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     e60:	2000      	movs	r0, #0
	}
}
     e62:	bd10      	pop	{r4, pc}
     e64:	0000      	movs	r0, r0
	...

00000e68 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     e68:	b5f0      	push	{r4, r5, r6, r7, lr}
     e6a:	465f      	mov	r7, fp
     e6c:	4656      	mov	r6, sl
     e6e:	464d      	mov	r5, r9
     e70:	4644      	mov	r4, r8
     e72:	b4f0      	push	{r4, r5, r6, r7}
     e74:	b087      	sub	sp, #28
     e76:	1c06      	adds	r6, r0, #0
     e78:	1c0d      	adds	r5, r1, #0
     e7a:	9204      	str	r2, [sp, #16]
     e7c:	aa10      	add	r2, sp, #64	; 0x40
     e7e:	7810      	ldrb	r0, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     e80:	1c32      	adds	r2, r6, #0
     e82:	4342      	muls	r2, r0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     e84:	2440      	movs	r4, #64	; 0x40
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     e86:	428a      	cmp	r2, r1
     e88:	d900      	bls.n	e8c <_sercom_get_async_baud_val+0x24>
     e8a:	e0b3      	b.n	ff4 <_sercom_get_async_baud_val+0x18c>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     e8c:	2b00      	cmp	r3, #0
     e8e:	d14b      	bne.n	f28 <_sercom_get_async_baud_val+0xc0>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     e90:	2100      	movs	r1, #0
     e92:	1c32      	adds	r2, r6, #0
     e94:	4c5e      	ldr	r4, [pc, #376]	; (1010 <_sercom_get_async_baud_val+0x1a8>)
     e96:	47a0      	blx	r4
     e98:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     e9a:	1c2e      	adds	r6, r5, #0
     e9c:	2700      	movs	r7, #0
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     e9e:	2000      	movs	r0, #0
     ea0:	2100      	movs	r1, #0
     ea2:	2200      	movs	r2, #0
     ea4:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     ea6:	243f      	movs	r4, #63	; 0x3f
     ea8:	46a4      	mov	ip, r4
		bit_shift = (uint64_t)1 << i;
     eaa:	2501      	movs	r5, #1
     eac:	46a8      	mov	r8, r5
     eae:	9002      	str	r0, [sp, #8]
     eb0:	9103      	str	r1, [sp, #12]
     eb2:	4661      	mov	r1, ip
     eb4:	3920      	subs	r1, #32
     eb6:	d403      	bmi.n	ec0 <_sercom_get_async_baud_val+0x58>
     eb8:	4640      	mov	r0, r8
     eba:	4088      	lsls	r0, r1
     ebc:	4681      	mov	r9, r0
     ebe:	e005      	b.n	ecc <_sercom_get_async_baud_val+0x64>
     ec0:	2120      	movs	r1, #32
     ec2:	4665      	mov	r5, ip
     ec4:	1b4c      	subs	r4, r1, r5
     ec6:	4640      	mov	r0, r8
     ec8:	40e0      	lsrs	r0, r4
     eca:	4681      	mov	r9, r0
     ecc:	4641      	mov	r1, r8
     ece:	4664      	mov	r4, ip
     ed0:	40a1      	lsls	r1, r4
     ed2:	468a      	mov	sl, r1

		r = r << 1;
     ed4:	1c10      	adds	r0, r2, #0
     ed6:	1c19      	adds	r1, r3, #0
     ed8:	1880      	adds	r0, r0, r2
     eda:	4159      	adcs	r1, r3
     edc:	1c02      	adds	r2, r0, #0
     ede:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
     ee0:	465d      	mov	r5, fp
     ee2:	464c      	mov	r4, r9
     ee4:	4225      	tst	r5, r4
     ee6:	d002      	beq.n	eee <_sercom_get_async_baud_val+0x86>
			r |= 0x01;
     ee8:	4642      	mov	r2, r8
     eea:	4302      	orrs	r2, r0
     eec:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
     eee:	429f      	cmp	r7, r3
     ef0:	d80c      	bhi.n	f0c <_sercom_get_async_baud_val+0xa4>
     ef2:	d101      	bne.n	ef8 <_sercom_get_async_baud_val+0x90>
     ef4:	4296      	cmp	r6, r2
     ef6:	d809      	bhi.n	f0c <_sercom_get_async_baud_val+0xa4>
			r = r - d;
     ef8:	1b92      	subs	r2, r2, r6
     efa:	41bb      	sbcs	r3, r7
			q |= bit_shift;
     efc:	4650      	mov	r0, sl
     efe:	9d02      	ldr	r5, [sp, #8]
     f00:	4328      	orrs	r0, r5
     f02:	4649      	mov	r1, r9
     f04:	9c03      	ldr	r4, [sp, #12]
     f06:	4321      	orrs	r1, r4
     f08:	9002      	str	r0, [sp, #8]
     f0a:	9103      	str	r1, [sp, #12]
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     f0c:	4665      	mov	r5, ip
     f0e:	3d01      	subs	r5, #1
     f10:	46ac      	mov	ip, r5
     f12:	d2ce      	bcs.n	eb2 <_sercom_get_async_baud_val+0x4a>
     f14:	9802      	ldr	r0, [sp, #8]
     f16:	9903      	ldr	r1, [sp, #12]

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
     f18:	4b3c      	ldr	r3, [pc, #240]	; (100c <_sercom_get_async_baud_val+0x1a4>)
     f1a:	4a3b      	ldr	r2, [pc, #236]	; (1008 <_sercom_get_async_baud_val+0x1a0>)
     f1c:	1a12      	subs	r2, r2, r0
     f1e:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     f20:	0c12      	lsrs	r2, r2, #16
     f22:	041b      	lsls	r3, r3, #16
     f24:	431a      	orrs	r2, r3
     f26:	e062      	b.n	fee <_sercom_get_async_baud_val+0x186>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     f28:	2200      	movs	r2, #0
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     f2a:	2b01      	cmp	r3, #1
     f2c:	d15f      	bne.n	fee <_sercom_get_async_baud_val+0x186>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     f2e:	0f4f      	lsrs	r7, r1, #29
     f30:	46b9      	mov	r9, r7
     f32:	00cd      	lsls	r5, r1, #3
     f34:	46ab      	mov	fp, r5
			temp2 = ((uint64_t)baudrate * sample_num);
     f36:	2100      	movs	r1, #0
     f38:	1c32      	adds	r2, r6, #0
     f3a:	2300      	movs	r3, #0
     f3c:	4c34      	ldr	r4, [pc, #208]	; (1010 <_sercom_get_async_baud_val+0x1a8>)
     f3e:	47a0      	blx	r4
     f40:	1c06      	adds	r6, r0, #0
     f42:	1c0f      	adds	r7, r1, #0
     f44:	2300      	movs	r3, #0
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
		bit_shift = (uint64_t)1 << i;
     f46:	2501      	movs	r5, #1
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     f48:	9602      	str	r6, [sp, #8]
     f4a:	9703      	str	r7, [sp, #12]
     f4c:	469a      	mov	sl, r3
     f4e:	4650      	mov	r0, sl
     f50:	b2c0      	uxtb	r0, r0
     f52:	9005      	str	r0, [sp, #20]
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     f54:	2100      	movs	r1, #0
     f56:	4688      	mov	r8, r1
     f58:	2200      	movs	r2, #0
     f5a:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     f5c:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     f5e:	1c27      	adds	r7, r4, #0
     f60:	3f20      	subs	r7, #32
     f62:	d403      	bmi.n	f6c <_sercom_get_async_baud_val+0x104>
     f64:	1c2e      	adds	r6, r5, #0
     f66:	40be      	lsls	r6, r7
     f68:	9601      	str	r6, [sp, #4]
     f6a:	e004      	b.n	f76 <_sercom_get_async_baud_val+0x10e>
     f6c:	2020      	movs	r0, #32
     f6e:	1b07      	subs	r7, r0, r4
     f70:	1c29      	adds	r1, r5, #0
     f72:	40f9      	lsrs	r1, r7
     f74:	9101      	str	r1, [sp, #4]
     f76:	1c2e      	adds	r6, r5, #0
     f78:	40a6      	lsls	r6, r4
     f7a:	9600      	str	r6, [sp, #0]

		r = r << 1;
     f7c:	1c10      	adds	r0, r2, #0
     f7e:	1c19      	adds	r1, r3, #0
     f80:	1880      	adds	r0, r0, r2
     f82:	4159      	adcs	r1, r3
     f84:	1c02      	adds	r2, r0, #0
     f86:	1c0b      	adds	r3, r1, #0

		if (n & bit_shift) {
     f88:	465f      	mov	r7, fp
     f8a:	4037      	ands	r7, r6
     f8c:	46bc      	mov	ip, r7
     f8e:	9e01      	ldr	r6, [sp, #4]
     f90:	464f      	mov	r7, r9
     f92:	403e      	ands	r6, r7
     f94:	4667      	mov	r7, ip
     f96:	433e      	orrs	r6, r7
     f98:	d002      	beq.n	fa0 <_sercom_get_async_baud_val+0x138>
			r |= 0x01;
     f9a:	1c2a      	adds	r2, r5, #0
     f9c:	4302      	orrs	r2, r0
     f9e:	1c0b      	adds	r3, r1, #0
		}

		if (r >= d) {
     fa0:	9803      	ldr	r0, [sp, #12]
     fa2:	4298      	cmp	r0, r3
     fa4:	d80b      	bhi.n	fbe <_sercom_get_async_baud_val+0x156>
     fa6:	d102      	bne.n	fae <_sercom_get_async_baud_val+0x146>
     fa8:	9902      	ldr	r1, [sp, #8]
     faa:	4291      	cmp	r1, r2
     fac:	d807      	bhi.n	fbe <_sercom_get_async_baud_val+0x156>
			r = r - d;
     fae:	9e02      	ldr	r6, [sp, #8]
     fb0:	9f03      	ldr	r7, [sp, #12]
     fb2:	1b92      	subs	r2, r2, r6
     fb4:	41bb      	sbcs	r3, r7
			q |= bit_shift;
     fb6:	4647      	mov	r7, r8
     fb8:	9800      	ldr	r0, [sp, #0]
     fba:	4307      	orrs	r7, r0
     fbc:	46b8      	mov	r8, r7
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
	for (i = 63; i >= 0; i--) {
     fbe:	3c01      	subs	r4, #1
     fc0:	d2cd      	bcs.n	f5e <_sercom_get_async_baud_val+0xf6>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
			temp2 = ((uint64_t)baudrate * sample_num);
			baud_int = long_division(temp1, temp2);
			baud_int -= baud_fp;
     fc2:	4641      	mov	r1, r8
     fc4:	4652      	mov	r2, sl
     fc6:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
     fc8:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     fca:	4c12      	ldr	r4, [pc, #72]	; (1014 <_sercom_get_async_baud_val+0x1ac>)
     fcc:	42a3      	cmp	r3, r4
     fce:	d908      	bls.n	fe2 <_sercom_get_async_baud_val+0x17a>
     fd0:	9a05      	ldr	r2, [sp, #20]
     fd2:	3201      	adds	r2, #1
     fd4:	b2d2      	uxtb	r2, r2
     fd6:	9205      	str	r2, [sp, #20]
     fd8:	2601      	movs	r6, #1
     fda:	44b2      	add	sl, r6
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
		ratio = long_division(temp1, peripheral_clock);
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     fdc:	4657      	mov	r7, sl
     fde:	2f08      	cmp	r7, #8
     fe0:	d1b5      	bne.n	f4e <_sercom_get_async_baud_val+0xe6>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     fe2:	2440      	movs	r4, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     fe4:	9805      	ldr	r0, [sp, #20]
     fe6:	2808      	cmp	r0, #8
     fe8:	d004      	beq.n	ff4 <_sercom_get_async_baud_val+0x18c>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     fea:	0342      	lsls	r2, r0, #13
     fec:	431a      	orrs	r2, r3
	}

	*baudval = baud_calculated;
     fee:	9c04      	ldr	r4, [sp, #16]
     ff0:	8022      	strh	r2, [r4, #0]
	return STATUS_OK;
     ff2:	2400      	movs	r4, #0
}
     ff4:	1c20      	adds	r0, r4, #0
     ff6:	b007      	add	sp, #28
     ff8:	bc3c      	pop	{r2, r3, r4, r5}
     ffa:	4690      	mov	r8, r2
     ffc:	4699      	mov	r9, r3
     ffe:	46a2      	mov	sl, r4
    1000:	46ab      	mov	fp, r5
    1002:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1004:	46c0      	nop			; (mov r8, r8)
    1006:	46c0      	nop			; (mov r8, r8)
    1008:	00000000 	.word	0x00000000
    100c:	00000001 	.word	0x00000001
    1010:	000023b9 	.word	0x000023b9
    1014:	00001fff 	.word	0x00001fff

00001018 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1018:	b510      	push	{r4, lr}
    101a:	b082      	sub	sp, #8
    101c:	1c04      	adds	r4, r0, #0
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
    101e:	4b0f      	ldr	r3, [pc, #60]	; (105c <sercom_set_gclk_generator+0x44>)
    1020:	781b      	ldrb	r3, [r3, #0]
    1022:	2b00      	cmp	r3, #0
    1024:	d001      	beq.n	102a <sercom_set_gclk_generator+0x12>
    1026:	2900      	cmp	r1, #0
    1028:	d00d      	beq.n	1046 <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config. */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
    102a:	a901      	add	r1, sp, #4
    102c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    102e:	2013      	movs	r0, #19
    1030:	4b0b      	ldr	r3, [pc, #44]	; (1060 <sercom_set_gclk_generator+0x48>)
    1032:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1034:	2013      	movs	r0, #19
    1036:	4b0b      	ldr	r3, [pc, #44]	; (1064 <sercom_set_gclk_generator+0x4c>)
    1038:	4798      	blx	r3

		/* Save config. */
		_sercom_config.generator_source = generator_source;
    103a:	4b08      	ldr	r3, [pc, #32]	; (105c <sercom_set_gclk_generator+0x44>)
    103c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    103e:	2201      	movs	r2, #1
    1040:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    1042:	2000      	movs	r0, #0
    1044:	e007      	b.n	1056 <sercom_set_gclk_generator+0x3e>
	} else if (generator_source == _sercom_config.generator_source) {
    1046:	4b05      	ldr	r3, [pc, #20]	; (105c <sercom_set_gclk_generator+0x44>)
    1048:	785a      	ldrb	r2, [r3, #1]
		/* Return status OK if same config. */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
    104a:	201d      	movs	r0, #29
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config. */
		return STATUS_OK;
    104c:	1b14      	subs	r4, r2, r4
    104e:	1e62      	subs	r2, r4, #1
    1050:	4194      	sbcs	r4, r2
    1052:	4264      	negs	r4, r4
    1054:	4020      	ands	r0, r4
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
    1056:	b002      	add	sp, #8
    1058:	bd10      	pop	{r4, pc}
    105a:	46c0      	nop			; (mov r8, r8)
    105c:	20000090 	.word	0x20000090
    1060:	00001e15 	.word	0x00001e15
    1064:	00001d89 	.word	0x00001d89

00001068 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1068:	4b44      	ldr	r3, [pc, #272]	; (117c <_sercom_get_default_pad+0x114>)
    106a:	4298      	cmp	r0, r3
    106c:	d033      	beq.n	10d6 <_sercom_get_default_pad+0x6e>
    106e:	d806      	bhi.n	107e <_sercom_get_default_pad+0x16>
    1070:	4b43      	ldr	r3, [pc, #268]	; (1180 <_sercom_get_default_pad+0x118>)
    1072:	4298      	cmp	r0, r3
    1074:	d00d      	beq.n	1092 <_sercom_get_default_pad+0x2a>
    1076:	4b43      	ldr	r3, [pc, #268]	; (1184 <_sercom_get_default_pad+0x11c>)
    1078:	4298      	cmp	r0, r3
    107a:	d01b      	beq.n	10b4 <_sercom_get_default_pad+0x4c>
    107c:	e06f      	b.n	115e <_sercom_get_default_pad+0xf6>
    107e:	4b42      	ldr	r3, [pc, #264]	; (1188 <_sercom_get_default_pad+0x120>)
    1080:	4298      	cmp	r0, r3
    1082:	d04a      	beq.n	111a <_sercom_get_default_pad+0xb2>
    1084:	4b41      	ldr	r3, [pc, #260]	; (118c <_sercom_get_default_pad+0x124>)
    1086:	4298      	cmp	r0, r3
    1088:	d058      	beq.n	113c <_sercom_get_default_pad+0xd4>
    108a:	4b41      	ldr	r3, [pc, #260]	; (1190 <_sercom_get_default_pad+0x128>)
    108c:	4298      	cmp	r0, r3
    108e:	d166      	bne.n	115e <_sercom_get_default_pad+0xf6>
    1090:	e032      	b.n	10f8 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1092:	2901      	cmp	r1, #1
    1094:	d065      	beq.n	1162 <_sercom_get_default_pad+0xfa>
    1096:	2900      	cmp	r1, #0
    1098:	d004      	beq.n	10a4 <_sercom_get_default_pad+0x3c>
    109a:	2902      	cmp	r1, #2
    109c:	d006      	beq.n	10ac <_sercom_get_default_pad+0x44>
    109e:	2903      	cmp	r1, #3
    10a0:	d006      	beq.n	10b0 <_sercom_get_default_pad+0x48>
    10a2:	e001      	b.n	10a8 <_sercom_get_default_pad+0x40>
    10a4:	483b      	ldr	r0, [pc, #236]	; (1194 <_sercom_get_default_pad+0x12c>)
    10a6:	e067      	b.n	1178 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    10a8:	2000      	movs	r0, #0
    10aa:	e065      	b.n	1178 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    10ac:	483a      	ldr	r0, [pc, #232]	; (1198 <_sercom_get_default_pad+0x130>)
    10ae:	e063      	b.n	1178 <_sercom_get_default_pad+0x110>
    10b0:	483a      	ldr	r0, [pc, #232]	; (119c <_sercom_get_default_pad+0x134>)
    10b2:	e061      	b.n	1178 <_sercom_get_default_pad+0x110>
    10b4:	2901      	cmp	r1, #1
    10b6:	d056      	beq.n	1166 <_sercom_get_default_pad+0xfe>
    10b8:	2900      	cmp	r1, #0
    10ba:	d004      	beq.n	10c6 <_sercom_get_default_pad+0x5e>
    10bc:	2902      	cmp	r1, #2
    10be:	d006      	beq.n	10ce <_sercom_get_default_pad+0x66>
    10c0:	2903      	cmp	r1, #3
    10c2:	d006      	beq.n	10d2 <_sercom_get_default_pad+0x6a>
    10c4:	e001      	b.n	10ca <_sercom_get_default_pad+0x62>
    10c6:	2003      	movs	r0, #3
    10c8:	e056      	b.n	1178 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    10ca:	2000      	movs	r0, #0
    10cc:	e054      	b.n	1178 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    10ce:	4834      	ldr	r0, [pc, #208]	; (11a0 <_sercom_get_default_pad+0x138>)
    10d0:	e052      	b.n	1178 <_sercom_get_default_pad+0x110>
    10d2:	4834      	ldr	r0, [pc, #208]	; (11a4 <_sercom_get_default_pad+0x13c>)
    10d4:	e050      	b.n	1178 <_sercom_get_default_pad+0x110>
    10d6:	2901      	cmp	r1, #1
    10d8:	d047      	beq.n	116a <_sercom_get_default_pad+0x102>
    10da:	2900      	cmp	r1, #0
    10dc:	d004      	beq.n	10e8 <_sercom_get_default_pad+0x80>
    10de:	2902      	cmp	r1, #2
    10e0:	d006      	beq.n	10f0 <_sercom_get_default_pad+0x88>
    10e2:	2903      	cmp	r1, #3
    10e4:	d006      	beq.n	10f4 <_sercom_get_default_pad+0x8c>
    10e6:	e001      	b.n	10ec <_sercom_get_default_pad+0x84>
    10e8:	482f      	ldr	r0, [pc, #188]	; (11a8 <_sercom_get_default_pad+0x140>)
    10ea:	e045      	b.n	1178 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    10ec:	2000      	movs	r0, #0
    10ee:	e043      	b.n	1178 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    10f0:	482e      	ldr	r0, [pc, #184]	; (11ac <_sercom_get_default_pad+0x144>)
    10f2:	e041      	b.n	1178 <_sercom_get_default_pad+0x110>
    10f4:	482e      	ldr	r0, [pc, #184]	; (11b0 <_sercom_get_default_pad+0x148>)
    10f6:	e03f      	b.n	1178 <_sercom_get_default_pad+0x110>
    10f8:	2901      	cmp	r1, #1
    10fa:	d038      	beq.n	116e <_sercom_get_default_pad+0x106>
    10fc:	2900      	cmp	r1, #0
    10fe:	d004      	beq.n	110a <_sercom_get_default_pad+0xa2>
    1100:	2902      	cmp	r1, #2
    1102:	d006      	beq.n	1112 <_sercom_get_default_pad+0xaa>
    1104:	2903      	cmp	r1, #3
    1106:	d006      	beq.n	1116 <_sercom_get_default_pad+0xae>
    1108:	e001      	b.n	110e <_sercom_get_default_pad+0xa6>
    110a:	482a      	ldr	r0, [pc, #168]	; (11b4 <_sercom_get_default_pad+0x14c>)
    110c:	e034      	b.n	1178 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    110e:	2000      	movs	r0, #0
    1110:	e032      	b.n	1178 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1112:	4829      	ldr	r0, [pc, #164]	; (11b8 <_sercom_get_default_pad+0x150>)
    1114:	e030      	b.n	1178 <_sercom_get_default_pad+0x110>
    1116:	4829      	ldr	r0, [pc, #164]	; (11bc <_sercom_get_default_pad+0x154>)
    1118:	e02e      	b.n	1178 <_sercom_get_default_pad+0x110>
    111a:	2901      	cmp	r1, #1
    111c:	d029      	beq.n	1172 <_sercom_get_default_pad+0x10a>
    111e:	2900      	cmp	r1, #0
    1120:	d004      	beq.n	112c <_sercom_get_default_pad+0xc4>
    1122:	2902      	cmp	r1, #2
    1124:	d006      	beq.n	1134 <_sercom_get_default_pad+0xcc>
    1126:	2903      	cmp	r1, #3
    1128:	d006      	beq.n	1138 <_sercom_get_default_pad+0xd0>
    112a:	e001      	b.n	1130 <_sercom_get_default_pad+0xc8>
    112c:	4824      	ldr	r0, [pc, #144]	; (11c0 <_sercom_get_default_pad+0x158>)
    112e:	e023      	b.n	1178 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    1130:	2000      	movs	r0, #0
    1132:	e021      	b.n	1178 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1134:	4823      	ldr	r0, [pc, #140]	; (11c4 <_sercom_get_default_pad+0x15c>)
    1136:	e01f      	b.n	1178 <_sercom_get_default_pad+0x110>
    1138:	4823      	ldr	r0, [pc, #140]	; (11c8 <_sercom_get_default_pad+0x160>)
    113a:	e01d      	b.n	1178 <_sercom_get_default_pad+0x110>
    113c:	2901      	cmp	r1, #1
    113e:	d01a      	beq.n	1176 <_sercom_get_default_pad+0x10e>
    1140:	2900      	cmp	r1, #0
    1142:	d004      	beq.n	114e <_sercom_get_default_pad+0xe6>
    1144:	2902      	cmp	r1, #2
    1146:	d006      	beq.n	1156 <_sercom_get_default_pad+0xee>
    1148:	2903      	cmp	r1, #3
    114a:	d006      	beq.n	115a <_sercom_get_default_pad+0xf2>
    114c:	e001      	b.n	1152 <_sercom_get_default_pad+0xea>
    114e:	481f      	ldr	r0, [pc, #124]	; (11cc <_sercom_get_default_pad+0x164>)
    1150:	e012      	b.n	1178 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    1152:	2000      	movs	r0, #0
    1154:	e010      	b.n	1178 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1156:	481e      	ldr	r0, [pc, #120]	; (11d0 <_sercom_get_default_pad+0x168>)
    1158:	e00e      	b.n	1178 <_sercom_get_default_pad+0x110>
    115a:	481e      	ldr	r0, [pc, #120]	; (11d4 <_sercom_get_default_pad+0x16c>)
    115c:	e00c      	b.n	1178 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
    115e:	2000      	movs	r0, #0
    1160:	e00a      	b.n	1178 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1162:	481d      	ldr	r0, [pc, #116]	; (11d8 <_sercom_get_default_pad+0x170>)
    1164:	e008      	b.n	1178 <_sercom_get_default_pad+0x110>
    1166:	481d      	ldr	r0, [pc, #116]	; (11dc <_sercom_get_default_pad+0x174>)
    1168:	e006      	b.n	1178 <_sercom_get_default_pad+0x110>
    116a:	481d      	ldr	r0, [pc, #116]	; (11e0 <_sercom_get_default_pad+0x178>)
    116c:	e004      	b.n	1178 <_sercom_get_default_pad+0x110>
    116e:	481d      	ldr	r0, [pc, #116]	; (11e4 <_sercom_get_default_pad+0x17c>)
    1170:	e002      	b.n	1178 <_sercom_get_default_pad+0x110>
    1172:	481d      	ldr	r0, [pc, #116]	; (11e8 <_sercom_get_default_pad+0x180>)
    1174:	e000      	b.n	1178 <_sercom_get_default_pad+0x110>
    1176:	481d      	ldr	r0, [pc, #116]	; (11ec <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
    1178:	4770      	bx	lr
    117a:	46c0      	nop			; (mov r8, r8)
    117c:	42001000 	.word	0x42001000
    1180:	42000800 	.word	0x42000800
    1184:	42000c00 	.word	0x42000c00
    1188:	42001800 	.word	0x42001800
    118c:	42001c00 	.word	0x42001c00
    1190:	42001400 	.word	0x42001400
    1194:	00040003 	.word	0x00040003
    1198:	00060003 	.word	0x00060003
    119c:	00070003 	.word	0x00070003
    11a0:	001e0003 	.word	0x001e0003
    11a4:	001f0003 	.word	0x001f0003
    11a8:	00080003 	.word	0x00080003
    11ac:	000a0003 	.word	0x000a0003
    11b0:	000b0003 	.word	0x000b0003
    11b4:	00100003 	.word	0x00100003
    11b8:	00120003 	.word	0x00120003
    11bc:	00130003 	.word	0x00130003
    11c0:	000c0003 	.word	0x000c0003
    11c4:	000e0003 	.word	0x000e0003
    11c8:	000f0003 	.word	0x000f0003
    11cc:	00160003 	.word	0x00160003
    11d0:	00180003 	.word	0x00180003
    11d4:	00190003 	.word	0x00190003
    11d8:	00050003 	.word	0x00050003
    11dc:	00010003 	.word	0x00010003
    11e0:	00090003 	.word	0x00090003
    11e4:	00110003 	.word	0x00110003
    11e8:	000d0003 	.word	0x000d0003
    11ec:	00170003 	.word	0x00170003

000011f0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    11f0:	b570      	push	{r4, r5, r6, lr}
    11f2:	b086      	sub	sp, #24
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    11f4:	4a0c      	ldr	r2, [pc, #48]	; (1228 <_sercom_get_sercom_inst_index+0x38>)
    11f6:	466b      	mov	r3, sp
    11f8:	ca70      	ldmia	r2!, {r4, r5, r6}
    11fa:	c370      	stmia	r3!, {r4, r5, r6}
    11fc:	ca32      	ldmia	r2!, {r1, r4, r5}
    11fe:	c332      	stmia	r3!, {r1, r4, r5}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    1200:	9e00      	ldr	r6, [sp, #0]
    1202:	4286      	cmp	r6, r0
    1204:	d006      	beq.n	1214 <_sercom_get_sercom_inst_index+0x24>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1206:	2301      	movs	r3, #1
    1208:	009a      	lsls	r2, r3, #2
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    120a:	4669      	mov	r1, sp
    120c:	5852      	ldr	r2, [r2, r1]
    120e:	4282      	cmp	r2, r0
    1210:	d103      	bne.n	121a <_sercom_get_sercom_inst_index+0x2a>
    1212:	e000      	b.n	1216 <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    1214:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
    1216:	b2d8      	uxtb	r0, r3
    1218:	e003      	b.n	1222 <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    121a:	3301      	adds	r3, #1
    121c:	2b06      	cmp	r3, #6
    121e:	d1f3      	bne.n	1208 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    1220:	2000      	movs	r0, #0
}
    1222:	b006      	add	sp, #24
    1224:	bd70      	pop	{r4, r5, r6, pc}
    1226:	46c0      	nop			; (mov r8, r8)
    1228:	00004058 	.word	0x00004058

0000122c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    122c:	b5f0      	push	{r4, r5, r6, r7, lr}
    122e:	4647      	mov	r7, r8
    1230:	b480      	push	{r7}
    1232:	1c0c      	adds	r4, r1, #0
    1234:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    1236:	2800      	cmp	r0, #0
    1238:	d10c      	bne.n	1254 <_read+0x28>
		return -1;
	}

	for (; len > 0; --len) {
    123a:	2a00      	cmp	r2, #0
    123c:	dd0d      	ble.n	125a <_read+0x2e>
    123e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    1240:	4e09      	ldr	r6, [pc, #36]	; (1268 <_read+0x3c>)
    1242:	4d0a      	ldr	r5, [pc, #40]	; (126c <_read+0x40>)
    1244:	6830      	ldr	r0, [r6, #0]
    1246:	1c21      	adds	r1, r4, #0
    1248:	682b      	ldr	r3, [r5, #0]
    124a:	4798      	blx	r3
		ptr++;
    124c:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
    124e:	42bc      	cmp	r4, r7
    1250:	d1f8      	bne.n	1244 <_read+0x18>
    1252:	e004      	b.n	125e <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
    1254:	2001      	movs	r0, #1
    1256:	4240      	negs	r0, r0
    1258:	e002      	b.n	1260 <_read+0x34>
	}

	for (; len > 0; --len) {
    125a:	2000      	movs	r0, #0
    125c:	e000      	b.n	1260 <_read+0x34>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
    125e:	4640      	mov	r0, r8
	}
	return nChars;
}
    1260:	bc04      	pop	{r2}
    1262:	4690      	mov	r8, r2
    1264:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1266:	46c0      	nop			; (mov r8, r8)
    1268:	20000134 	.word	0x20000134
    126c:	2000012c 	.word	0x2000012c

00001270 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    1270:	b5f0      	push	{r4, r5, r6, r7, lr}
    1272:	4647      	mov	r7, r8
    1274:	b480      	push	{r7}
    1276:	1c0e      	adds	r6, r1, #0
    1278:	1c15      	adds	r5, r2, #0
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    127a:	3801      	subs	r0, #1
    127c:	2802      	cmp	r0, #2
    127e:	d810      	bhi.n	12a2 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    1280:	2a00      	cmp	r2, #0
    1282:	d011      	beq.n	12a8 <_write+0x38>
    1284:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    1286:	4b0d      	ldr	r3, [pc, #52]	; (12bc <_write+0x4c>)
    1288:	4698      	mov	r8, r3
    128a:	4f0d      	ldr	r7, [pc, #52]	; (12c0 <_write+0x50>)
    128c:	4643      	mov	r3, r8
    128e:	6818      	ldr	r0, [r3, #0]
    1290:	5d31      	ldrb	r1, [r6, r4]
    1292:	683b      	ldr	r3, [r7, #0]
    1294:	4798      	blx	r3
    1296:	2800      	cmp	r0, #0
    1298:	db08      	blt.n	12ac <_write+0x3c>
			return -1;
		}
		++nChars;
    129a:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
    129c:	42a5      	cmp	r5, r4
    129e:	d1f5      	bne.n	128c <_write+0x1c>
    12a0:	e007      	b.n	12b2 <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
    12a2:	2001      	movs	r0, #1
    12a4:	4240      	negs	r0, r0
    12a6:	e005      	b.n	12b4 <_write+0x44>
	}

	for (; len != 0; --len) {
    12a8:	2000      	movs	r0, #0
    12aa:	e003      	b.n	12b4 <_write+0x44>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
    12ac:	2001      	movs	r0, #1
    12ae:	4240      	negs	r0, r0
    12b0:	e000      	b.n	12b4 <_write+0x44>
		}
		++nChars;
    12b2:	1c20      	adds	r0, r4, #0
	}
	return nChars;
}
    12b4:	bc04      	pop	{r2}
    12b6:	4690      	mov	r8, r2
    12b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    12ba:	46c0      	nop			; (mov r8, r8)
    12bc:	20000134 	.word	0x20000134
    12c0:	20000130 	.word	0x20000130

000012c4 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    12c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    12c6:	465f      	mov	r7, fp
    12c8:	4656      	mov	r6, sl
    12ca:	464d      	mov	r5, r9
    12cc:	4644      	mov	r4, r8
    12ce:	b4f0      	push	{r4, r5, r6, r7}
    12d0:	b091      	sub	sp, #68	; 0x44
    12d2:	1c05      	adds	r5, r0, #0
    12d4:	1c0c      	adds	r4, r1, #0
    12d6:	1c16      	adds	r6, r2, #0
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    12d8:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    12da:	1c08      	adds	r0, r1, #0
    12dc:	4bad      	ldr	r3, [pc, #692]	; (1594 <usart_init+0x2d0>)
    12de:	4798      	blx	r3
    12e0:	1c02      	adds	r2, r0, #0
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    12e2:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    12e4:	2005      	movs	r0, #5
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    12e6:	07d9      	lsls	r1, r3, #31
    12e8:	d500      	bpl.n	12ec <usart_init+0x28>
    12ea:	e14b      	b.n	1584 <usart_init+0x2c0>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    12ec:	6823      	ldr	r3, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    12ee:	201c      	movs	r0, #28
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    12f0:	079f      	lsls	r7, r3, #30
    12f2:	d500      	bpl.n	12f6 <usart_init+0x32>
    12f4:	e146      	b.n	1584 <usart_init+0x2c0>
    12f6:	4ba8      	ldr	r3, [pc, #672]	; (1598 <usart_init+0x2d4>)
    12f8:	6a18      	ldr	r0, [r3, #32]

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
#if (SAML21)
	uint32_t pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    12fa:	1c91      	adds	r1, r2, #2
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
	}

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    12fc:	2701      	movs	r7, #1
    12fe:	408f      	lsls	r7, r1
    1300:	1c39      	adds	r1, r7, #0
    1302:	4301      	orrs	r1, r0
    1304:	6219      	str	r1, [r3, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    1306:	a90f      	add	r1, sp, #60	; 0x3c
    1308:	272d      	movs	r7, #45	; 0x2d
    130a:	5df3      	ldrb	r3, [r6, r7]
    130c:	700b      	strb	r3, [r1, #0]
#if (SAML21)
	uint32_t pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
#else
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
#endif
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    130e:	3214      	adds	r2, #20

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    1310:	b2d2      	uxtb	r2, r2
    1312:	4690      	mov	r8, r2
    1314:	1c10      	adds	r0, r2, #0
    1316:	4ba1      	ldr	r3, [pc, #644]	; (159c <usart_init+0x2d8>)
    1318:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    131a:	4640      	mov	r0, r8
    131c:	4ba0      	ldr	r3, [pc, #640]	; (15a0 <usart_init+0x2dc>)
    131e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    1320:	5df0      	ldrb	r0, [r6, r7]
    1322:	2100      	movs	r1, #0
    1324:	4b9f      	ldr	r3, [pc, #636]	; (15a4 <usart_init+0x2e0>)
    1326:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    1328:	7af3      	ldrb	r3, [r6, #11]
    132a:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    132c:	2324      	movs	r3, #36	; 0x24
    132e:	5cf3      	ldrb	r3, [r6, r3]
    1330:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    1332:	2325      	movs	r3, #37	; 0x25
    1334:	5cf3      	ldrb	r3, [r6, r3]
    1336:	71eb      	strb	r3, [r5, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    1338:	7ef3      	ldrb	r3, [r6, #27]
    133a:	722b      	strb	r3, [r5, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    133c:	7f33      	ldrb	r3, [r6, #28]
    133e:	726b      	strb	r3, [r5, #9]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1340:	6829      	ldr	r1, [r5, #0]
    1342:	4688      	mov	r8, r1

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    1344:	1c08      	adds	r0, r1, #0
    1346:	4b93      	ldr	r3, [pc, #588]	; (1594 <usart_init+0x2d0>)
    1348:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    134a:	3014      	adds	r0, #20

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;
    134c:	2200      	movs	r2, #0
    134e:	466b      	mov	r3, sp
    1350:	84da      	strh	r2, [r3, #38]	; 0x26

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    1352:	8a32      	ldrh	r2, [r6, #16]
    1354:	9202      	str	r2, [sp, #8]
    1356:	2380      	movs	r3, #128	; 0x80
    1358:	01db      	lsls	r3, r3, #7
    135a:	429a      	cmp	r2, r3
    135c:	d021      	beq.n	13a2 <usart_init+0xde>
    135e:	2380      	movs	r3, #128	; 0x80
    1360:	01db      	lsls	r3, r3, #7
    1362:	429a      	cmp	r2, r3
    1364:	d804      	bhi.n	1370 <usart_init+0xac>
    1366:	2380      	movs	r3, #128	; 0x80
    1368:	019b      	lsls	r3, r3, #6
    136a:	429a      	cmp	r2, r3
    136c:	d011      	beq.n	1392 <usart_init+0xce>
    136e:	e008      	b.n	1382 <usart_init+0xbe>
    1370:	23c0      	movs	r3, #192	; 0xc0
    1372:	01db      	lsls	r3, r3, #7
    1374:	9f02      	ldr	r7, [sp, #8]
    1376:	429f      	cmp	r7, r3
    1378:	d00f      	beq.n	139a <usart_init+0xd6>
    137a:	2380      	movs	r3, #128	; 0x80
    137c:	021b      	lsls	r3, r3, #8
    137e:	429f      	cmp	r7, r3
    1380:	d003      	beq.n	138a <usart_init+0xc6>
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1382:	2710      	movs	r7, #16
    1384:	9706      	str	r7, [sp, #24]
	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    1386:	2700      	movs	r7, #0
    1388:	e00e      	b.n	13a8 <usart_init+0xe4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    138a:	2703      	movs	r7, #3
    138c:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
			break;
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    138e:	2700      	movs	r7, #0
    1390:	e00a      	b.n	13a8 <usart_init+0xe4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    1392:	2710      	movs	r7, #16
    1394:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
			break;
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    1396:	2701      	movs	r7, #1
    1398:	e006      	b.n	13a8 <usart_init+0xe4>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    139a:	2708      	movs	r7, #8
    139c:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    139e:	2701      	movs	r7, #1
    13a0:	e002      	b.n	13a8 <usart_init+0xe4>
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    13a2:	2708      	movs	r7, #8
    13a4:	9706      	str	r7, [sp, #24]
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
			break;
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    13a6:	2700      	movs	r7, #0
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    13a8:	6831      	ldr	r1, [r6, #0]
    13aa:	9103      	str	r1, [sp, #12]
		(uint32_t)config->mux_setting |
    13ac:	68f2      	ldr	r2, [r6, #12]
    13ae:	4691      	mov	r9, r2
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    13b0:	6973      	ldr	r3, [r6, #20]
    13b2:	9304      	str	r3, [sp, #16]
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    13b4:	7e31      	ldrb	r1, [r6, #24]
    13b6:	468a      	mov	sl, r1
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    13b8:	2326      	movs	r3, #38	; 0x26
    13ba:	5cf3      	ldrb	r3, [r6, r3]
    13bc:	469b      	mov	fp, r3

	enum status_code status_code = STATUS_OK;

	/* Get baud value from mode and clock */
	switch (config->transfer_mode)
    13be:	6873      	ldr	r3, [r6, #4]
    13c0:	2b00      	cmp	r3, #0
    13c2:	d013      	beq.n	13ec <usart_init+0x128>
    13c4:	2280      	movs	r2, #128	; 0x80
    13c6:	0552      	lsls	r2, r2, #21
    13c8:	4293      	cmp	r3, r2
    13ca:	d12e      	bne.n	142a <usart_init+0x166>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    13cc:	2327      	movs	r3, #39	; 0x27
    13ce:	5cf3      	ldrb	r3, [r6, r3]
    13d0:	2b00      	cmp	r3, #0
    13d2:	d12e      	bne.n	1432 <usart_init+0x16e>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    13d4:	6a37      	ldr	r7, [r6, #32]
    13d6:	b2c0      	uxtb	r0, r0
    13d8:	4b73      	ldr	r3, [pc, #460]	; (15a8 <usart_init+0x2e4>)
    13da:	4798      	blx	r3
    13dc:	1c01      	adds	r1, r0, #0
    13de:	1c38      	adds	r0, r7, #0
    13e0:	466a      	mov	r2, sp
    13e2:	3226      	adds	r2, #38	; 0x26
    13e4:	4b71      	ldr	r3, [pc, #452]	; (15ac <usart_init+0x2e8>)
    13e6:	4798      	blx	r3
    13e8:	1c03      	adds	r3, r0, #0
    13ea:	e01f      	b.n	142c <usart_init+0x168>
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    13ec:	2327      	movs	r3, #39	; 0x27
    13ee:	5cf3      	ldrb	r3, [r6, r3]
    13f0:	2b00      	cmp	r3, #0
    13f2:	d00a      	beq.n	140a <usart_init+0x146>
				status_code =
    13f4:	9a06      	ldr	r2, [sp, #24]
    13f6:	9200      	str	r2, [sp, #0]
    13f8:	6a30      	ldr	r0, [r6, #32]
    13fa:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    13fc:	466a      	mov	r2, sp
    13fe:	3226      	adds	r2, #38	; 0x26
    1400:	1c3b      	adds	r3, r7, #0
    1402:	4f6b      	ldr	r7, [pc, #428]	; (15b0 <usart_init+0x2ec>)
    1404:	47b8      	blx	r7
    1406:	1c03      	adds	r3, r0, #0
    1408:	e010      	b.n	142c <usart_init+0x168>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    140a:	6a31      	ldr	r1, [r6, #32]
    140c:	9107      	str	r1, [sp, #28]
    140e:	b2c0      	uxtb	r0, r0
    1410:	4b65      	ldr	r3, [pc, #404]	; (15a8 <usart_init+0x2e4>)
    1412:	4798      	blx	r3
    1414:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
    1416:	9a06      	ldr	r2, [sp, #24]
    1418:	9200      	str	r2, [sp, #0]
    141a:	9807      	ldr	r0, [sp, #28]
    141c:	466a      	mov	r2, sp
    141e:	3226      	adds	r2, #38	; 0x26
    1420:	1c3b      	adds	r3, r7, #0
    1422:	4f63      	ldr	r7, [pc, #396]	; (15b0 <usart_init+0x2ec>)
    1424:	47b8      	blx	r7
    1426:	1c03      	adds	r3, r0, #0
    1428:	e000      	b.n	142c <usart_init+0x168>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
    142a:	2300      	movs	r3, #0
    142c:	1e18      	subs	r0, r3, #0

			break;
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    142e:	d000      	beq.n	1432 <usart_init+0x16e>
    1430:	e0a8      	b.n	1584 <usart_init+0x2c0>
		/* Abort */
		return status_code;
	}

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    1432:	7e73      	ldrb	r3, [r6, #25]
    1434:	2b00      	cmp	r3, #0
    1436:	d002      	beq.n	143e <usart_init+0x17a>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    1438:	7eb3      	ldrb	r3, [r6, #26]
    143a:	4641      	mov	r1, r8
    143c:	738b      	strb	r3, [r1, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    143e:	682a      	ldr	r2, [r5, #0]
    1440:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1442:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    1444:	2b00      	cmp	r3, #0
    1446:	d1fc      	bne.n	1442 <usart_init+0x17e>
    1448:	9702      	str	r7, [sp, #8]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    144a:	466b      	mov	r3, sp
    144c:	3326      	adds	r3, #38	; 0x26
    144e:	881b      	ldrh	r3, [r3, #0]
    1450:	4642      	mov	r2, r8
    1452:	8193      	strh	r3, [r2, #12]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    1454:	464b      	mov	r3, r9
    1456:	9f03      	ldr	r7, [sp, #12]
    1458:	433b      	orrs	r3, r7
		(uint32_t)config->mux_setting |
    145a:	9f04      	ldr	r7, [sp, #16]
    145c:	433b      	orrs	r3, r7
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    145e:	6871      	ldr	r1, [r6, #4]
    1460:	430b      	orrs	r3, r1
		config->sample_rate |
    1462:	9f02      	ldr	r7, [sp, #8]
    1464:	431f      	orrs	r7, r3
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    1466:	4652      	mov	r2, sl
    1468:	0213      	lsls	r3, r2, #8
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    146a:	431f      	orrs	r7, r3
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    146c:	4659      	mov	r1, fp
    146e:	074b      	lsls	r3, r1, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= config->transfer_mode;
    1470:	431f      	orrs	r7, r3

	if (config->use_external_clock == false) {
    1472:	2327      	movs	r3, #39	; 0x27
    1474:	5cf3      	ldrb	r3, [r6, r3]
    1476:	2b00      	cmp	r3, #0
    1478:	d101      	bne.n	147e <usart_init+0x1ba>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    147a:	2304      	movs	r3, #4
    147c:	431f      	orrs	r7, r3
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    147e:	7e71      	ldrb	r1, [r6, #25]
    1480:	0289      	lsls	r1, r1, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1482:	7f33      	ldrb	r3, [r6, #28]
    1484:	025b      	lsls	r3, r3, #9
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    1486:	4319      	orrs	r1, r3
    1488:	7af2      	ldrb	r2, [r6, #11]
    148a:	7ab3      	ldrb	r3, [r6, #10]
    148c:	4313      	orrs	r3, r2
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    148e:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    1490:	7f73      	ldrb	r3, [r6, #29]
    1492:	021b      	lsls	r3, r3, #8
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    1494:	4319      	orrs	r1, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    1496:	2324      	movs	r3, #36	; 0x24
    1498:	5cf3      	ldrb	r3, [r6, r3]
    149a:	045b      	lsls	r3, r3, #17
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    149c:	4319      	orrs	r1, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    149e:	2325      	movs	r3, #37	; 0x25
    14a0:	5cf3      	ldrb	r3, [r6, r3]
    14a2:	041b      	lsls	r3, r3, #16
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE(0x0);
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
    14a4:	4319      	orrs	r1, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);

	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    14a6:	8933      	ldrh	r3, [r6, #8]
    14a8:	2bff      	cmp	r3, #255	; 0xff
    14aa:	d00b      	beq.n	14c4 <usart_init+0x200>
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    14ac:	7ef2      	ldrb	r2, [r6, #27]
    14ae:	2a00      	cmp	r2, #0
    14b0:	d003      	beq.n	14ba <usart_init+0x1f6>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x5);
    14b2:	22a0      	movs	r2, #160	; 0xa0
    14b4:	04d2      	lsls	r2, r2, #19
    14b6:	4317      	orrs	r7, r2
    14b8:	e002      	b.n	14c0 <usart_init+0x1fc>
		} else {
			ctrla |= SERCOM_USART_CTRLA_FORM(1);
    14ba:	2280      	movs	r2, #128	; 0x80
    14bc:	0452      	lsls	r2, r2, #17
    14be:	4317      	orrs	r7, r2
		}
#else
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
#endif
		ctrlb |= config->parity;
    14c0:	4319      	orrs	r1, r3
    14c2:	e005      	b.n	14d0 <usart_init+0x20c>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    14c4:	7ef3      	ldrb	r3, [r6, #27]
    14c6:	2b00      	cmp	r3, #0
    14c8:	d002      	beq.n	14d0 <usart_init+0x20c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    14ca:	2380      	movs	r3, #128	; 0x80
    14cc:	04db      	lsls	r3, r3, #19
    14ce:	431f      	orrs	r7, r3
		ctrla |= SERCOM_USART_CTRLA_FORM(0);
#endif
	}

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    14d0:	232c      	movs	r3, #44	; 0x2c
    14d2:	5cf3      	ldrb	r3, [r6, r3]
    14d4:	2b00      	cmp	r3, #0
    14d6:	d103      	bne.n	14e0 <usart_init+0x21c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    14d8:	4b36      	ldr	r3, [pc, #216]	; (15b4 <usart_init+0x2f0>)
    14da:	789b      	ldrb	r3, [r3, #2]
    14dc:	079a      	lsls	r2, r3, #30
    14de:	d501      	bpl.n	14e4 <usart_init+0x220>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    14e0:	2380      	movs	r3, #128	; 0x80
    14e2:	431f      	orrs	r7, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    14e4:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    14e6:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    14e8:	2b00      	cmp	r3, #0
    14ea:	d1fc      	bne.n	14e6 <usart_init+0x222>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    14ec:	4643      	mov	r3, r8
    14ee:	6059      	str	r1, [r3, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    14f0:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    14f2:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    14f4:	2b00      	cmp	r3, #0
    14f6:	d1fc      	bne.n	14f2 <usart_init+0x22e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    14f8:	4641      	mov	r1, r8
    14fa:	600f      	str	r7, [r1, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    14fc:	ab0e      	add	r3, sp, #56	; 0x38
    14fe:	2280      	movs	r2, #128	; 0x80
    1500:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    1502:	2200      	movs	r2, #0
    1504:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    1506:	70da      	strb	r2, [r3, #3]
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    1508:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
    150a:	6b32      	ldr	r2, [r6, #48]	; 0x30
    150c:	920a      	str	r2, [sp, #40]	; 0x28
    150e:	6b73      	ldr	r3, [r6, #52]	; 0x34
    1510:	930b      	str	r3, [sp, #44]	; 0x2c
    1512:	6bb7      	ldr	r7, [r6, #56]	; 0x38
    1514:	970c      	str	r7, [sp, #48]	; 0x30
    1516:	6bf6      	ldr	r6, [r6, #60]	; 0x3c
    1518:	960d      	str	r6, [sp, #52]	; 0x34
    151a:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    151c:	ae0e      	add	r6, sp, #56	; 0x38
    151e:	b2f9      	uxtb	r1, r7
    1520:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
    1522:	aa0a      	add	r2, sp, #40	; 0x28
    1524:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
    1526:	2800      	cmp	r0, #0
    1528:	d102      	bne.n	1530 <usart_init+0x26c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    152a:	1c20      	adds	r0, r4, #0
    152c:	4a22      	ldr	r2, [pc, #136]	; (15b8 <usart_init+0x2f4>)
    152e:	4790      	blx	r2
		}

		if (current_pinmux != PINMUX_UNUSED) {
    1530:	1c43      	adds	r3, r0, #1
    1532:	d005      	beq.n	1540 <usart_init+0x27c>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    1534:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    1536:	0c00      	lsrs	r0, r0, #16
    1538:	b2c0      	uxtb	r0, r0
    153a:	1c31      	adds	r1, r6, #0
    153c:	4a1f      	ldr	r2, [pc, #124]	; (15bc <usart_init+0x2f8>)
    153e:	4790      	blx	r2
    1540:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    1542:	2f04      	cmp	r7, #4
    1544:	d1eb      	bne.n	151e <usart_init+0x25a>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
    1546:	2300      	movs	r3, #0
    1548:	60eb      	str	r3, [r5, #12]
    154a:	612b      	str	r3, [r5, #16]
    154c:	616b      	str	r3, [r5, #20]
    154e:	61ab      	str	r3, [r5, #24]
    1550:	61eb      	str	r3, [r5, #28]
    1552:	622b      	str	r3, [r5, #32]
	}

	module->tx_buffer_ptr              = NULL;
    1554:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    1556:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    1558:	2200      	movs	r2, #0
    155a:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    155c:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    155e:	2330      	movs	r3, #48	; 0x30
    1560:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    1562:	2331      	movs	r3, #49	; 0x31
    1564:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    1566:	2332      	movs	r3, #50	; 0x32
    1568:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    156a:	2333      	movs	r3, #51	; 0x33
    156c:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    156e:	6828      	ldr	r0, [r5, #0]
    1570:	4b08      	ldr	r3, [pc, #32]	; (1594 <usart_init+0x2d0>)
    1572:	4798      	blx	r3
    1574:	1c04      	adds	r4, r0, #0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    1576:	4912      	ldr	r1, [pc, #72]	; (15c0 <usart_init+0x2fc>)
    1578:	4b12      	ldr	r3, [pc, #72]	; (15c4 <usart_init+0x300>)
    157a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    157c:	00a4      	lsls	r4, r4, #2
    157e:	4b12      	ldr	r3, [pc, #72]	; (15c8 <usart_init+0x304>)
    1580:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
    1582:	2000      	movs	r0, #0
}
    1584:	b011      	add	sp, #68	; 0x44
    1586:	bc3c      	pop	{r2, r3, r4, r5}
    1588:	4690      	mov	r8, r2
    158a:	4699      	mov	r9, r3
    158c:	46a2      	mov	sl, r4
    158e:	46ab      	mov	fp, r5
    1590:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1592:	46c0      	nop			; (mov r8, r8)
    1594:	000011f1 	.word	0x000011f1
    1598:	40000400 	.word	0x40000400
    159c:	00001e15 	.word	0x00001e15
    15a0:	00001d89 	.word	0x00001d89
    15a4:	00001019 	.word	0x00001019
    15a8:	00001e31 	.word	0x00001e31
    15ac:	00000e3d 	.word	0x00000e3d
    15b0:	00000e69 	.word	0x00000e69
    15b4:	41002000 	.word	0x41002000
    15b8:	00001069 	.word	0x00001069
    15bc:	00001ef1 	.word	0x00001ef1
    15c0:	00001671 	.word	0x00001671
    15c4:	00001811 	.word	0x00001811
    15c8:	20000138 	.word	0x20000138

000015cc <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    15cc:	b510      	push	{r4, lr}
    15ce:	1c02      	adds	r2, r0, #0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    15d0:	6803      	ldr	r3, [r0, #0]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    15d2:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
    15d4:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    15d6:	2c00      	cmp	r4, #0
    15d8:	d00d      	beq.n	15f6 <usart_write_wait+0x2a>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    15da:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
    15dc:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    15de:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    15e0:	2a00      	cmp	r2, #0
    15e2:	d108      	bne.n	15f6 <usart_write_wait+0x2a>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    15e4:	69da      	ldr	r2, [r3, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    15e6:	2a00      	cmp	r2, #0
    15e8:	d1fc      	bne.n	15e4 <usart_write_wait+0x18>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    15ea:	8519      	strh	r1, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    15ec:	2102      	movs	r1, #2
    15ee:	7e1a      	ldrb	r2, [r3, #24]
    15f0:	420a      	tst	r2, r1
    15f2:	d0fc      	beq.n	15ee <usart_write_wait+0x22>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    15f4:	2000      	movs	r0, #0
}
    15f6:	bd10      	pop	{r4, pc}

000015f8 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    15f8:	b510      	push	{r4, lr}
    15fa:	1c03      	adds	r3, r0, #0

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    15fc:	6804      	ldr	r4, [r0, #0]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    15fe:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    1600:	201c      	movs	r0, #28

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    1602:	2a00      	cmp	r2, #0
    1604:	d033      	beq.n	166e <usart_read_wait+0x76>
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    1606:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    1608:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    160a:	2005      	movs	r0, #5
		return STATUS_ERR_DENIED;
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    160c:	2b00      	cmp	r3, #0
    160e:	d12e      	bne.n	166e <usart_read_wait+0x76>
		return STATUS_BUSY;
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    1610:	7e23      	ldrb	r3, [r4, #24]
    1612:	075a      	lsls	r2, r3, #29
    1614:	d52b      	bpl.n	166e <usart_read_wait+0x76>
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    1616:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    1618:	2b00      	cmp	r3, #0
    161a:	d1fc      	bne.n	1616 <usart_read_wait+0x1e>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    161c:	8b63      	ldrh	r3, [r4, #26]
    161e:	b2db      	uxtb	r3, r3

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    1620:	069a      	lsls	r2, r3, #26
    1622:	d021      	beq.n	1668 <usart_read_wait+0x70>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    1624:	079a      	lsls	r2, r3, #30
    1626:	d503      	bpl.n	1630 <usart_read_wait+0x38>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1628:	2302      	movs	r3, #2
    162a:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_FORMAT;
    162c:	201a      	movs	r0, #26
    162e:	e01e      	b.n	166e <usart_read_wait+0x76>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1630:	075a      	lsls	r2, r3, #29
    1632:	d503      	bpl.n	163c <usart_read_wait+0x44>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1634:	2304      	movs	r3, #4
    1636:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_OVERFLOW;
    1638:	201e      	movs	r0, #30
    163a:	e018      	b.n	166e <usart_read_wait+0x76>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    163c:	07da      	lsls	r2, r3, #31
    163e:	d503      	bpl.n	1648 <usart_read_wait+0x50>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1640:	2301      	movs	r3, #1
    1642:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_BAD_DATA;
    1644:	2013      	movs	r0, #19
    1646:	e012      	b.n	166e <usart_read_wait+0x76>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    1648:	06da      	lsls	r2, r3, #27
    164a:	d505      	bpl.n	1658 <usart_read_wait+0x60>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    164c:	8b62      	ldrh	r2, [r4, #26]
    164e:	2310      	movs	r3, #16
    1650:	4313      	orrs	r3, r2
    1652:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PROTOCOL;
    1654:	2042      	movs	r0, #66	; 0x42
    1656:	e00a      	b.n	166e <usart_read_wait+0x76>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    1658:	069a      	lsls	r2, r3, #26
    165a:	d505      	bpl.n	1668 <usart_read_wait+0x70>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    165c:	8b62      	ldrh	r2, [r4, #26]
    165e:	2320      	movs	r3, #32
    1660:	4313      	orrs	r3, r2
    1662:	8363      	strh	r3, [r4, #26]

			return STATUS_ERR_PACKET_COLLISION;
    1664:	2041      	movs	r0, #65	; 0x41
    1666:	e002      	b.n	166e <usart_read_wait+0x76>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    1668:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    166a:	800b      	strh	r3, [r1, #0]

	return STATUS_OK;
    166c:	2000      	movs	r0, #0
}
    166e:	bd10      	pop	{r4, pc}

00001670 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    1670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    1672:	0080      	lsls	r0, r0, #2
    1674:	4b64      	ldr	r3, [pc, #400]	; (1808 <_usart_interrupt_handler+0x198>)
    1676:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    1678:	682c      	ldr	r4, [r5, #0]
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    167a:	69e3      	ldr	r3, [r4, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    167c:	2b00      	cmp	r3, #0
    167e:	d1fc      	bne.n	167a <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    1680:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    1682:	7da6      	ldrb	r6, [r4, #22]
    1684:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
			module->callback_enable_mask;
    1686:	2331      	movs	r3, #49	; 0x31
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
    1688:	5ceb      	ldrb	r3, [r5, r3]
    168a:	2230      	movs	r2, #48	; 0x30
    168c:	5caf      	ldrb	r7, [r5, r2]
    168e:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    1690:	07f1      	lsls	r1, r6, #31
    1692:	d520      	bpl.n	16d6 <_usart_interrupt_handler+0x66>
		if (module->remaining_tx_buffer_length) {
    1694:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    1696:	b29b      	uxth	r3, r3
    1698:	2b00      	cmp	r3, #0
    169a:	d01a      	beq.n	16d2 <_usart_interrupt_handler+0x62>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    169c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    169e:	781a      	ldrb	r2, [r3, #0]
    16a0:	b2d2      	uxtb	r2, r2
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    16a2:	1c59      	adds	r1, r3, #1
    16a4:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    16a6:	7969      	ldrb	r1, [r5, #5]
    16a8:	2901      	cmp	r1, #1
    16aa:	d104      	bne.n	16b6 <_usart_interrupt_handler+0x46>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    16ac:	7859      	ldrb	r1, [r3, #1]
    16ae:	0209      	lsls	r1, r1, #8
    16b0:	430a      	orrs	r2, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    16b2:	3302      	adds	r3, #2
    16b4:	62ab      	str	r3, [r5, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    16b6:	05d3      	lsls	r3, r2, #23
    16b8:	0ddb      	lsrs	r3, r3, #23
    16ba:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    16bc:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    16be:	3b01      	subs	r3, #1
    16c0:	b29b      	uxth	r3, r3
    16c2:	85eb      	strh	r3, [r5, #46]	; 0x2e
    16c4:	2b00      	cmp	r3, #0
    16c6:	d106      	bne.n	16d6 <_usart_interrupt_handler+0x66>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    16c8:	2301      	movs	r3, #1
    16ca:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    16cc:	2302      	movs	r3, #2
    16ce:	75a3      	strb	r3, [r4, #22]
    16d0:	e001      	b.n	16d6 <_usart_interrupt_handler+0x66>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    16d2:	2301      	movs	r3, #1
    16d4:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    16d6:	07b2      	lsls	r2, r6, #30
    16d8:	d509      	bpl.n	16ee <_usart_interrupt_handler+0x7e>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    16da:	2302      	movs	r3, #2
    16dc:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    16de:	2200      	movs	r2, #0
    16e0:	2333      	movs	r3, #51	; 0x33
    16e2:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    16e4:	07fb      	lsls	r3, r7, #31
    16e6:	d502      	bpl.n	16ee <_usart_interrupt_handler+0x7e>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    16e8:	1c28      	adds	r0, r5, #0
    16ea:	68e9      	ldr	r1, [r5, #12]
    16ec:	4788      	blx	r1

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    16ee:	0772      	lsls	r2, r6, #29
    16f0:	d56a      	bpl.n	17c8 <_usart_interrupt_handler+0x158>

		if (module->remaining_rx_buffer_length) {
    16f2:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    16f4:	b29b      	uxth	r3, r3
    16f6:	2b00      	cmp	r3, #0
    16f8:	d064      	beq.n	17c4 <_usart_interrupt_handler+0x154>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    16fa:	8b63      	ldrh	r3, [r4, #26]
    16fc:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    16fe:	0719      	lsls	r1, r3, #28
    1700:	d402      	bmi.n	1708 <_usart_interrupt_handler+0x98>

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {

		if (module->remaining_rx_buffer_length) {
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1702:	223f      	movs	r2, #63	; 0x3f
    1704:	4013      	ands	r3, r2
    1706:	e001      	b.n	170c <_usart_interrupt_handler+0x9c>
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
				error_code &= ~SERCOM_USART_STATUS_CTS;
    1708:	2237      	movs	r2, #55	; 0x37
    170a:	4013      	ands	r3, r2
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    170c:	2b00      	cmp	r3, #0
    170e:	d037      	beq.n	1780 <_usart_interrupt_handler+0x110>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    1710:	079a      	lsls	r2, r3, #30
    1712:	d507      	bpl.n	1724 <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    1714:	221a      	movs	r2, #26
    1716:	2332      	movs	r3, #50	; 0x32
    1718:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
    171a:	8b62      	ldrh	r2, [r4, #26]
    171c:	2302      	movs	r3, #2
    171e:	4313      	orrs	r3, r2
    1720:	8363      	strh	r3, [r4, #26]
    1722:	e027      	b.n	1774 <_usart_interrupt_handler+0x104>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    1724:	0759      	lsls	r1, r3, #29
    1726:	d507      	bpl.n	1738 <_usart_interrupt_handler+0xc8>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    1728:	221e      	movs	r2, #30
    172a:	2332      	movs	r3, #50	; 0x32
    172c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
    172e:	8b62      	ldrh	r2, [r4, #26]
    1730:	2304      	movs	r3, #4
    1732:	4313      	orrs	r3, r2
    1734:	8363      	strh	r3, [r4, #26]
    1736:	e01d      	b.n	1774 <_usart_interrupt_handler+0x104>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    1738:	07da      	lsls	r2, r3, #31
    173a:	d507      	bpl.n	174c <_usart_interrupt_handler+0xdc>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    173c:	2213      	movs	r2, #19
    173e:	2332      	movs	r3, #50	; 0x32
    1740:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
    1742:	8b62      	ldrh	r2, [r4, #26]
    1744:	2301      	movs	r3, #1
    1746:	4313      	orrs	r3, r2
    1748:	8363      	strh	r3, [r4, #26]
    174a:	e013      	b.n	1774 <_usart_interrupt_handler+0x104>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    174c:	06d9      	lsls	r1, r3, #27
    174e:	d507      	bpl.n	1760 <_usart_interrupt_handler+0xf0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    1750:	2242      	movs	r2, #66	; 0x42
    1752:	2332      	movs	r3, #50	; 0x32
    1754:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_ISF;
    1756:	8b62      	ldrh	r2, [r4, #26]
    1758:	2310      	movs	r3, #16
    175a:	4313      	orrs	r3, r2
    175c:	8363      	strh	r3, [r4, #26]
    175e:	e009      	b.n	1774 <_usart_interrupt_handler+0x104>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    1760:	2220      	movs	r2, #32
    1762:	421a      	tst	r2, r3
    1764:	d006      	beq.n	1774 <_usart_interrupt_handler+0x104>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    1766:	2241      	movs	r2, #65	; 0x41
    1768:	2332      	movs	r3, #50	; 0x32
    176a:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
    176c:	8b62      	ldrh	r2, [r4, #26]
    176e:	2320      	movs	r3, #32
    1770:	4313      	orrs	r3, r2
    1772:	8363      	strh	r3, [r4, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1774:	077a      	lsls	r2, r7, #29
    1776:	d527      	bpl.n	17c8 <_usart_interrupt_handler+0x158>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    1778:	1c28      	adds	r0, r5, #0
    177a:	696b      	ldr	r3, [r5, #20]
    177c:	4798      	blx	r3
    177e:	e023      	b.n	17c8 <_usart_interrupt_handler+0x158>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    1780:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    1782:	05d2      	lsls	r2, r2, #23
    1784:	0dd2      	lsrs	r2, r2, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1786:	b2d3      	uxtb	r3, r2
    1788:	6a69      	ldr	r1, [r5, #36]	; 0x24
    178a:	700b      	strb	r3, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    178c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    178e:	1c59      	adds	r1, r3, #1
    1790:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    1792:	7969      	ldrb	r1, [r5, #5]
    1794:	2901      	cmp	r1, #1
    1796:	d104      	bne.n	17a2 <_usart_interrupt_handler+0x132>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    1798:	0a12      	lsrs	r2, r2, #8
    179a:	705a      	strb	r2, [r3, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    179c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    179e:	3301      	adds	r3, #1
    17a0:	626b      	str	r3, [r5, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    17a2:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    17a4:	3b01      	subs	r3, #1
    17a6:	b29b      	uxth	r3, r3
    17a8:	85ab      	strh	r3, [r5, #44]	; 0x2c
    17aa:	2b00      	cmp	r3, #0
    17ac:	d10c      	bne.n	17c8 <_usart_interrupt_handler+0x158>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    17ae:	2304      	movs	r3, #4
    17b0:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    17b2:	2200      	movs	r2, #0
    17b4:	2332      	movs	r3, #50	; 0x32
    17b6:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    17b8:	07ba      	lsls	r2, r7, #30
    17ba:	d505      	bpl.n	17c8 <_usart_interrupt_handler+0x158>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    17bc:	1c28      	adds	r0, r5, #0
    17be:	692b      	ldr	r3, [r5, #16]
    17c0:	4798      	blx	r3
    17c2:	e001      	b.n	17c8 <_usart_interrupt_handler+0x158>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    17c4:	2304      	movs	r3, #4
    17c6:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    17c8:	06f1      	lsls	r1, r6, #27
    17ca:	d507      	bpl.n	17dc <_usart_interrupt_handler+0x16c>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    17cc:	2310      	movs	r3, #16
    17ce:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    17d0:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    17d2:	06fa      	lsls	r2, r7, #27
    17d4:	d502      	bpl.n	17dc <_usart_interrupt_handler+0x16c>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    17d6:	1c28      	adds	r0, r5, #0
    17d8:	69eb      	ldr	r3, [r5, #28]
    17da:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    17dc:	06b1      	lsls	r1, r6, #26
    17de:	d507      	bpl.n	17f0 <_usart_interrupt_handler+0x180>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    17e0:	2320      	movs	r3, #32
    17e2:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    17e4:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    17e6:	073a      	lsls	r2, r7, #28
    17e8:	d502      	bpl.n	17f0 <_usart_interrupt_handler+0x180>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    17ea:	1c28      	adds	r0, r5, #0
    17ec:	69ab      	ldr	r3, [r5, #24]
    17ee:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    17f0:	0731      	lsls	r1, r6, #28
    17f2:	d507      	bpl.n	1804 <_usart_interrupt_handler+0x194>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    17f4:	2308      	movs	r3, #8
    17f6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    17f8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    17fa:	06ba      	lsls	r2, r7, #26
    17fc:	d502      	bpl.n	1804 <_usart_interrupt_handler+0x194>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    17fe:	6a2b      	ldr	r3, [r5, #32]
    1800:	1c28      	adds	r0, r5, #0
    1802:	4798      	blx	r3
		}
	}
#endif
}
    1804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1806:	46c0      	nop			; (mov r8, r8)
    1808:	20000138 	.word	0x20000138

0000180c <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    180c:	4770      	bx	lr
    180e:	46c0      	nop			; (mov r8, r8)

00001810 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    1810:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
    1812:	4b0a      	ldr	r3, [pc, #40]	; (183c <_sercom_set_handler+0x2c>)
    1814:	781b      	ldrb	r3, [r3, #0]
    1816:	2b00      	cmp	r3, #0
    1818:	d10c      	bne.n	1834 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    181a:	4f09      	ldr	r7, [pc, #36]	; (1840 <_sercom_set_handler+0x30>)
    181c:	4e09      	ldr	r6, [pc, #36]	; (1844 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    181e:	4d0a      	ldr	r5, [pc, #40]	; (1848 <_sercom_set_handler+0x38>)
    1820:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    1822:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    1824:	195a      	adds	r2, r3, r5
    1826:	6014      	str	r4, [r2, #0]
    1828:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    182a:	2b18      	cmp	r3, #24
    182c:	d1f9      	bne.n	1822 <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
    182e:	2201      	movs	r2, #1
    1830:	4b02      	ldr	r3, [pc, #8]	; (183c <_sercom_set_handler+0x2c>)
    1832:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler. */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    1834:	0080      	lsls	r0, r0, #2
    1836:	4b02      	ldr	r3, [pc, #8]	; (1840 <_sercom_set_handler+0x30>)
    1838:	50c1      	str	r1, [r0, r3]
}
    183a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    183c:	20000094 	.word	0x20000094
    1840:	20000098 	.word	0x20000098
    1844:	0000180d 	.word	0x0000180d
    1848:	20000138 	.word	0x20000138

0000184c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    184c:	b510      	push	{r4, lr}
    184e:	b082      	sub	sp, #8
    1850:	1c04      	adds	r4, r0, #0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1852:	4668      	mov	r0, sp
    1854:	4905      	ldr	r1, [pc, #20]	; (186c <_sercom_get_interrupt_vector+0x20>)
    1856:	2206      	movs	r2, #6
    1858:	4b05      	ldr	r3, [pc, #20]	; (1870 <_sercom_get_interrupt_vector+0x24>)
    185a:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    185c:	1c20      	adds	r0, r4, #0
    185e:	4b05      	ldr	r3, [pc, #20]	; (1874 <_sercom_get_interrupt_vector+0x28>)
    1860:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    1862:	466b      	mov	r3, sp
    1864:	5618      	ldrsb	r0, [r3, r0]
}
    1866:	b002      	add	sp, #8
    1868:	bd10      	pop	{r4, pc}
    186a:	46c0      	nop			; (mov r8, r8)
    186c:	00004070 	.word	0x00004070
    1870:	00002fb5 	.word	0x00002fb5
    1874:	000011f1 	.word	0x000011f1

00001878 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    1878:	b508      	push	{r3, lr}
    187a:	4b02      	ldr	r3, [pc, #8]	; (1884 <SERCOM0_Handler+0xc>)
    187c:	681b      	ldr	r3, [r3, #0]
    187e:	2000      	movs	r0, #0
    1880:	4798      	blx	r3
    1882:	bd08      	pop	{r3, pc}
    1884:	20000098 	.word	0x20000098

00001888 <SERCOM1_Handler>:
    1888:	b508      	push	{r3, lr}
    188a:	4b02      	ldr	r3, [pc, #8]	; (1894 <SERCOM1_Handler+0xc>)
    188c:	685b      	ldr	r3, [r3, #4]
    188e:	2001      	movs	r0, #1
    1890:	4798      	blx	r3
    1892:	bd08      	pop	{r3, pc}
    1894:	20000098 	.word	0x20000098

00001898 <SERCOM2_Handler>:
    1898:	b508      	push	{r3, lr}
    189a:	4b02      	ldr	r3, [pc, #8]	; (18a4 <SERCOM2_Handler+0xc>)
    189c:	689b      	ldr	r3, [r3, #8]
    189e:	2002      	movs	r0, #2
    18a0:	4798      	blx	r3
    18a2:	bd08      	pop	{r3, pc}
    18a4:	20000098 	.word	0x20000098

000018a8 <SERCOM3_Handler>:
    18a8:	b508      	push	{r3, lr}
    18aa:	4b02      	ldr	r3, [pc, #8]	; (18b4 <SERCOM3_Handler+0xc>)
    18ac:	68db      	ldr	r3, [r3, #12]
    18ae:	2003      	movs	r0, #3
    18b0:	4798      	blx	r3
    18b2:	bd08      	pop	{r3, pc}
    18b4:	20000098 	.word	0x20000098

000018b8 <SERCOM4_Handler>:
    18b8:	b508      	push	{r3, lr}
    18ba:	4b02      	ldr	r3, [pc, #8]	; (18c4 <SERCOM4_Handler+0xc>)
    18bc:	691b      	ldr	r3, [r3, #16]
    18be:	2004      	movs	r0, #4
    18c0:	4798      	blx	r3
    18c2:	bd08      	pop	{r3, pc}
    18c4:	20000098 	.word	0x20000098

000018c8 <SERCOM5_Handler>:
    18c8:	b508      	push	{r3, lr}
    18ca:	4b02      	ldr	r3, [pc, #8]	; (18d4 <SERCOM5_Handler+0xc>)
    18cc:	695b      	ldr	r3, [r3, #20]
    18ce:	2005      	movs	r0, #5
    18d0:	4798      	blx	r3
    18d2:	bd08      	pop	{r3, pc}
    18d4:	20000098 	.word	0x20000098

000018d8 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    18d8:	4b0c      	ldr	r3, [pc, #48]	; (190c <cpu_irq_enter_critical+0x34>)
    18da:	681b      	ldr	r3, [r3, #0]
    18dc:	2b00      	cmp	r3, #0
    18de:	d110      	bne.n	1902 <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    18e0:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    18e4:	2b00      	cmp	r3, #0
    18e6:	d109      	bne.n	18fc <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
    18e8:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    18ea:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    18ee:	2200      	movs	r2, #0
    18f0:	4b07      	ldr	r3, [pc, #28]	; (1910 <cpu_irq_enter_critical+0x38>)
    18f2:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    18f4:	2201      	movs	r2, #1
    18f6:	4b07      	ldr	r3, [pc, #28]	; (1914 <cpu_irq_enter_critical+0x3c>)
    18f8:	701a      	strb	r2, [r3, #0]
    18fa:	e002      	b.n	1902 <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    18fc:	2200      	movs	r2, #0
    18fe:	4b05      	ldr	r3, [pc, #20]	; (1914 <cpu_irq_enter_critical+0x3c>)
    1900:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1902:	4b02      	ldr	r3, [pc, #8]	; (190c <cpu_irq_enter_critical+0x34>)
    1904:	681a      	ldr	r2, [r3, #0]
    1906:	3201      	adds	r2, #1
    1908:	601a      	str	r2, [r3, #0]
}
    190a:	4770      	bx	lr
    190c:	200000b0 	.word	0x200000b0
    1910:	2000000c 	.word	0x2000000c
    1914:	200000b4 	.word	0x200000b4

00001918 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1918:	4b08      	ldr	r3, [pc, #32]	; (193c <cpu_irq_leave_critical+0x24>)
    191a:	681a      	ldr	r2, [r3, #0]
    191c:	3a01      	subs	r2, #1
    191e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1920:	681b      	ldr	r3, [r3, #0]
    1922:	2b00      	cmp	r3, #0
    1924:	d109      	bne.n	193a <cpu_irq_leave_critical+0x22>
    1926:	4b06      	ldr	r3, [pc, #24]	; (1940 <cpu_irq_leave_critical+0x28>)
    1928:	781b      	ldrb	r3, [r3, #0]
    192a:	2b00      	cmp	r3, #0
    192c:	d005      	beq.n	193a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    192e:	2201      	movs	r2, #1
    1930:	4b04      	ldr	r3, [pc, #16]	; (1944 <cpu_irq_leave_critical+0x2c>)
    1932:	701a      	strb	r2, [r3, #0]
    1934:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
    1938:	b662      	cpsie	i
	}
}
    193a:	4770      	bx	lr
    193c:	200000b0 	.word	0x200000b0
    1940:	200000b4 	.word	0x200000b4
    1944:	2000000c 	.word	0x2000000c

00001948 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
    1948:	b5f0      	push	{r4, r5, r6, r7, lr}
    194a:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
    194c:	ac01      	add	r4, sp, #4
    194e:	2501      	movs	r5, #1
    1950:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
    1952:	2700      	movs	r7, #0
    1954:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    1956:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    1958:	203e      	movs	r0, #62	; 0x3e
    195a:	1c21      	adds	r1, r4, #0
    195c:	4e06      	ldr	r6, [pc, #24]	; (1978 <system_board_init+0x30>)
    195e:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1960:	2280      	movs	r2, #128	; 0x80
    1962:	05d2      	lsls	r2, r2, #23
    1964:	4b05      	ldr	r3, [pc, #20]	; (197c <system_board_init+0x34>)
    1966:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    1968:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
    196a:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
    196c:	200f      	movs	r0, #15
    196e:	1c21      	adds	r1, r4, #0
    1970:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
    1972:	b003      	add	sp, #12
    1974:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1976:	46c0      	nop			; (mov r8, r8)
    1978:	00001981 	.word	0x00001981
    197c:	41004480 	.word	0x41004480

00001980 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1980:	b500      	push	{lr}
    1982:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1984:	ab01      	add	r3, sp, #4
    1986:	2280      	movs	r2, #128	; 0x80
    1988:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    198a:	780a      	ldrb	r2, [r1, #0]
    198c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    198e:	784a      	ldrb	r2, [r1, #1]
    1990:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    1992:	788a      	ldrb	r2, [r1, #2]
    1994:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    1996:	1c19      	adds	r1, r3, #0
    1998:	4b01      	ldr	r3, [pc, #4]	; (19a0 <port_pin_set_config+0x20>)
    199a:	4798      	blx	r3
}
    199c:	b003      	add	sp, #12
    199e:	bd00      	pop	{pc}
    19a0:	00001ef1 	.word	0x00001ef1

000019a4 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    19a4:	b508      	push	{r3, lr}
	switch (clock_source) {
    19a6:	2808      	cmp	r0, #8
    19a8:	d834      	bhi.n	1a14 <system_clock_source_get_hz+0x70>
    19aa:	0080      	lsls	r0, r0, #2
    19ac:	4b1b      	ldr	r3, [pc, #108]	; (1a1c <system_clock_source_get_hz+0x78>)
    19ae:	581b      	ldr	r3, [r3, r0]
    19b0:	469f      	mov	pc, r3

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    19b2:	2080      	movs	r0, #128	; 0x80
    19b4:	0200      	lsls	r0, r0, #8
    19b6:	e030      	b.n	1a1a <system_clock_source_get_hz+0x76>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    19b8:	4b19      	ldr	r3, [pc, #100]	; (1a20 <system_clock_source_get_hz+0x7c>)
    19ba:	6918      	ldr	r0, [r3, #16]
    19bc:	e02d      	b.n	1a1a <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    19be:	4b19      	ldr	r3, [pc, #100]	; (1a24 <system_clock_source_get_hz+0x80>)
    19c0:	6a18      	ldr	r0, [r3, #32]
    19c2:	0580      	lsls	r0, r0, #22
    19c4:	0f80      	lsrs	r0, r0, #30
    19c6:	4b18      	ldr	r3, [pc, #96]	; (1a28 <system_clock_source_get_hz+0x84>)
    19c8:	40c3      	lsrs	r3, r0
    19ca:	1c18      	adds	r0, r3, #0
    19cc:	e025      	b.n	1a1a <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    19ce:	4b14      	ldr	r3, [pc, #80]	; (1a20 <system_clock_source_get_hz+0x7c>)
    19d0:	6958      	ldr	r0, [r3, #20]
    19d2:	e022      	b.n	1a1a <system_clock_source_get_hz+0x76>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    19d4:	4b12      	ldr	r3, [pc, #72]	; (1a20 <system_clock_source_get_hz+0x7c>)
    19d6:	681b      	ldr	r3, [r3, #0]
    19d8:	2002      	movs	r0, #2
    19da:	4018      	ands	r0, r3
    19dc:	d01d      	beq.n	1a1a <system_clock_source_get_hz+0x76>
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    19de:	4911      	ldr	r1, [pc, #68]	; (1a24 <system_clock_source_get_hz+0x80>)
    19e0:	2210      	movs	r2, #16
    19e2:	68cb      	ldr	r3, [r1, #12]
    19e4:	421a      	tst	r2, r3
    19e6:	d0fc      	beq.n	19e2 <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    19e8:	4b0d      	ldr	r3, [pc, #52]	; (1a20 <system_clock_source_get_hz+0x7c>)
    19ea:	681b      	ldr	r3, [r3, #0]
    19ec:	075a      	lsls	r2, r3, #29
    19ee:	d513      	bpl.n	1a18 <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    19f0:	2000      	movs	r0, #0
    19f2:	4b0e      	ldr	r3, [pc, #56]	; (1a2c <system_clock_source_get_hz+0x88>)
    19f4:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    19f6:	4b0a      	ldr	r3, [pc, #40]	; (1a20 <system_clock_source_get_hz+0x7c>)
    19f8:	689b      	ldr	r3, [r3, #8]
    19fa:	041b      	lsls	r3, r3, #16
    19fc:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    19fe:	4358      	muls	r0, r3
    1a00:	e00b      	b.n	1a1a <system_clock_source_get_hz+0x76>

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1a02:	2350      	movs	r3, #80	; 0x50
    1a04:	4a07      	ldr	r2, [pc, #28]	; (1a24 <system_clock_source_get_hz+0x80>)
    1a06:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1a08:	2000      	movs	r0, #0

		return 48000000UL;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1a0a:	075a      	lsls	r2, r3, #29
    1a0c:	d505      	bpl.n	1a1a <system_clock_source_get_hz+0x76>
			return 0;
		}

		return _system_clock_inst.dpll.frequency;
    1a0e:	4b04      	ldr	r3, [pc, #16]	; (1a20 <system_clock_source_get_hz+0x7c>)
    1a10:	68d8      	ldr	r0, [r3, #12]
    1a12:	e002      	b.n	1a1a <system_clock_source_get_hz+0x76>
#endif

	default:
		return 0;
    1a14:	2000      	movs	r0, #0
    1a16:	e000      	b.n	1a1a <system_clock_source_get_hz+0x76>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
    1a18:	4805      	ldr	r0, [pc, #20]	; (1a30 <system_clock_source_get_hz+0x8c>)
#endif

	default:
		return 0;
	}
}
    1a1a:	bd08      	pop	{r3, pc}
    1a1c:	00004078 	.word	0x00004078
    1a20:	200000b8 	.word	0x200000b8
    1a24:	40000800 	.word	0x40000800
    1a28:	007a1200 	.word	0x007a1200
    1a2c:	00001e31 	.word	0x00001e31
    1a30:	02dc6c00 	.word	0x02dc6c00

00001a34 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1a34:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1a36:	4b0c      	ldr	r3, [pc, #48]	; (1a68 <system_clock_source_osc8m_set_config+0x34>)
    1a38:	6a1c      	ldr	r4, [r3, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    1a3a:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1a3c:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1a3e:	7840      	ldrb	r0, [r0, #1]
    1a40:	2201      	movs	r2, #1
    1a42:	4010      	ands	r0, r2
    1a44:	0180      	lsls	r0, r0, #6
    1a46:	2640      	movs	r6, #64	; 0x40
    1a48:	43b4      	bics	r4, r6
    1a4a:	4304      	orrs	r4, r0
    1a4c:	402a      	ands	r2, r5
    1a4e:	01d0      	lsls	r0, r2, #7
    1a50:	2280      	movs	r2, #128	; 0x80
    1a52:	4394      	bics	r4, r2
    1a54:	1c22      	adds	r2, r4, #0
    1a56:	4302      	orrs	r2, r0
    1a58:	2003      	movs	r0, #3
    1a5a:	4001      	ands	r1, r0
    1a5c:	0209      	lsls	r1, r1, #8
    1a5e:	4803      	ldr	r0, [pc, #12]	; (1a6c <system_clock_source_osc8m_set_config+0x38>)
    1a60:	4002      	ands	r2, r0
    1a62:	430a      	orrs	r2, r1
    1a64:	621a      	str	r2, [r3, #32]
}
    1a66:	bd70      	pop	{r4, r5, r6, pc}
    1a68:	40000800 	.word	0x40000800
    1a6c:	fffffcff 	.word	0xfffffcff

00001a70 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1a70:	2808      	cmp	r0, #8
    1a72:	d843      	bhi.n	1afc <system_clock_source_enable+0x8c>
    1a74:	0080      	lsls	r0, r0, #2
    1a76:	4b22      	ldr	r3, [pc, #136]	; (1b00 <system_clock_source_enable+0x90>)
    1a78:	581b      	ldr	r3, [r3, r0]
    1a7a:	469f      	mov	pc, r3
		break;
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    1a7c:	2000      	movs	r0, #0
    1a7e:	e03e      	b.n	1afe <system_clock_source_enable+0x8e>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1a80:	4b20      	ldr	r3, [pc, #128]	; (1b04 <system_clock_source_enable+0x94>)
    1a82:	6a19      	ldr	r1, [r3, #32]
    1a84:	2202      	movs	r2, #2
    1a86:	430a      	orrs	r2, r1
    1a88:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    1a8a:	2000      	movs	r0, #0
    1a8c:	e037      	b.n	1afe <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1a8e:	4b1d      	ldr	r3, [pc, #116]	; (1b04 <system_clock_source_enable+0x94>)
    1a90:	6999      	ldr	r1, [r3, #24]
    1a92:	2202      	movs	r2, #2
    1a94:	430a      	orrs	r2, r1
    1a96:	619a      	str	r2, [r3, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1a98:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    1a9a:	e030      	b.n	1afe <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1a9c:	4b19      	ldr	r3, [pc, #100]	; (1b04 <system_clock_source_enable+0x94>)
    1a9e:	8a19      	ldrh	r1, [r3, #16]
    1aa0:	2202      	movs	r2, #2
    1aa2:	430a      	orrs	r2, r1
    1aa4:	821a      	strh	r2, [r3, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1aa6:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    1aa8:	e029      	b.n	1afe <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1aaa:	4b16      	ldr	r3, [pc, #88]	; (1b04 <system_clock_source_enable+0x94>)
    1aac:	8a99      	ldrh	r1, [r3, #20]
    1aae:	2202      	movs	r2, #2
    1ab0:	430a      	orrs	r2, r1
    1ab2:	829a      	strh	r2, [r3, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1ab4:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    1ab6:	e022      	b.n	1afe <system_clock_source_enable+0x8e>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1ab8:	4b13      	ldr	r3, [pc, #76]	; (1b08 <system_clock_source_enable+0x98>)
    1aba:	6819      	ldr	r1, [r3, #0]
    1abc:	2202      	movs	r2, #2
    1abe:	430a      	orrs	r2, r1
    1ac0:	601a      	str	r2, [r3, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    1ac2:	681a      	ldr	r2, [r3, #0]
    1ac4:	4b11      	ldr	r3, [pc, #68]	; (1b0c <system_clock_source_enable+0x9c>)
    1ac6:	401a      	ands	r2, r3
    1ac8:	4b0e      	ldr	r3, [pc, #56]	; (1b04 <system_clock_source_enable+0x94>)
    1aca:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1acc:	1c19      	adds	r1, r3, #0
    1ace:	2210      	movs	r2, #16
    1ad0:	68cb      	ldr	r3, [r1, #12]
    1ad2:	421a      	tst	r2, r3
    1ad4:	d0fc      	beq.n	1ad0 <system_clock_source_enable+0x60>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1ad6:	4a0c      	ldr	r2, [pc, #48]	; (1b08 <system_clock_source_enable+0x98>)
    1ad8:	6891      	ldr	r1, [r2, #8]
    1ada:	4b0a      	ldr	r3, [pc, #40]	; (1b04 <system_clock_source_enable+0x94>)
    1adc:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    1ade:	6851      	ldr	r1, [r2, #4]
    1ae0:	6299      	str	r1, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1ae2:	6812      	ldr	r2, [r2, #0]
    1ae4:	b292      	uxth	r2, r2
    1ae6:	849a      	strh	r2, [r3, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1ae8:	2000      	movs	r0, #0
    1aea:	e008      	b.n	1afe <system_clock_source_enable+0x8e>
		_system_clock_source_dfll_set_config_errata_9905();
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    1aec:	4a05      	ldr	r2, [pc, #20]	; (1b04 <system_clock_source_enable+0x94>)
    1aee:	2344      	movs	r3, #68	; 0x44
    1af0:	5cd0      	ldrb	r0, [r2, r3]
    1af2:	2102      	movs	r1, #2
    1af4:	4301      	orrs	r1, r0
    1af6:	54d1      	strb	r1, [r2, r3]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1af8:	2000      	movs	r0, #0
		break;

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
		break;
    1afa:	e000      	b.n	1afe <system_clock_source_enable+0x8e>
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1afc:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
    1afe:	4770      	bx	lr
    1b00:	0000409c 	.word	0x0000409c
    1b04:	40000800 	.word	0x40000800
    1b08:	200000b8 	.word	0x200000b8
    1b0c:	0000ff7f 	.word	0x0000ff7f

00001b10 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1b10:	b5f0      	push	{r4, r5, r6, r7, lr}
    1b12:	4647      	mov	r7, r8
    1b14:	b480      	push	{r7}
    1b16:	b084      	sub	sp, #16
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1b18:	22c2      	movs	r2, #194	; 0xc2
    1b1a:	00d2      	lsls	r2, r2, #3
    1b1c:	4b27      	ldr	r3, [pc, #156]	; (1bbc <system_clock_init+0xac>)
    1b1e:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1b20:	4b27      	ldr	r3, [pc, #156]	; (1bc0 <system_clock_init+0xb0>)
    1b22:	685a      	ldr	r2, [r3, #4]
    1b24:	211e      	movs	r1, #30
    1b26:	438a      	bics	r2, r1
    1b28:	605a      	str	r2, [r3, #4]
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    1b2a:	2302      	movs	r3, #2
    1b2c:	466a      	mov	r2, sp
    1b2e:	7013      	strb	r3, [r2, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1b30:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1b32:	4d24      	ldr	r5, [pc, #144]	; (1bc4 <system_clock_init+0xb4>)
    1b34:	b2e0      	uxtb	r0, r4
    1b36:	4669      	mov	r1, sp
    1b38:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1b3a:	3401      	adds	r4, #1
    1b3c:	2c25      	cmp	r4, #37	; 0x25
    1b3e:	d1f9      	bne.n	1b34 <system_clock_init+0x24>
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    1b40:	a803      	add	r0, sp, #12
    1b42:	2400      	movs	r4, #0
    1b44:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    1b46:	2301      	movs	r3, #1
    1b48:	4698      	mov	r8, r3
    1b4a:	7083      	strb	r3, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1b4c:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1b4e:	4b1e      	ldr	r3, [pc, #120]	; (1bc8 <system_clock_init+0xb8>)
    1b50:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1b52:	2006      	movs	r0, #6
    1b54:	4b1d      	ldr	r3, [pc, #116]	; (1bcc <system_clock_init+0xbc>)
    1b56:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1b58:	4b1d      	ldr	r3, [pc, #116]	; (1bd0 <system_clock_init+0xc0>)
    1b5a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1b5c:	4643      	mov	r3, r8
    1b5e:	9301      	str	r3, [sp, #4]
	config->high_when_disabled = false;
    1b60:	466a      	mov	r2, sp
    1b62:	7054      	strb	r4, [r2, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1b64:	2706      	movs	r7, #6
    1b66:	7017      	strb	r7, [r2, #0]
#endif
	config->run_in_standby     = false;
    1b68:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    1b6a:	7254      	strb	r4, [r2, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(8, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1b6c:	2001      	movs	r0, #1
    1b6e:	4669      	mov	r1, sp
    1b70:	4e18      	ldr	r6, [pc, #96]	; (1bd4 <system_clock_init+0xc4>)
    1b72:	47b0      	blx	r6
    1b74:	2001      	movs	r0, #1
    1b76:	4d18      	ldr	r5, [pc, #96]	; (1bd8 <system_clock_init+0xc8>)
    1b78:	47a8      	blx	r5
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
    1b7a:	466b      	mov	r3, sp
    1b7c:	705c      	strb	r4, [r3, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1b7e:	701f      	strb	r7, [r3, #0]
#endif
	config->run_in_standby     = false;
    1b80:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    1b82:	725c      	strb	r4, [r3, #9]
    1b84:	2308      	movs	r3, #8
    1b86:	9301      	str	r3, [sp, #4]
    1b88:	2003      	movs	r0, #3
    1b8a:	4669      	mov	r1, sp
    1b8c:	47b0      	blx	r6
    1b8e:	2003      	movs	r0, #3
    1b90:	47a8      	blx	r5
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    1b92:	4b12      	ldr	r3, [pc, #72]	; (1bdc <system_clock_init+0xcc>)
    1b94:	721c      	strb	r4, [r3, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    1b96:	725c      	strb	r4, [r3, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    1b98:	729c      	strb	r4, [r3, #10]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1b9a:	4642      	mov	r2, r8
    1b9c:	9201      	str	r2, [sp, #4]
	config->high_when_disabled = false;
    1b9e:	466b      	mov	r3, sp
    1ba0:	705c      	strb	r4, [r3, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1ba2:	701f      	strb	r7, [r3, #0]
#endif
	config->run_in_standby     = false;
    1ba4:	721c      	strb	r4, [r3, #8]
	config->output_enable      = false;
    1ba6:	725c      	strb	r4, [r3, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1ba8:	2000      	movs	r0, #0
    1baa:	4669      	mov	r1, sp
    1bac:	47b0      	blx	r6
    1bae:	2000      	movs	r0, #0
    1bb0:	47a8      	blx	r5
#endif
}
    1bb2:	b004      	add	sp, #16
    1bb4:	bc04      	pop	{r2}
    1bb6:	4690      	mov	r8, r2
    1bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1bba:	46c0      	nop			; (mov r8, r8)
    1bbc:	40000800 	.word	0x40000800
    1bc0:	41004000 	.word	0x41004000
    1bc4:	00001e15 	.word	0x00001e15
    1bc8:	00001a35 	.word	0x00001a35
    1bcc:	00001a71 	.word	0x00001a71
    1bd0:	00001be1 	.word	0x00001be1
    1bd4:	00001c05 	.word	0x00001c05
    1bd8:	00001cb9 	.word	0x00001cb9
    1bdc:	40000400 	.word	0x40000400

00001be0 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1be0:	4b06      	ldr	r3, [pc, #24]	; (1bfc <system_gclk_init+0x1c>)
    1be2:	6999      	ldr	r1, [r3, #24]
    1be4:	2208      	movs	r2, #8
    1be6:	430a      	orrs	r2, r1
    1be8:	619a      	str	r2, [r3, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1bea:	2201      	movs	r2, #1
    1bec:	4b04      	ldr	r3, [pc, #16]	; (1c00 <system_gclk_init+0x20>)
    1bee:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1bf0:	1c19      	adds	r1, r3, #0
    1bf2:	780b      	ldrb	r3, [r1, #0]
    1bf4:	4213      	tst	r3, r2
    1bf6:	d1fc      	bne.n	1bf2 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1bf8:	4770      	bx	lr
    1bfa:	46c0      	nop			; (mov r8, r8)
    1bfc:	40000400 	.word	0x40000400
    1c00:	40000c00 	.word	0x40000c00

00001c04 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1c06:	1c06      	adds	r6, r0, #0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1c08:	1c07      	adds	r7, r0, #0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1c0a:	780d      	ldrb	r5, [r1, #0]
    1c0c:	022d      	lsls	r5, r5, #8
    1c0e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1c10:	784b      	ldrb	r3, [r1, #1]
    1c12:	2b00      	cmp	r3, #0
    1c14:	d002      	beq.n	1c1c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1c16:	2380      	movs	r3, #128	; 0x80
    1c18:	02db      	lsls	r3, r3, #11
    1c1a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1c1c:	7a4b      	ldrb	r3, [r1, #9]
    1c1e:	2b00      	cmp	r3, #0
    1c20:	d002      	beq.n	1c28 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1c22:	2380      	movs	r3, #128	; 0x80
    1c24:	031b      	lsls	r3, r3, #12
    1c26:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1c28:	684c      	ldr	r4, [r1, #4]
    1c2a:	2c01      	cmp	r4, #1
    1c2c:	d917      	bls.n	1c5e <system_gclk_gen_set_config+0x5a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1c2e:	1e63      	subs	r3, r4, #1
    1c30:	421c      	tst	r4, r3
    1c32:	d10f      	bne.n	1c54 <system_gclk_gen_set_config+0x50>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1c34:	2c02      	cmp	r4, #2
    1c36:	d906      	bls.n	1c46 <system_gclk_gen_set_config+0x42>
    1c38:	2302      	movs	r3, #2
    1c3a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1c3c:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    1c3e:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1c40:	429c      	cmp	r4, r3
    1c42:	d8fb      	bhi.n	1c3c <system_gclk_gen_set_config+0x38>
    1c44:	e000      	b.n	1c48 <system_gclk_gen_set_config+0x44>
    1c46:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1c48:	0217      	lsls	r7, r2, #8
    1c4a:	4337      	orrs	r7, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1c4c:	2380      	movs	r3, #128	; 0x80
    1c4e:	035b      	lsls	r3, r3, #13
    1c50:	431d      	orrs	r5, r3
    1c52:	e004      	b.n	1c5e <system_gclk_gen_set_config+0x5a>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1c54:	0227      	lsls	r7, r4, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    1c56:	4337      	orrs	r7, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1c58:	2380      	movs	r3, #128	; 0x80
    1c5a:	029b      	lsls	r3, r3, #10
    1c5c:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1c5e:	7a0b      	ldrb	r3, [r1, #8]
    1c60:	2b00      	cmp	r3, #0
    1c62:	d002      	beq.n	1c6a <system_gclk_gen_set_config+0x66>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1c64:	2380      	movs	r3, #128	; 0x80
    1c66:	039b      	lsls	r3, r3, #14
    1c68:	431d      	orrs	r5, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1c6a:	4a0f      	ldr	r2, [pc, #60]	; (1ca8 <system_gclk_gen_set_config+0xa4>)
    1c6c:	7853      	ldrb	r3, [r2, #1]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
    1c6e:	b25b      	sxtb	r3, r3
    1c70:	2b00      	cmp	r3, #0
    1c72:	dbfb      	blt.n	1c6c <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1c74:	4b0d      	ldr	r3, [pc, #52]	; (1cac <system_gclk_gen_set_config+0xa8>)
    1c76:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1c78:	4b0d      	ldr	r3, [pc, #52]	; (1cb0 <system_gclk_gen_set_config+0xac>)
    1c7a:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1c7c:	4a0a      	ldr	r2, [pc, #40]	; (1ca8 <system_gclk_gen_set_config+0xa4>)
    1c7e:	7853      	ldrb	r3, [r2, #1]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1c80:	b25b      	sxtb	r3, r3
    1c82:	2b00      	cmp	r3, #0
    1c84:	dbfb      	blt.n	1c7e <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1c86:	4b08      	ldr	r3, [pc, #32]	; (1ca8 <system_gclk_gen_set_config+0xa4>)
    1c88:	609f      	str	r7, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1c8a:	1c1a      	adds	r2, r3, #0
    1c8c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
    1c8e:	b25b      	sxtb	r3, r3
    1c90:	2b00      	cmp	r3, #0
    1c92:	dbfb      	blt.n	1c8c <system_gclk_gen_set_config+0x88>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1c94:	4b04      	ldr	r3, [pc, #16]	; (1ca8 <system_gclk_gen_set_config+0xa4>)
    1c96:	6859      	ldr	r1, [r3, #4]
    1c98:	2280      	movs	r2, #128	; 0x80
    1c9a:	0252      	lsls	r2, r2, #9
    1c9c:	400a      	ands	r2, r1
    1c9e:	4315      	orrs	r5, r2
    1ca0:	605d      	str	r5, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1ca2:	4b04      	ldr	r3, [pc, #16]	; (1cb4 <system_gclk_gen_set_config+0xb0>)
    1ca4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1ca8:	40000c00 	.word	0x40000c00
    1cac:	000018d9 	.word	0x000018d9
    1cb0:	40000c08 	.word	0x40000c08
    1cb4:	00001919 	.word	0x00001919

00001cb8 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1cb8:	b510      	push	{r4, lr}
    1cba:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1cbc:	4a0b      	ldr	r2, [pc, #44]	; (1cec <system_gclk_gen_enable+0x34>)
    1cbe:	7853      	ldrb	r3, [r2, #1]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    1cc0:	b25b      	sxtb	r3, r3
    1cc2:	2b00      	cmp	r3, #0
    1cc4:	dbfb      	blt.n	1cbe <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1cc6:	4b0a      	ldr	r3, [pc, #40]	; (1cf0 <system_gclk_gen_enable+0x38>)
    1cc8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1cca:	4b0a      	ldr	r3, [pc, #40]	; (1cf4 <system_gclk_gen_enable+0x3c>)
    1ccc:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1cce:	4a07      	ldr	r2, [pc, #28]	; (1cec <system_gclk_gen_enable+0x34>)
    1cd0:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    1cd2:	b25b      	sxtb	r3, r3
    1cd4:	2b00      	cmp	r3, #0
    1cd6:	dbfb      	blt.n	1cd0 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1cd8:	4b04      	ldr	r3, [pc, #16]	; (1cec <system_gclk_gen_enable+0x34>)
    1cda:	6859      	ldr	r1, [r3, #4]
    1cdc:	2280      	movs	r2, #128	; 0x80
    1cde:	0252      	lsls	r2, r2, #9
    1ce0:	430a      	orrs	r2, r1
    1ce2:	605a      	str	r2, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1ce4:	4b04      	ldr	r3, [pc, #16]	; (1cf8 <system_gclk_gen_enable+0x40>)
    1ce6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1ce8:	bd10      	pop	{r4, pc}
    1cea:	46c0      	nop			; (mov r8, r8)
    1cec:	40000c00 	.word	0x40000c00
    1cf0:	000018d9 	.word	0x000018d9
    1cf4:	40000c04 	.word	0x40000c04
    1cf8:	00001919 	.word	0x00001919

00001cfc <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1cfc:	b570      	push	{r4, r5, r6, lr}
    1cfe:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1d00:	4a1a      	ldr	r2, [pc, #104]	; (1d6c <system_gclk_gen_get_hz+0x70>)
    1d02:	7853      	ldrb	r3, [r2, #1]
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
    1d04:	b25b      	sxtb	r3, r3
    1d06:	2b00      	cmp	r3, #0
    1d08:	dbfb      	blt.n	1d02 <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1d0a:	4b19      	ldr	r3, [pc, #100]	; (1d70 <system_gclk_gen_get_hz+0x74>)
    1d0c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1d0e:	4b19      	ldr	r3, [pc, #100]	; (1d74 <system_gclk_gen_get_hz+0x78>)
    1d10:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1d12:	4a16      	ldr	r2, [pc, #88]	; (1d6c <system_gclk_gen_get_hz+0x70>)
    1d14:	7853      	ldrb	r3, [r2, #1]

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
    1d16:	b25b      	sxtb	r3, r3
    1d18:	2b00      	cmp	r3, #0
    1d1a:	dbfb      	blt.n	1d14 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1d1c:	4e13      	ldr	r6, [pc, #76]	; (1d6c <system_gclk_gen_get_hz+0x70>)
    1d1e:	6870      	ldr	r0, [r6, #4]
    1d20:	04c0      	lsls	r0, r0, #19
    1d22:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1d24:	4b14      	ldr	r3, [pc, #80]	; (1d78 <system_gclk_gen_get_hz+0x7c>)
    1d26:	4798      	blx	r3
    1d28:	1c05      	adds	r5, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1d2a:	4b12      	ldr	r3, [pc, #72]	; (1d74 <system_gclk_gen_get_hz+0x78>)
    1d2c:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1d2e:	6876      	ldr	r6, [r6, #4]
    1d30:	02f6      	lsls	r6, r6, #11
    1d32:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1d34:	4b11      	ldr	r3, [pc, #68]	; (1d7c <system_gclk_gen_get_hz+0x80>)
    1d36:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1d38:	4a0c      	ldr	r2, [pc, #48]	; (1d6c <system_gclk_gen_get_hz+0x70>)
    1d3a:	7853      	ldrb	r3, [r2, #1]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
	while (system_gclk_is_syncing()) {
    1d3c:	b25b      	sxtb	r3, r3
    1d3e:	2b00      	cmp	r3, #0
    1d40:	dbfb      	blt.n	1d3a <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1d42:	4b0a      	ldr	r3, [pc, #40]	; (1d6c <system_gclk_gen_get_hz+0x70>)
    1d44:	689c      	ldr	r4, [r3, #8]
    1d46:	0a24      	lsrs	r4, r4, #8
    1d48:	b2a4      	uxth	r4, r4
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1d4a:	4b0d      	ldr	r3, [pc, #52]	; (1d80 <system_gclk_gen_get_hz+0x84>)
    1d4c:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1d4e:	2e00      	cmp	r6, #0
    1d50:	d107      	bne.n	1d62 <system_gclk_gen_get_hz+0x66>
    1d52:	2c01      	cmp	r4, #1
    1d54:	d907      	bls.n	1d66 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1d56:	1c28      	adds	r0, r5, #0
    1d58:	1c21      	adds	r1, r4, #0
    1d5a:	4b0a      	ldr	r3, [pc, #40]	; (1d84 <system_gclk_gen_get_hz+0x88>)
    1d5c:	4798      	blx	r3
    1d5e:	1c05      	adds	r5, r0, #0
    1d60:	e001      	b.n	1d66 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1d62:	3401      	adds	r4, #1
    1d64:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1d66:	1c28      	adds	r0, r5, #0
    1d68:	bd70      	pop	{r4, r5, r6, pc}
    1d6a:	46c0      	nop			; (mov r8, r8)
    1d6c:	40000c00 	.word	0x40000c00
    1d70:	000018d9 	.word	0x000018d9
    1d74:	40000c04 	.word	0x40000c04
    1d78:	000019a5 	.word	0x000019a5
    1d7c:	40000c08 	.word	0x40000c08
    1d80:	00001919 	.word	0x00001919
    1d84:	00002319 	.word	0x00002319

00001d88 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1d88:	b510      	push	{r4, lr}
    1d8a:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1d8c:	4b06      	ldr	r3, [pc, #24]	; (1da8 <system_gclk_chan_enable+0x20>)
    1d8e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1d90:	4b06      	ldr	r3, [pc, #24]	; (1dac <system_gclk_chan_enable+0x24>)
    1d92:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1d94:	4b06      	ldr	r3, [pc, #24]	; (1db0 <system_gclk_chan_enable+0x28>)
    1d96:	8859      	ldrh	r1, [r3, #2]
    1d98:	2280      	movs	r2, #128	; 0x80
    1d9a:	01d2      	lsls	r2, r2, #7
    1d9c:	430a      	orrs	r2, r1
    1d9e:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1da0:	4b04      	ldr	r3, [pc, #16]	; (1db4 <system_gclk_chan_enable+0x2c>)
    1da2:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1da4:	bd10      	pop	{r4, pc}
    1da6:	46c0      	nop			; (mov r8, r8)
    1da8:	000018d9 	.word	0x000018d9
    1dac:	40000c02 	.word	0x40000c02
    1db0:	40000c00 	.word	0x40000c00
    1db4:	00001919 	.word	0x00001919

00001db8 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1db8:	b510      	push	{r4, lr}
    1dba:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1dbc:	4b0f      	ldr	r3, [pc, #60]	; (1dfc <system_gclk_chan_disable+0x44>)
    1dbe:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1dc0:	4b0f      	ldr	r3, [pc, #60]	; (1e00 <system_gclk_chan_disable+0x48>)
    1dc2:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1dc4:	4b0f      	ldr	r3, [pc, #60]	; (1e04 <system_gclk_chan_disable+0x4c>)
    1dc6:	8858      	ldrh	r0, [r3, #2]
    1dc8:	0500      	lsls	r0, r0, #20
    1dca:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1dcc:	8859      	ldrh	r1, [r3, #2]
    1dce:	4a0e      	ldr	r2, [pc, #56]	; (1e08 <system_gclk_chan_disable+0x50>)
    1dd0:	400a      	ands	r2, r1
    1dd2:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1dd4:	8859      	ldrh	r1, [r3, #2]
    1dd6:	4a0d      	ldr	r2, [pc, #52]	; (1e0c <system_gclk_chan_disable+0x54>)
    1dd8:	400a      	ands	r2, r1
    1dda:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1ddc:	1c19      	adds	r1, r3, #0
    1dde:	2280      	movs	r2, #128	; 0x80
    1de0:	01d2      	lsls	r2, r2, #7
    1de2:	884b      	ldrh	r3, [r1, #2]
    1de4:	4213      	tst	r3, r2
    1de6:	d1fc      	bne.n	1de2 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1de8:	4b06      	ldr	r3, [pc, #24]	; (1e04 <system_gclk_chan_disable+0x4c>)
    1dea:	0201      	lsls	r1, r0, #8
    1dec:	8858      	ldrh	r0, [r3, #2]
    1dee:	4a06      	ldr	r2, [pc, #24]	; (1e08 <system_gclk_chan_disable+0x50>)
    1df0:	4002      	ands	r2, r0
    1df2:	430a      	orrs	r2, r1
    1df4:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1df6:	4b06      	ldr	r3, [pc, #24]	; (1e10 <system_gclk_chan_disable+0x58>)
    1df8:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1dfa:	bd10      	pop	{r4, pc}
    1dfc:	000018d9 	.word	0x000018d9
    1e00:	40000c02 	.word	0x40000c02
    1e04:	40000c00 	.word	0x40000c00
    1e08:	fffff0ff 	.word	0xfffff0ff
    1e0c:	ffffbfff 	.word	0xffffbfff
    1e10:	00001919 	.word	0x00001919

00001e14 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    1e14:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1e16:	780c      	ldrb	r4, [r1, #0]
    1e18:	0224      	lsls	r4, r4, #8
    1e1a:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    1e1c:	4b02      	ldr	r3, [pc, #8]	; (1e28 <system_gclk_chan_set_config+0x14>)
    1e1e:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1e20:	b2a4      	uxth	r4, r4
    1e22:	4b02      	ldr	r3, [pc, #8]	; (1e2c <system_gclk_chan_set_config+0x18>)
    1e24:	805c      	strh	r4, [r3, #2]
}
    1e26:	bd10      	pop	{r4, pc}
    1e28:	00001db9 	.word	0x00001db9
    1e2c:	40000c00 	.word	0x40000c00

00001e30 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1e30:	b510      	push	{r4, lr}
    1e32:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1e34:	4b06      	ldr	r3, [pc, #24]	; (1e50 <system_gclk_chan_get_hz+0x20>)
    1e36:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1e38:	4b06      	ldr	r3, [pc, #24]	; (1e54 <system_gclk_chan_get_hz+0x24>)
    1e3a:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1e3c:	4b06      	ldr	r3, [pc, #24]	; (1e58 <system_gclk_chan_get_hz+0x28>)
    1e3e:	885c      	ldrh	r4, [r3, #2]
    1e40:	0524      	lsls	r4, r4, #20
    1e42:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1e44:	4b05      	ldr	r3, [pc, #20]	; (1e5c <system_gclk_chan_get_hz+0x2c>)
    1e46:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1e48:	1c20      	adds	r0, r4, #0
    1e4a:	4b05      	ldr	r3, [pc, #20]	; (1e60 <system_gclk_chan_get_hz+0x30>)
    1e4c:	4798      	blx	r3
}
    1e4e:	bd10      	pop	{r4, pc}
    1e50:	000018d9 	.word	0x000018d9
    1e54:	40000c02 	.word	0x40000c02
    1e58:	40000c00 	.word	0x40000c00
    1e5c:	00001919 	.word	0x00001919
    1e60:	00001cfd 	.word	0x00001cfd

00001e64 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1e64:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1e66:	78d3      	ldrb	r3, [r2, #3]
    1e68:	2b00      	cmp	r3, #0
    1e6a:	d11e      	bne.n	1eaa <_system_pinmux_config+0x46>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1e6c:	7813      	ldrb	r3, [r2, #0]
    1e6e:	2b80      	cmp	r3, #128	; 0x80
    1e70:	d004      	beq.n	1e7c <_system_pinmux_config+0x18>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1e72:	061b      	lsls	r3, r3, #24
    1e74:	2480      	movs	r4, #128	; 0x80
    1e76:	0264      	lsls	r4, r4, #9
    1e78:	4323      	orrs	r3, r4
    1e7a:	e000      	b.n	1e7e <_system_pinmux_config+0x1a>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1e7c:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1e7e:	7854      	ldrb	r4, [r2, #1]
    1e80:	2502      	movs	r5, #2
    1e82:	43ac      	bics	r4, r5
    1e84:	d10a      	bne.n	1e9c <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1e86:	7894      	ldrb	r4, [r2, #2]
    1e88:	2c00      	cmp	r4, #0
    1e8a:	d103      	bne.n	1e94 <_system_pinmux_config+0x30>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    1e8c:	2480      	movs	r4, #128	; 0x80
    1e8e:	02a4      	lsls	r4, r4, #10
    1e90:	4323      	orrs	r3, r4
    1e92:	e002      	b.n	1e9a <_system_pinmux_config+0x36>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1e94:	24c0      	movs	r4, #192	; 0xc0
    1e96:	02e4      	lsls	r4, r4, #11
    1e98:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1e9a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1e9c:	7854      	ldrb	r4, [r2, #1]
    1e9e:	3c01      	subs	r4, #1
    1ea0:	2c01      	cmp	r4, #1
    1ea2:	d804      	bhi.n	1eae <_system_pinmux_config+0x4a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pullup if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1ea4:	4c11      	ldr	r4, [pc, #68]	; (1eec <_system_pinmux_config+0x88>)
    1ea6:	4023      	ands	r3, r4
    1ea8:	e001      	b.n	1eae <_system_pinmux_config+0x4a>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    1eaa:	6041      	str	r1, [r0, #4]
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    1eac:	2300      	movs	r3, #0
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1eae:	040d      	lsls	r5, r1, #16
    1eb0:	0c2d      	lsrs	r5, r5, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1eb2:	24a0      	movs	r4, #160	; 0xa0
    1eb4:	05e4      	lsls	r4, r4, #23
    1eb6:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1eb8:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1eba:	6284      	str	r4, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1ebc:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1ebe:	24d0      	movs	r4, #208	; 0xd0
    1ec0:	0624      	lsls	r4, r4, #24
    1ec2:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1ec4:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1ec6:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1ec8:	78d4      	ldrb	r4, [r2, #3]
    1eca:	2c00      	cmp	r4, #0
    1ecc:	d10c      	bne.n	1ee8 <_system_pinmux_config+0x84>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1ece:	035c      	lsls	r4, r3, #13
    1ed0:	d505      	bpl.n	1ede <_system_pinmux_config+0x7a>
			/* Set the OUT register bits to enable the pullup if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1ed2:	7893      	ldrb	r3, [r2, #2]
    1ed4:	2b01      	cmp	r3, #1
    1ed6:	d101      	bne.n	1edc <_system_pinmux_config+0x78>
				port->OUTSET.reg = pin_mask;
    1ed8:	6181      	str	r1, [r0, #24]
    1eda:	e000      	b.n	1ede <_system_pinmux_config+0x7a>
			} else {
				port->OUTCLR.reg = pin_mask;
    1edc:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1ede:	7853      	ldrb	r3, [r2, #1]
    1ee0:	3b01      	subs	r3, #1
    1ee2:	2b01      	cmp	r3, #1
    1ee4:	d800      	bhi.n	1ee8 <_system_pinmux_config+0x84>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    1ee6:	6081      	str	r1, [r0, #8]
		}
	}
}
    1ee8:	bd30      	pop	{r4, r5, pc}
    1eea:	46c0      	nop			; (mov r8, r8)
    1eec:	fffbffff 	.word	0xfffbffff

00001ef0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1ef0:	b508      	push	{r3, lr}
    1ef2:	1c03      	adds	r3, r0, #0
    1ef4:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1ef6:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1ef8:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1efa:	2900      	cmp	r1, #0
    1efc:	d103      	bne.n	1f06 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1efe:	0958      	lsrs	r0, r3, #5
    1f00:	01c0      	lsls	r0, r0, #7
    1f02:	4904      	ldr	r1, [pc, #16]	; (1f14 <system_pinmux_pin_set_config+0x24>)
    1f04:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1f06:	211f      	movs	r1, #31
    1f08:	400b      	ands	r3, r1
    1f0a:	2101      	movs	r1, #1
    1f0c:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    1f0e:	4b02      	ldr	r3, [pc, #8]	; (1f18 <system_pinmux_pin_set_config+0x28>)
    1f10:	4798      	blx	r3
}
    1f12:	bd08      	pop	{r3, pc}
    1f14:	41004400 	.word	0x41004400
    1f18:	00001e65 	.word	0x00001e65

00001f1c <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1f1c:	4770      	bx	lr
    1f1e:	46c0      	nop			; (mov r8, r8)

00001f20 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1f20:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1f22:	4b04      	ldr	r3, [pc, #16]	; (1f34 <system_init+0x14>)
    1f24:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1f26:	4b04      	ldr	r3, [pc, #16]	; (1f38 <system_init+0x18>)
    1f28:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1f2a:	4b04      	ldr	r3, [pc, #16]	; (1f3c <system_init+0x1c>)
    1f2c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1f2e:	4b04      	ldr	r3, [pc, #16]	; (1f40 <system_init+0x20>)
    1f30:	4798      	blx	r3
}
    1f32:	bd08      	pop	{r3, pc}
    1f34:	00001b11 	.word	0x00001b11
    1f38:	00001949 	.word	0x00001949
    1f3c:	00001f1d 	.word	0x00001f1d
    1f40:	00001f1d 	.word	0x00001f1d

00001f44 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1f44:	e7fe      	b.n	1f44 <Dummy_Handler>
    1f46:	46c0      	nop			; (mov r8, r8)

00001f48 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    1f48:	b570      	push	{r4, r5, r6, lr}
        uint32_t *pSrc, *pDest;

        /* Change default QOS values to have the best performance and correct USB behavior */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1f4a:	2102      	movs	r1, #2
    1f4c:	2390      	movs	r3, #144	; 0x90
    1f4e:	005b      	lsls	r3, r3, #1
    1f50:	4a28      	ldr	r2, [pc, #160]	; (1ff4 <Reset_Handler+0xac>)
    1f52:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1f54:	4b28      	ldr	r3, [pc, #160]	; (1ff8 <Reset_Handler+0xb0>)
    1f56:	78d8      	ldrb	r0, [r3, #3]
    1f58:	2103      	movs	r1, #3
    1f5a:	4388      	bics	r0, r1
    1f5c:	2202      	movs	r2, #2
    1f5e:	4310      	orrs	r0, r2
    1f60:	70d8      	strb	r0, [r3, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1f62:	78dd      	ldrb	r5, [r3, #3]
    1f64:	240c      	movs	r4, #12
    1f66:	43a5      	bics	r5, r4
    1f68:	2008      	movs	r0, #8
    1f6a:	4305      	orrs	r5, r0
    1f6c:	70dd      	strb	r5, [r3, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1f6e:	4b23      	ldr	r3, [pc, #140]	; (1ffc <Reset_Handler+0xb4>)
    1f70:	7b9e      	ldrb	r6, [r3, #14]
    1f72:	2530      	movs	r5, #48	; 0x30
    1f74:	43ae      	bics	r6, r5
    1f76:	2520      	movs	r5, #32
    1f78:	4335      	orrs	r5, r6
    1f7a:	739d      	strb	r5, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1f7c:	7b9d      	ldrb	r5, [r3, #14]
    1f7e:	43a5      	bics	r5, r4
    1f80:	4328      	orrs	r0, r5
    1f82:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1f84:	7b98      	ldrb	r0, [r3, #14]
    1f86:	4388      	bics	r0, r1
    1f88:	4302      	orrs	r2, r0
    1f8a:	739a      	strb	r2, [r3, #14]

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    1f8c:	4b1c      	ldr	r3, [pc, #112]	; (2000 <STACK_SIZE>)
    1f8e:	4a1d      	ldr	r2, [pc, #116]	; (2004 <STACK_SIZE+0x4>)
    1f90:	429a      	cmp	r2, r3
    1f92:	d003      	beq.n	1f9c <Reset_Handler+0x54>
                for (; pDest < &_erelocate;) {
    1f94:	4b1c      	ldr	r3, [pc, #112]	; (2008 <STACK_SIZE+0x8>)
    1f96:	4a1a      	ldr	r2, [pc, #104]	; (2000 <STACK_SIZE>)
    1f98:	429a      	cmp	r2, r3
    1f9a:	d304      	bcc.n	1fa6 <Reset_Handler+0x5e>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1f9c:	4b1b      	ldr	r3, [pc, #108]	; (200c <STACK_SIZE+0xc>)
    1f9e:	4a1c      	ldr	r2, [pc, #112]	; (2010 <STACK_SIZE+0x10>)
    1fa0:	429a      	cmp	r2, r3
    1fa2:	d310      	bcc.n	1fc6 <Reset_Handler+0x7e>
    1fa4:	e01b      	b.n	1fde <Reset_Handler+0x96>
    1fa6:	4b1b      	ldr	r3, [pc, #108]	; (2014 <STACK_SIZE+0x14>)
    1fa8:	4817      	ldr	r0, [pc, #92]	; (2008 <STACK_SIZE+0x8>)
    1faa:	3003      	adds	r0, #3
    1fac:	1ac0      	subs	r0, r0, r3
    1fae:	0880      	lsrs	r0, r0, #2
    1fb0:	3001      	adds	r0, #1
    1fb2:	0080      	lsls	r0, r0, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1fb4:	2300      	movs	r3, #0
                        *pDest++ = *pSrc++;
    1fb6:	4912      	ldr	r1, [pc, #72]	; (2000 <STACK_SIZE>)
    1fb8:	4a12      	ldr	r2, [pc, #72]	; (2004 <STACK_SIZE+0x4>)
    1fba:	58d4      	ldr	r4, [r2, r3]
    1fbc:	50cc      	str	r4, [r1, r3]
    1fbe:	3304      	adds	r3, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1fc0:	4283      	cmp	r3, r0
    1fc2:	d1fa      	bne.n	1fba <Reset_Handler+0x72>
    1fc4:	e7ea      	b.n	1f9c <Reset_Handler+0x54>
    1fc6:	4b12      	ldr	r3, [pc, #72]	; (2010 <STACK_SIZE+0x10>)
    1fc8:	1d1a      	adds	r2, r3, #4
    1fca:	4910      	ldr	r1, [pc, #64]	; (200c <STACK_SIZE+0xc>)
    1fcc:	3103      	adds	r1, #3
    1fce:	1a89      	subs	r1, r1, r2
    1fd0:	0889      	lsrs	r1, r1, #2
    1fd2:	0089      	lsls	r1, r1, #2
    1fd4:	1852      	adds	r2, r2, r1
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
                *pDest++ = 0;
    1fd6:	2100      	movs	r1, #0
    1fd8:	c302      	stmia	r3!, {r1}
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1fda:	4293      	cmp	r3, r2
    1fdc:	d1fc      	bne.n	1fd8 <Reset_Handler+0x90>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1fde:	4b0e      	ldr	r3, [pc, #56]	; (2018 <STACK_SIZE+0x18>)
    1fe0:	217f      	movs	r1, #127	; 0x7f
    1fe2:	4a0e      	ldr	r2, [pc, #56]	; (201c <STACK_SIZE+0x1c>)
    1fe4:	438a      	bics	r2, r1
    1fe6:	609a      	str	r2, [r3, #8]

        /* Initialize the C library */
        __libc_init_array();
    1fe8:	4b0d      	ldr	r3, [pc, #52]	; (2020 <STACK_SIZE+0x20>)
    1fea:	4798      	blx	r3

        /* Branch to main function */
        main();
    1fec:	4b0d      	ldr	r3, [pc, #52]	; (2024 <STACK_SIZE+0x24>)
    1fee:	4798      	blx	r3
    1ff0:	e7fe      	b.n	1ff0 <Reset_Handler+0xa8>
    1ff2:	46c0      	nop			; (mov r8, r8)
    1ff4:	41007000 	.word	0x41007000
    1ff8:	41005000 	.word	0x41005000
    1ffc:	41004800 	.word	0x41004800
    2000:	20000000 	.word	0x20000000
    2004:	000041e0 	.word	0x000041e0
    2008:	20000074 	.word	0x20000074
    200c:	200001a8 	.word	0x200001a8
    2010:	20000074 	.word	0x20000074
    2014:	20000004 	.word	0x20000004
    2018:	e000ed00 	.word	0xe000ed00
    201c:	00000000 	.word	0x00000000
    2020:	00002f69 	.word	0x00002f69
    2024:	00002231 	.word	0x00002231

00002028 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    2028:	4b06      	ldr	r3, [pc, #24]	; (2044 <_sbrk+0x1c>)
    202a:	681b      	ldr	r3, [r3, #0]
    202c:	2b00      	cmp	r3, #0
    202e:	d102      	bne.n	2036 <_sbrk+0xe>
		heap = (unsigned char *)&_end;
    2030:	4a05      	ldr	r2, [pc, #20]	; (2048 <_sbrk+0x20>)
    2032:	4b04      	ldr	r3, [pc, #16]	; (2044 <_sbrk+0x1c>)
    2034:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    2036:	4a03      	ldr	r2, [pc, #12]	; (2044 <_sbrk+0x1c>)
    2038:	6813      	ldr	r3, [r2, #0]

	heap += incr;
    203a:	1818      	adds	r0, r3, r0
    203c:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
}
    203e:	1c18      	adds	r0, r3, #0
    2040:	4770      	bx	lr
    2042:	46c0      	nop			; (mov r8, r8)
    2044:	200000d0 	.word	0x200000d0
    2048:	200021a8 	.word	0x200021a8

0000204c <_close>:
	return -1;
}

extern int _close(int file)
{
	return -1;
    204c:	2001      	movs	r0, #1
}
    204e:	4240      	negs	r0, r0
    2050:	4770      	bx	lr
    2052:	46c0      	nop			; (mov r8, r8)

00002054 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    2054:	2380      	movs	r3, #128	; 0x80
    2056:	019b      	lsls	r3, r3, #6
    2058:	604b      	str	r3, [r1, #4]

	return 0;
}
    205a:	2000      	movs	r0, #0
    205c:	4770      	bx	lr
    205e:	46c0      	nop			; (mov r8, r8)

00002060 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    2060:	2001      	movs	r0, #1
    2062:	4770      	bx	lr

00002064 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    2064:	2000      	movs	r0, #0
    2066:	4770      	bx	lr

00002068 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    2068:	b570      	push	{r4, r5, r6, lr}
    206a:	b082      	sub	sp, #8
    206c:	1c05      	adds	r5, r0, #0
    206e:	1c0e      	adds	r6, r1, #0
	uint16_t temp = 0;
    2070:	2200      	movs	r2, #0
    2072:	466b      	mov	r3, sp
    2074:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    2076:	4c06      	ldr	r4, [pc, #24]	; (2090 <usart_serial_getchar+0x28>)
    2078:	1c28      	adds	r0, r5, #0
    207a:	4669      	mov	r1, sp
    207c:	3106      	adds	r1, #6
    207e:	47a0      	blx	r4
    2080:	2800      	cmp	r0, #0
    2082:	d1f9      	bne.n	2078 <usart_serial_getchar+0x10>

	*c = temp;
    2084:	466b      	mov	r3, sp
    2086:	3306      	adds	r3, #6
    2088:	881b      	ldrh	r3, [r3, #0]
    208a:	7033      	strb	r3, [r6, #0]
}
    208c:	b002      	add	sp, #8
    208e:	bd70      	pop	{r4, r5, r6, pc}
    2090:	000015f9 	.word	0x000015f9

00002094 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
    2094:	b570      	push	{r4, r5, r6, lr}
    2096:	1c06      	adds	r6, r0, #0
    2098:	1c0d      	adds	r5, r1, #0
	while(STATUS_OK !=usart_write_wait(module, c));
    209a:	4c03      	ldr	r4, [pc, #12]	; (20a8 <usart_serial_putchar+0x14>)
    209c:	1c30      	adds	r0, r6, #0
    209e:	1c29      	adds	r1, r5, #0
    20a0:	47a0      	blx	r4
    20a2:	2800      	cmp	r0, #0
    20a4:	d1fa      	bne.n	209c <usart_serial_putchar+0x8>

	return STATUS_OK;
}
    20a6:	bd70      	pop	{r4, r5, r6, pc}
    20a8:	000015cd 	.word	0x000015cd

000020ac <configure_console>:
* PARITY			-> NONE
*
*/

void configure_console(void)
{
    20ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    20ae:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    20b0:	2380      	movs	r3, #128	; 0x80
    20b2:	05db      	lsls	r3, r3, #23
    20b4:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    20b6:	2300      	movs	r3, #0
    20b8:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    20ba:	22ff      	movs	r2, #255	; 0xff
    20bc:	4668      	mov	r0, sp
    20be:	8102      	strh	r2, [r0, #8]
	config->stopbits         = USART_STOPBITS_1;
    20c0:	2200      	movs	r2, #0
    20c2:	7283      	strb	r3, [r0, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    20c4:	72c3      	strb	r3, [r0, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    20c6:	2501      	movs	r5, #1
    20c8:	2124      	movs	r1, #36	; 0x24
    20ca:	5445      	strb	r5, [r0, r1]
	config->transmitter_enable = true;
    20cc:	2125      	movs	r1, #37	; 0x25
    20ce:	5445      	strb	r5, [r0, r1]
	config->clock_polarity_inverted = false;
    20d0:	2126      	movs	r1, #38	; 0x26
    20d2:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    20d4:	2127      	movs	r1, #39	; 0x27
    20d6:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    20d8:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    20da:	212c      	movs	r1, #44	; 0x2c
    20dc:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    20de:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    20e0:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    20e2:	76c3      	strb	r3, [r0, #27]
#endif
#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification      = false;
    20e4:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable                = false;
    20e6:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                      = false;
    20e8:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                        = 19;
    20ea:	2313      	movs	r3, #19
    20ec:	7683      	strb	r3, [r0, #26]
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable                  = false;
    20ee:	7742      	strb	r2, [r0, #29]
	
	struct usart_config conf_usart;
	
	usart_get_config_defaults(&conf_usart);
	
	conf_usart.baudrate = 115200;
    20f0:	23e1      	movs	r3, #225	; 0xe1
    20f2:	025b      	lsls	r3, r3, #9
    20f4:	9308      	str	r3, [sp, #32]
	conf_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    20f6:	2380      	movs	r3, #128	; 0x80
    20f8:	035b      	lsls	r3, r3, #13
    20fa:	9303      	str	r3, [sp, #12]
	conf_usart.generator_source = GCLK_GENERATOR_1;
    20fc:	232d      	movs	r3, #45	; 0x2d
    20fe:	54c5      	strb	r5, [r0, r3]
	conf_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    2100:	4b19      	ldr	r3, [pc, #100]	; (2168 <configure_console+0xbc>)
    2102:	930c      	str	r3, [sp, #48]	; 0x30
	conf_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    2104:	4b19      	ldr	r3, [pc, #100]	; (216c <configure_console+0xc0>)
    2106:	930d      	str	r3, [sp, #52]	; 0x34
	conf_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    2108:	2301      	movs	r3, #1
    210a:	425b      	negs	r3, r3
    210c:	930e      	str	r3, [sp, #56]	; 0x38
	conf_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    210e:	930f      	str	r3, [sp, #60]	; 0x3c
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    2110:	4c17      	ldr	r4, [pc, #92]	; (2170 <configure_console+0xc4>)
    2112:	4b18      	ldr	r3, [pc, #96]	; (2174 <configure_console+0xc8>)
    2114:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    2116:	4a18      	ldr	r2, [pc, #96]	; (2178 <configure_console+0xcc>)
    2118:	4b18      	ldr	r3, [pc, #96]	; (217c <configure_console+0xd0>)
    211a:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    211c:	4a18      	ldr	r2, [pc, #96]	; (2180 <configure_console+0xd4>)
    211e:	4b19      	ldr	r3, [pc, #100]	; (2184 <configure_console+0xd8>)
    2120:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	if (usart_init(module, hw, config) == STATUS_OK) {
    2122:	1c20      	adds	r0, r4, #0
    2124:	4918      	ldr	r1, [pc, #96]	; (2188 <configure_console+0xdc>)
    2126:	466a      	mov	r2, sp
    2128:	4b18      	ldr	r3, [pc, #96]	; (218c <configure_console+0xe0>)
    212a:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    212c:	4f18      	ldr	r7, [pc, #96]	; (2190 <configure_console+0xe4>)
    212e:	683b      	ldr	r3, [r7, #0]
    2130:	6898      	ldr	r0, [r3, #8]
    2132:	2100      	movs	r1, #0
    2134:	4e17      	ldr	r6, [pc, #92]	; (2194 <configure_console+0xe8>)
    2136:	47b0      	blx	r6
	setbuf(stdin, NULL);
    2138:	683b      	ldr	r3, [r7, #0]
    213a:	6858      	ldr	r0, [r3, #4]
    213c:	2100      	movs	r1, #0
    213e:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    2140:	6826      	ldr	r6, [r4, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2142:	1c30      	adds	r0, r6, #0
    2144:	4b14      	ldr	r3, [pc, #80]	; (2198 <configure_console+0xec>)
    2146:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2148:	231f      	movs	r3, #31
    214a:	4018      	ands	r0, r3
    214c:	4085      	lsls	r5, r0
    214e:	4b13      	ldr	r3, [pc, #76]	; (219c <configure_console+0xf0>)
    2150:	601d      	str	r5, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    2152:	6822      	ldr	r2, [r4, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    2154:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    2156:	2b00      	cmp	r3, #0
    2158:	d1fc      	bne.n	2154 <configure_console+0xa8>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    215a:	6832      	ldr	r2, [r6, #0]
    215c:	2302      	movs	r3, #2
    215e:	4313      	orrs	r3, r2
    2160:	6033      	str	r3, [r6, #0]
	
	stdio_serial_init(&console_instance, EDBG_CDC_MODULE, &conf_usart);
	
	usart_enable(&console_instance);
}
    2162:	b011      	add	sp, #68	; 0x44
    2164:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2166:	46c0      	nop			; (mov r8, r8)
    2168:	00160002 	.word	0x00160002
    216c:	00170002 	.word	0x00170002
    2170:	20000150 	.word	0x20000150
    2174:	20000134 	.word	0x20000134
    2178:	00002095 	.word	0x00002095
    217c:	20000130 	.word	0x20000130
    2180:	00002069 	.word	0x00002069
    2184:	2000012c 	.word	0x2000012c
    2188:	42001400 	.word	0x42001400
    218c:	000012c5 	.word	0x000012c5
    2190:	20000070 	.word	0x20000070
    2194:	0000300d 	.word	0x0000300d
    2198:	0000184d 	.word	0x0000184d
    219c:	e000e100 	.word	0xe000e100

000021a0 <adc_ka_result>:

uint16_t adc_ka_result(void)
{
    21a0:	b530      	push	{r4, r5, lr}
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    21a2:	4b22      	ldr	r3, [pc, #136]	; (222c <adc_ka_result+0x8c>)
    21a4:	681c      	ldr	r4, [r3, #0]
    21a6:	7e63      	ldrb	r3, [r4, #25]

	while (adc_is_syncing(module_inst)) {
    21a8:	b25b      	sxtb	r3, r3
    21aa:	2b00      	cmp	r3, #0
    21ac:	dbfb      	blt.n	21a6 <adc_ka_result+0x6>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    21ae:	7b22      	ldrb	r2, [r4, #12]
    21b0:	2302      	movs	r3, #2
    21b2:	4313      	orrs	r3, r2
    21b4:	7323      	strb	r3, [r4, #12]
    21b6:	7e63      	ldrb	r3, [r4, #25]

	while (adc_is_syncing(module_inst)) {
    21b8:	b25b      	sxtb	r3, r3
    21ba:	2b00      	cmp	r3, #0
    21bc:	dbfb      	blt.n	21b6 <adc_ka_result+0x16>
	uint32_t int_flags = adc_module->INTFLAG.reg;

	uint32_t status_flags = 0;

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    21be:	2101      	movs	r1, #1
		status_flags |= ADC_STATUS_RESULT_READY;
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    21c0:	2504      	movs	r5, #4
		status_flags |= ADC_STATUS_WINDOW;
    21c2:	2002      	movs	r0, #2
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	uint32_t int_flags = adc_module->INTFLAG.reg;
    21c4:	7e22      	ldrb	r2, [r4, #24]
    21c6:	b2d2      	uxtb	r2, r2

	uint32_t status_flags = 0;

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    21c8:	1c0b      	adds	r3, r1, #0
    21ca:	4013      	ands	r3, r2
		status_flags |= ADC_STATUS_RESULT_READY;
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    21cc:	4215      	tst	r5, r2
    21ce:	d000      	beq.n	21d2 <adc_ka_result+0x32>
		status_flags |= ADC_STATUS_WINDOW;
    21d0:	4303      	orrs	r3, r0
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    21d2:	4210      	tst	r0, r2
    21d4:	d000      	beq.n	21d8 <adc_ka_result+0x38>
		status_flags |= ADC_STATUS_OVERRUN;
    21d6:	432b      	orrs	r3, r5
	uint16_t adc_result = 0;
	
	adc_start_conversion(&adc_instance);
	while((adc_get_status(&adc_instance) & ADC_STATUS_RESULT_READY) != 1);
    21d8:	4219      	tst	r1, r3
    21da:	d0f3      	beq.n	21c4 <adc_ka_result+0x24>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	uint32_t int_flags = adc_module->INTFLAG.reg;
    21dc:	7e22      	ldrb	r2, [r4, #24]
    21de:	b2d2      	uxtb	r2, r2

	uint32_t status_flags = 0;

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    21e0:	2301      	movs	r3, #1
    21e2:	4013      	ands	r3, r2
		status_flags |= ADC_STATUS_RESULT_READY;
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    21e4:	0751      	lsls	r1, r2, #29
    21e6:	d501      	bpl.n	21ec <adc_ka_result+0x4c>
		status_flags |= ADC_STATUS_WINDOW;
    21e8:	2102      	movs	r1, #2
    21ea:	430b      	orrs	r3, r1
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    21ec:	0791      	lsls	r1, r2, #30
    21ee:	d501      	bpl.n	21f4 <adc_ka_result+0x54>
		status_flags |= ADC_STATUS_OVERRUN;
    21f0:	2204      	movs	r2, #4
    21f2:	4313      	orrs	r3, r2
	usart_enable(&console_instance);
}

uint16_t adc_ka_result(void)
{
	uint16_t adc_result = 0;
    21f4:	2000      	movs	r0, #0
{
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    21f6:	07da      	lsls	r2, r3, #31
    21f8:	d516      	bpl.n	2228 <adc_ka_result+0x88>
    21fa:	7e63      	ldrb	r3, [r4, #25]
		return STATUS_BUSY;
	}

	Adc *const adc_module = module_inst->hw;

	while (adc_is_syncing(module_inst)) {
    21fc:	b25b      	sxtb	r3, r3
    21fe:	2b00      	cmp	r3, #0
    2200:	dbfb      	blt.n	21fa <adc_ka_result+0x5a>
		/* Wait for synchronization */
	}

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    2202:	8b60      	ldrh	r0, [r4, #26]
    2204:	b280      	uxth	r0, r0
	if (status_flags & ADC_STATUS_OVERRUN) {
		int_flags |= ADC_INTFLAG_OVERRUN;
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    2206:	2301      	movs	r3, #1
    2208:	7623      	strb	r3, [r4, #24]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	uint32_t int_flags = adc_module->INTFLAG.reg;
    220a:	7e22      	ldrb	r2, [r4, #24]
    220c:	b2d2      	uxtb	r2, r2

	uint32_t status_flags = 0;

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    220e:	4013      	ands	r3, r2
		status_flags |= ADC_STATUS_RESULT_READY;
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    2210:	0751      	lsls	r1, r2, #29
    2212:	d501      	bpl.n	2218 <adc_ka_result+0x78>
		status_flags |= ADC_STATUS_WINDOW;
    2214:	2102      	movs	r1, #2
    2216:	430b      	orrs	r3, r1
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    2218:	0791      	lsls	r1, r2, #30
    221a:	d501      	bpl.n	2220 <adc_ka_result+0x80>
		status_flags |= ADC_STATUS_OVERRUN;
    221c:	2204      	movs	r2, #4
    221e:	4313      	orrs	r3, r2
	*result = adc_module->RESULT.reg;

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    2220:	075a      	lsls	r2, r3, #29
    2222:	d501      	bpl.n	2228 <adc_ka_result+0x88>
	if (status_flags & ADC_STATUS_OVERRUN) {
		int_flags |= ADC_INTFLAG_OVERRUN;
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    2224:	2302      	movs	r3, #2
    2226:	7623      	strb	r3, [r4, #24]
	while((adc_get_status(&adc_instance) & ADC_STATUS_RESULT_READY) != 1);
	
	adc_read(&adc_instance, &adc_result);
	
	return adc_result;
}
    2228:	bd30      	pop	{r4, r5, pc}
    222a:	46c0      	nop			; (mov r8, r8)
    222c:	20000184 	.word	0x20000184

00002230 <main>:
	tcc_enable(&tcc_instance);
	//! [setup_enable]
}

int main(void)
{
    2230:	b5f0      	push	{r4, r5, r6, r7, lr}
    2232:	b0ab      	sub	sp, #172	; 0xac
	/* Configuration of clock and board */
	system_init();
    2234:	4b25      	ldr	r3, [pc, #148]	; (22cc <main+0x9c>)
    2236:	4798      	blx	r3
	delay_init();
    2238:	4b25      	ldr	r3, [pc, #148]	; (22d0 <main+0xa0>)
    223a:	4798      	blx	r3
	hitecServoInit();
    223c:	4b25      	ldr	r3, [pc, #148]	; (22d4 <main+0xa4>)
    223e:	4798      	blx	r3
	/* Serial Console configuration */
	configure_console();
    2240:	4b25      	ldr	r3, [pc, #148]	; (22d8 <main+0xa8>)
    2242:	4798      	blx	r3
	configure_adc();
    2244:	4b25      	ldr	r3, [pc, #148]	; (22dc <main+0xac>)
    2246:	4798      	blx	r3
{
	//! [setup_config]
	struct tcc_config config_tcc;
	//! [setup_config]
	//! [setup_config_defaults]
	tcc_get_config_defaults(&config_tcc, TCC0);
    2248:	ac01      	add	r4, sp, #4
    224a:	4e25      	ldr	r6, [pc, #148]	; (22e0 <main+0xb0>)
    224c:	1c20      	adds	r0, r4, #0
    224e:	1c31      	adds	r1, r6, #0
    2250:	4b24      	ldr	r3, [pc, #144]	; (22e4 <main+0xb4>)
    2252:	4798      	blx	r3
	//! [setup_config_defaults]

	//! [setup_change_config]
	config_tcc.counter.clock_source = GCLK_GENERATOR_1;
    2254:	2301      	movs	r3, #1
    2256:	72a3      	strb	r3, [r4, #10]
	config_tcc.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV1;
    2258:	2200      	movs	r2, #0
    225a:	72e2      	strb	r2, [r4, #11]
	config_tcc.counter.period =   20000;
    225c:	4a22      	ldr	r2, [pc, #136]	; (22e8 <main+0xb8>)
    225e:	6062      	str	r2, [r4, #4]
	
	config_tcc.compare.wave_generation = TCC_WAVE_GENERATION_SINGLE_SLOPE_PWM;
    2260:	2202      	movs	r2, #2
    2262:	7622      	strb	r2, [r4, #24]
	config_tcc.compare.match[2] = 10000;
    2264:	4a21      	ldr	r2, [pc, #132]	; (22ec <main+0xbc>)
    2266:	6262      	str	r2, [r4, #36]	; 0x24
	
	config_tcc.pins.enable_wave_out_pin[6] = true;
    2268:	229e      	movs	r2, #158	; 0x9e
    226a:	54a3      	strb	r3, [r4, r2]
	config_tcc.pins.wave_out_pin[6] = PIN_PB12F_TCC0_WO6;
    226c:	232c      	movs	r3, #44	; 0x2c
    226e:	6723      	str	r3, [r4, #112]	; 0x70
	config_tcc.pins.wave_out_pin_mux[6] = MUX_PB12F_TCC0_WO6;
    2270:	2205      	movs	r2, #5
    2272:	2390      	movs	r3, #144	; 0x90
    2274:	50e2      	str	r2, [r4, r3]
	// 	config_tcc.compare.match[1] =  930;
	// 	config_tcc.compare.match[2] = 1100;
	// 	//! [setup_change_config]

	//! [setup_set_config]
	tcc_init(&tcc_instance, TCC0, &config_tcc);
    2276:	4d1e      	ldr	r5, [pc, #120]	; (22f0 <main+0xc0>)
    2278:	1c28      	adds	r0, r5, #0
    227a:	1c31      	adds	r1, r6, #0
    227c:	1c22      	adds	r2, r4, #0
    227e:	4b1d      	ldr	r3, [pc, #116]	; (22f4 <main+0xc4>)
    2280:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
    2282:	682b      	ldr	r3, [r5, #0]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
    2284:	2202      	movs	r2, #2
    2286:	6899      	ldr	r1, [r3, #8]
    2288:	420a      	tst	r2, r1
    228a:	d1fc      	bne.n	2286 <main+0x56>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
    228c:	6819      	ldr	r1, [r3, #0]
    228e:	2202      	movs	r2, #2
    2290:	430a      	orrs	r2, r1
    2292:	601a      	str	r2, [r3, #0]
	hitecServoInit();
	/* Serial Console configuration */
	configure_console();
	configure_adc();
	configure_tcc();
	printf("Up and running!");
    2294:	4818      	ldr	r0, [pc, #96]	; (22f8 <main+0xc8>)
    2296:	4b19      	ldr	r3, [pc, #100]	; (22fc <main+0xcc>)
    2298:	4798      	blx	r3
	while (1){
		delay_ms(500);
    229a:	4f19      	ldr	r7, [pc, #100]	; (2300 <main+0xd0>)
		printf("adc value- ");
    229c:	4e19      	ldr	r6, [pc, #100]	; (2304 <main+0xd4>)
    229e:	4d17      	ldr	r5, [pc, #92]	; (22fc <main+0xcc>)
	configure_console();
	configure_adc();
	configure_tcc();
	printf("Up and running!");
	while (1){
		delay_ms(500);
    22a0:	20fa      	movs	r0, #250	; 0xfa
    22a2:	0040      	lsls	r0, r0, #1
    22a4:	47b8      	blx	r7
		printf("adc value- ");
    22a6:	1c30      	adds	r0, r6, #0
    22a8:	47a8      	blx	r5
		uint16_t aval = adc_ka_result();  
    22aa:	4b17      	ldr	r3, [pc, #92]	; (2308 <main+0xd8>)
    22ac:	4798      	blx	r3
    22ae:	1c04      	adds	r4, r0, #0
		printf("%d \r",aval);
    22b0:	4816      	ldr	r0, [pc, #88]	; (230c <main+0xdc>)
    22b2:	1c21      	adds	r1, r4, #0
    22b4:	47a8      	blx	r5
		setHitecServoAngle(aval*180/4096);
    22b6:	23b4      	movs	r3, #180	; 0xb4
    22b8:	435c      	muls	r4, r3
    22ba:	17e0      	asrs	r0, r4, #31
    22bc:	0d00      	lsrs	r0, r0, #20
    22be:	1904      	adds	r4, r0, r4
    22c0:	1320      	asrs	r0, r4, #12
    22c2:	4b13      	ldr	r3, [pc, #76]	; (2310 <main+0xe0>)
    22c4:	4798      	blx	r3
    22c6:	4b13      	ldr	r3, [pc, #76]	; (2314 <main+0xe4>)
    22c8:	4798      	blx	r3
    22ca:	e7e9      	b.n	22a0 <main+0x70>
    22cc:	00001f21 	.word	0x00001f21
    22d0:	000008a5 	.word	0x000008a5
    22d4:	0000017d 	.word	0x0000017d
    22d8:	000020ad 	.word	0x000020ad
    22dc:	00000111 	.word	0x00000111
    22e0:	42002000 	.word	0x42002000
    22e4:	000002d9 	.word	0x000002d9
    22e8:	00004e20 	.word	0x00004e20
    22ec:	00002710 	.word	0x00002710
    22f0:	200000dc 	.word	0x200000dc
    22f4:	00000425 	.word	0x00000425
    22f8:	000040c0 	.word	0x000040c0
    22fc:	00002fd9 	.word	0x00002fd9
    2300:	000008e1 	.word	0x000008e1
    2304:	000040d0 	.word	0x000040d0
    2308:	000021a1 	.word	0x000021a1
    230c:	000040dc 	.word	0x000040dc
    2310:	00002c85 	.word	0x00002c85
    2314:	000001e5 	.word	0x000001e5

00002318 <__aeabi_uidiv>:
    2318:	2900      	cmp	r1, #0
    231a:	d034      	beq.n	2386 <.udivsi3_skip_div0_test+0x6a>

0000231c <.udivsi3_skip_div0_test>:
    231c:	2301      	movs	r3, #1
    231e:	2200      	movs	r2, #0
    2320:	b410      	push	{r4}
    2322:	4288      	cmp	r0, r1
    2324:	d32c      	bcc.n	2380 <.udivsi3_skip_div0_test+0x64>
    2326:	2401      	movs	r4, #1
    2328:	0724      	lsls	r4, r4, #28
    232a:	42a1      	cmp	r1, r4
    232c:	d204      	bcs.n	2338 <.udivsi3_skip_div0_test+0x1c>
    232e:	4281      	cmp	r1, r0
    2330:	d202      	bcs.n	2338 <.udivsi3_skip_div0_test+0x1c>
    2332:	0109      	lsls	r1, r1, #4
    2334:	011b      	lsls	r3, r3, #4
    2336:	e7f8      	b.n	232a <.udivsi3_skip_div0_test+0xe>
    2338:	00e4      	lsls	r4, r4, #3
    233a:	42a1      	cmp	r1, r4
    233c:	d204      	bcs.n	2348 <.udivsi3_skip_div0_test+0x2c>
    233e:	4281      	cmp	r1, r0
    2340:	d202      	bcs.n	2348 <.udivsi3_skip_div0_test+0x2c>
    2342:	0049      	lsls	r1, r1, #1
    2344:	005b      	lsls	r3, r3, #1
    2346:	e7f8      	b.n	233a <.udivsi3_skip_div0_test+0x1e>
    2348:	4288      	cmp	r0, r1
    234a:	d301      	bcc.n	2350 <.udivsi3_skip_div0_test+0x34>
    234c:	1a40      	subs	r0, r0, r1
    234e:	431a      	orrs	r2, r3
    2350:	084c      	lsrs	r4, r1, #1
    2352:	42a0      	cmp	r0, r4
    2354:	d302      	bcc.n	235c <.udivsi3_skip_div0_test+0x40>
    2356:	1b00      	subs	r0, r0, r4
    2358:	085c      	lsrs	r4, r3, #1
    235a:	4322      	orrs	r2, r4
    235c:	088c      	lsrs	r4, r1, #2
    235e:	42a0      	cmp	r0, r4
    2360:	d302      	bcc.n	2368 <.udivsi3_skip_div0_test+0x4c>
    2362:	1b00      	subs	r0, r0, r4
    2364:	089c      	lsrs	r4, r3, #2
    2366:	4322      	orrs	r2, r4
    2368:	08cc      	lsrs	r4, r1, #3
    236a:	42a0      	cmp	r0, r4
    236c:	d302      	bcc.n	2374 <.udivsi3_skip_div0_test+0x58>
    236e:	1b00      	subs	r0, r0, r4
    2370:	08dc      	lsrs	r4, r3, #3
    2372:	4322      	orrs	r2, r4
    2374:	2800      	cmp	r0, #0
    2376:	d003      	beq.n	2380 <.udivsi3_skip_div0_test+0x64>
    2378:	091b      	lsrs	r3, r3, #4
    237a:	d001      	beq.n	2380 <.udivsi3_skip_div0_test+0x64>
    237c:	0909      	lsrs	r1, r1, #4
    237e:	e7e3      	b.n	2348 <.udivsi3_skip_div0_test+0x2c>
    2380:	1c10      	adds	r0, r2, #0
    2382:	bc10      	pop	{r4}
    2384:	4770      	bx	lr
    2386:	2800      	cmp	r0, #0
    2388:	d001      	beq.n	238e <.udivsi3_skip_div0_test+0x72>
    238a:	2000      	movs	r0, #0
    238c:	43c0      	mvns	r0, r0
    238e:	b407      	push	{r0, r1, r2}
    2390:	4802      	ldr	r0, [pc, #8]	; (239c <.udivsi3_skip_div0_test+0x80>)
    2392:	a102      	add	r1, pc, #8	; (adr r1, 239c <.udivsi3_skip_div0_test+0x80>)
    2394:	1840      	adds	r0, r0, r1
    2396:	9002      	str	r0, [sp, #8]
    2398:	bd03      	pop	{r0, r1, pc}
    239a:	46c0      	nop			; (mov r8, r8)
    239c:	00000019 	.word	0x00000019

000023a0 <__aeabi_uidivmod>:
    23a0:	2900      	cmp	r1, #0
    23a2:	d0f0      	beq.n	2386 <.udivsi3_skip_div0_test+0x6a>
    23a4:	b503      	push	{r0, r1, lr}
    23a6:	f7ff ffb9 	bl	231c <.udivsi3_skip_div0_test>
    23aa:	bc0e      	pop	{r1, r2, r3}
    23ac:	4342      	muls	r2, r0
    23ae:	1a89      	subs	r1, r1, r2
    23b0:	4718      	bx	r3
    23b2:	46c0      	nop			; (mov r8, r8)

000023b4 <__aeabi_idiv0>:
    23b4:	4770      	bx	lr
    23b6:	46c0      	nop			; (mov r8, r8)

000023b8 <__aeabi_lmul>:
    23b8:	469c      	mov	ip, r3
    23ba:	0403      	lsls	r3, r0, #16
    23bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    23be:	0c1b      	lsrs	r3, r3, #16
    23c0:	0417      	lsls	r7, r2, #16
    23c2:	0c3f      	lsrs	r7, r7, #16
    23c4:	0c15      	lsrs	r5, r2, #16
    23c6:	1c1e      	adds	r6, r3, #0
    23c8:	1c04      	adds	r4, r0, #0
    23ca:	0c00      	lsrs	r0, r0, #16
    23cc:	437e      	muls	r6, r7
    23ce:	436b      	muls	r3, r5
    23d0:	4347      	muls	r7, r0
    23d2:	4345      	muls	r5, r0
    23d4:	18fb      	adds	r3, r7, r3
    23d6:	0c30      	lsrs	r0, r6, #16
    23d8:	1818      	adds	r0, r3, r0
    23da:	4287      	cmp	r7, r0
    23dc:	d902      	bls.n	23e4 <__aeabi_lmul+0x2c>
    23de:	2380      	movs	r3, #128	; 0x80
    23e0:	025b      	lsls	r3, r3, #9
    23e2:	18ed      	adds	r5, r5, r3
    23e4:	0c03      	lsrs	r3, r0, #16
    23e6:	18ed      	adds	r5, r5, r3
    23e8:	4663      	mov	r3, ip
    23ea:	435c      	muls	r4, r3
    23ec:	434a      	muls	r2, r1
    23ee:	0436      	lsls	r6, r6, #16
    23f0:	0c36      	lsrs	r6, r6, #16
    23f2:	18a1      	adds	r1, r4, r2
    23f4:	0400      	lsls	r0, r0, #16
    23f6:	1980      	adds	r0, r0, r6
    23f8:	1949      	adds	r1, r1, r5
    23fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000023fc <__aeabi_f2uiz>:
    23fc:	219e      	movs	r1, #158	; 0x9e
    23fe:	b510      	push	{r4, lr}
    2400:	05c9      	lsls	r1, r1, #23
    2402:	1c04      	adds	r4, r0, #0
    2404:	f000 fcca 	bl	2d9c <__aeabi_fcmpge>
    2408:	2800      	cmp	r0, #0
    240a:	d103      	bne.n	2414 <__aeabi_f2uiz+0x18>
    240c:	1c20      	adds	r0, r4, #0
    240e:	f000 fc19 	bl	2c44 <__aeabi_f2iz>
    2412:	bd10      	pop	{r4, pc}
    2414:	219e      	movs	r1, #158	; 0x9e
    2416:	05c9      	lsls	r1, r1, #23
    2418:	1c20      	adds	r0, r4, #0
    241a:	f000 fa9d 	bl	2958 <__aeabi_fsub>
    241e:	f000 fc11 	bl	2c44 <__aeabi_f2iz>
    2422:	2380      	movs	r3, #128	; 0x80
    2424:	061b      	lsls	r3, r3, #24
    2426:	18c0      	adds	r0, r0, r3
    2428:	e7f3      	b.n	2412 <__aeabi_f2uiz+0x16>
    242a:	46c0      	nop			; (mov r8, r8)

0000242c <__aeabi_fadd>:
    242c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    242e:	0243      	lsls	r3, r0, #9
    2430:	0044      	lsls	r4, r0, #1
    2432:	0fc5      	lsrs	r5, r0, #31
    2434:	024e      	lsls	r6, r1, #9
    2436:	0048      	lsls	r0, r1, #1
    2438:	0e24      	lsrs	r4, r4, #24
    243a:	1c2a      	adds	r2, r5, #0
    243c:	099b      	lsrs	r3, r3, #6
    243e:	0e00      	lsrs	r0, r0, #24
    2440:	0fc9      	lsrs	r1, r1, #31
    2442:	09b6      	lsrs	r6, r6, #6
    2444:	428d      	cmp	r5, r1
    2446:	d05b      	beq.n	2500 <__aeabi_fadd+0xd4>
    2448:	1a22      	subs	r2, r4, r0
    244a:	2a00      	cmp	r2, #0
    244c:	dc00      	bgt.n	2450 <__aeabi_fadd+0x24>
    244e:	e089      	b.n	2564 <__aeabi_fadd+0x138>
    2450:	2800      	cmp	r0, #0
    2452:	d11d      	bne.n	2490 <__aeabi_fadd+0x64>
    2454:	2e00      	cmp	r6, #0
    2456:	d000      	beq.n	245a <__aeabi_fadd+0x2e>
    2458:	e075      	b.n	2546 <__aeabi_fadd+0x11a>
    245a:	0758      	lsls	r0, r3, #29
    245c:	d004      	beq.n	2468 <__aeabi_fadd+0x3c>
    245e:	220f      	movs	r2, #15
    2460:	401a      	ands	r2, r3
    2462:	2a04      	cmp	r2, #4
    2464:	d000      	beq.n	2468 <__aeabi_fadd+0x3c>
    2466:	3304      	adds	r3, #4
    2468:	2180      	movs	r1, #128	; 0x80
    246a:	04c9      	lsls	r1, r1, #19
    246c:	4019      	ands	r1, r3
    246e:	1c2a      	adds	r2, r5, #0
    2470:	2900      	cmp	r1, #0
    2472:	d03a      	beq.n	24ea <__aeabi_fadd+0xbe>
    2474:	3401      	adds	r4, #1
    2476:	2cff      	cmp	r4, #255	; 0xff
    2478:	d100      	bne.n	247c <__aeabi_fadd+0x50>
    247a:	e07f      	b.n	257c <__aeabi_fadd+0x150>
    247c:	019b      	lsls	r3, r3, #6
    247e:	0a5b      	lsrs	r3, r3, #9
    2480:	025b      	lsls	r3, r3, #9
    2482:	b2e4      	uxtb	r4, r4
    2484:	05e4      	lsls	r4, r4, #23
    2486:	0a58      	lsrs	r0, r3, #9
    2488:	07d2      	lsls	r2, r2, #31
    248a:	4320      	orrs	r0, r4
    248c:	4310      	orrs	r0, r2
    248e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2490:	2cff      	cmp	r4, #255	; 0xff
    2492:	d0e2      	beq.n	245a <__aeabi_fadd+0x2e>
    2494:	2180      	movs	r1, #128	; 0x80
    2496:	04c9      	lsls	r1, r1, #19
    2498:	430e      	orrs	r6, r1
    249a:	2a1b      	cmp	r2, #27
    249c:	dd00      	ble.n	24a0 <__aeabi_fadd+0x74>
    249e:	e12d      	b.n	26fc <__aeabi_fadd+0x2d0>
    24a0:	1c31      	adds	r1, r6, #0
    24a2:	2020      	movs	r0, #32
    24a4:	40d1      	lsrs	r1, r2
    24a6:	1a82      	subs	r2, r0, r2
    24a8:	4096      	lsls	r6, r2
    24aa:	1e72      	subs	r2, r6, #1
    24ac:	4196      	sbcs	r6, r2
    24ae:	430e      	orrs	r6, r1
    24b0:	1b9b      	subs	r3, r3, r6
    24b2:	0158      	lsls	r0, r3, #5
    24b4:	d5d1      	bpl.n	245a <__aeabi_fadd+0x2e>
    24b6:	019b      	lsls	r3, r3, #6
    24b8:	099f      	lsrs	r7, r3, #6
    24ba:	1c38      	adds	r0, r7, #0
    24bc:	f000 fc78 	bl	2db0 <__clzsi2>
    24c0:	1f42      	subs	r2, r0, #5
    24c2:	4097      	lsls	r7, r2
    24c4:	4294      	cmp	r4, r2
    24c6:	dc5b      	bgt.n	2580 <__aeabi_fadd+0x154>
    24c8:	1b14      	subs	r4, r2, r4
    24ca:	231f      	movs	r3, #31
    24cc:	1b1b      	subs	r3, r3, r4
    24ce:	1c3a      	adds	r2, r7, #0
    24d0:	409f      	lsls	r7, r3
    24d2:	1c61      	adds	r1, r4, #1
    24d4:	1c3b      	adds	r3, r7, #0
    24d6:	40ca      	lsrs	r2, r1
    24d8:	1e5f      	subs	r7, r3, #1
    24da:	41bb      	sbcs	r3, r7
    24dc:	4313      	orrs	r3, r2
    24de:	2400      	movs	r4, #0
    24e0:	e7bb      	b.n	245a <__aeabi_fadd+0x2e>
    24e2:	1e13      	subs	r3, r2, #0
    24e4:	d1b9      	bne.n	245a <__aeabi_fadd+0x2e>
    24e6:	2300      	movs	r3, #0
    24e8:	2200      	movs	r2, #0
    24ea:	08db      	lsrs	r3, r3, #3
    24ec:	2cff      	cmp	r4, #255	; 0xff
    24ee:	d104      	bne.n	24fa <__aeabi_fadd+0xce>
    24f0:	2b00      	cmp	r3, #0
    24f2:	d043      	beq.n	257c <__aeabi_fadd+0x150>
    24f4:	2080      	movs	r0, #128	; 0x80
    24f6:	03c0      	lsls	r0, r0, #15
    24f8:	4303      	orrs	r3, r0
    24fa:	025b      	lsls	r3, r3, #9
    24fc:	0a5b      	lsrs	r3, r3, #9
    24fe:	e7bf      	b.n	2480 <__aeabi_fadd+0x54>
    2500:	1a21      	subs	r1, r4, r0
    2502:	2900      	cmp	r1, #0
    2504:	dd40      	ble.n	2588 <__aeabi_fadd+0x15c>
    2506:	2800      	cmp	r0, #0
    2508:	d023      	beq.n	2552 <__aeabi_fadd+0x126>
    250a:	2cff      	cmp	r4, #255	; 0xff
    250c:	d0a5      	beq.n	245a <__aeabi_fadd+0x2e>
    250e:	2080      	movs	r0, #128	; 0x80
    2510:	04c0      	lsls	r0, r0, #19
    2512:	4306      	orrs	r6, r0
    2514:	291b      	cmp	r1, #27
    2516:	dd00      	ble.n	251a <__aeabi_fadd+0xee>
    2518:	e0ee      	b.n	26f8 <__aeabi_fadd+0x2cc>
    251a:	1c30      	adds	r0, r6, #0
    251c:	2720      	movs	r7, #32
    251e:	40c8      	lsrs	r0, r1
    2520:	1a79      	subs	r1, r7, r1
    2522:	408e      	lsls	r6, r1
    2524:	1e71      	subs	r1, r6, #1
    2526:	418e      	sbcs	r6, r1
    2528:	4306      	orrs	r6, r0
    252a:	199b      	adds	r3, r3, r6
    252c:	0159      	lsls	r1, r3, #5
    252e:	d400      	bmi.n	2532 <__aeabi_fadd+0x106>
    2530:	e793      	b.n	245a <__aeabi_fadd+0x2e>
    2532:	3401      	adds	r4, #1
    2534:	2cff      	cmp	r4, #255	; 0xff
    2536:	d055      	beq.n	25e4 <__aeabi_fadd+0x1b8>
    2538:	4971      	ldr	r1, [pc, #452]	; (2700 <__aeabi_fadd+0x2d4>)
    253a:	2201      	movs	r2, #1
    253c:	401a      	ands	r2, r3
    253e:	400b      	ands	r3, r1
    2540:	085b      	lsrs	r3, r3, #1
    2542:	4313      	orrs	r3, r2
    2544:	e789      	b.n	245a <__aeabi_fadd+0x2e>
    2546:	3a01      	subs	r2, #1
    2548:	2a00      	cmp	r2, #0
    254a:	d0b1      	beq.n	24b0 <__aeabi_fadd+0x84>
    254c:	2cff      	cmp	r4, #255	; 0xff
    254e:	d1a4      	bne.n	249a <__aeabi_fadd+0x6e>
    2550:	e783      	b.n	245a <__aeabi_fadd+0x2e>
    2552:	2e00      	cmp	r6, #0
    2554:	d100      	bne.n	2558 <__aeabi_fadd+0x12c>
    2556:	e780      	b.n	245a <__aeabi_fadd+0x2e>
    2558:	3901      	subs	r1, #1
    255a:	2900      	cmp	r1, #0
    255c:	d0e5      	beq.n	252a <__aeabi_fadd+0xfe>
    255e:	2cff      	cmp	r4, #255	; 0xff
    2560:	d1d8      	bne.n	2514 <__aeabi_fadd+0xe8>
    2562:	e77a      	b.n	245a <__aeabi_fadd+0x2e>
    2564:	2a00      	cmp	r2, #0
    2566:	d11b      	bne.n	25a0 <__aeabi_fadd+0x174>
    2568:	1c62      	adds	r2, r4, #1
    256a:	b2d2      	uxtb	r2, r2
    256c:	2a01      	cmp	r2, #1
    256e:	dd4b      	ble.n	2608 <__aeabi_fadd+0x1dc>
    2570:	1b9f      	subs	r7, r3, r6
    2572:	017a      	lsls	r2, r7, #5
    2574:	d523      	bpl.n	25be <__aeabi_fadd+0x192>
    2576:	1af7      	subs	r7, r6, r3
    2578:	1c0d      	adds	r5, r1, #0
    257a:	e79e      	b.n	24ba <__aeabi_fadd+0x8e>
    257c:	2300      	movs	r3, #0
    257e:	e77f      	b.n	2480 <__aeabi_fadd+0x54>
    2580:	4b5f      	ldr	r3, [pc, #380]	; (2700 <__aeabi_fadd+0x2d4>)
    2582:	1aa4      	subs	r4, r4, r2
    2584:	403b      	ands	r3, r7
    2586:	e768      	b.n	245a <__aeabi_fadd+0x2e>
    2588:	2900      	cmp	r1, #0
    258a:	d146      	bne.n	261a <__aeabi_fadd+0x1ee>
    258c:	1c61      	adds	r1, r4, #1
    258e:	b2c8      	uxtb	r0, r1
    2590:	2801      	cmp	r0, #1
    2592:	dd29      	ble.n	25e8 <__aeabi_fadd+0x1bc>
    2594:	29ff      	cmp	r1, #255	; 0xff
    2596:	d024      	beq.n	25e2 <__aeabi_fadd+0x1b6>
    2598:	18f3      	adds	r3, r6, r3
    259a:	085b      	lsrs	r3, r3, #1
    259c:	1c0c      	adds	r4, r1, #0
    259e:	e75c      	b.n	245a <__aeabi_fadd+0x2e>
    25a0:	2c00      	cmp	r4, #0
    25a2:	d013      	beq.n	25cc <__aeabi_fadd+0x1a0>
    25a4:	28ff      	cmp	r0, #255	; 0xff
    25a6:	d018      	beq.n	25da <__aeabi_fadd+0x1ae>
    25a8:	2480      	movs	r4, #128	; 0x80
    25aa:	04e4      	lsls	r4, r4, #19
    25ac:	4252      	negs	r2, r2
    25ae:	4323      	orrs	r3, r4
    25b0:	2a1b      	cmp	r2, #27
    25b2:	dd4d      	ble.n	2650 <__aeabi_fadd+0x224>
    25b4:	2301      	movs	r3, #1
    25b6:	1af3      	subs	r3, r6, r3
    25b8:	1c04      	adds	r4, r0, #0
    25ba:	1c0d      	adds	r5, r1, #0
    25bc:	e779      	b.n	24b2 <__aeabi_fadd+0x86>
    25be:	2f00      	cmp	r7, #0
    25c0:	d000      	beq.n	25c4 <__aeabi_fadd+0x198>
    25c2:	e77a      	b.n	24ba <__aeabi_fadd+0x8e>
    25c4:	2300      	movs	r3, #0
    25c6:	2200      	movs	r2, #0
    25c8:	2400      	movs	r4, #0
    25ca:	e78e      	b.n	24ea <__aeabi_fadd+0xbe>
    25cc:	2b00      	cmp	r3, #0
    25ce:	d03b      	beq.n	2648 <__aeabi_fadd+0x21c>
    25d0:	43d2      	mvns	r2, r2
    25d2:	2a00      	cmp	r2, #0
    25d4:	d0ef      	beq.n	25b6 <__aeabi_fadd+0x18a>
    25d6:	28ff      	cmp	r0, #255	; 0xff
    25d8:	d1ea      	bne.n	25b0 <__aeabi_fadd+0x184>
    25da:	1c33      	adds	r3, r6, #0
    25dc:	24ff      	movs	r4, #255	; 0xff
    25de:	1c0d      	adds	r5, r1, #0
    25e0:	e73b      	b.n	245a <__aeabi_fadd+0x2e>
    25e2:	24ff      	movs	r4, #255	; 0xff
    25e4:	2300      	movs	r3, #0
    25e6:	e780      	b.n	24ea <__aeabi_fadd+0xbe>
    25e8:	2c00      	cmp	r4, #0
    25ea:	d15c      	bne.n	26a6 <__aeabi_fadd+0x27a>
    25ec:	2b00      	cmp	r3, #0
    25ee:	d100      	bne.n	25f2 <__aeabi_fadd+0x1c6>
    25f0:	e080      	b.n	26f4 <__aeabi_fadd+0x2c8>
    25f2:	2e00      	cmp	r6, #0
    25f4:	d100      	bne.n	25f8 <__aeabi_fadd+0x1cc>
    25f6:	e730      	b.n	245a <__aeabi_fadd+0x2e>
    25f8:	199b      	adds	r3, r3, r6
    25fa:	0158      	lsls	r0, r3, #5
    25fc:	d400      	bmi.n	2600 <__aeabi_fadd+0x1d4>
    25fe:	e72c      	b.n	245a <__aeabi_fadd+0x2e>
    2600:	4a3f      	ldr	r2, [pc, #252]	; (2700 <__aeabi_fadd+0x2d4>)
    2602:	2401      	movs	r4, #1
    2604:	4013      	ands	r3, r2
    2606:	e728      	b.n	245a <__aeabi_fadd+0x2e>
    2608:	2c00      	cmp	r4, #0
    260a:	d115      	bne.n	2638 <__aeabi_fadd+0x20c>
    260c:	2b00      	cmp	r3, #0
    260e:	d140      	bne.n	2692 <__aeabi_fadd+0x266>
    2610:	2e00      	cmp	r6, #0
    2612:	d063      	beq.n	26dc <__aeabi_fadd+0x2b0>
    2614:	1c33      	adds	r3, r6, #0
    2616:	1c0d      	adds	r5, r1, #0
    2618:	e71f      	b.n	245a <__aeabi_fadd+0x2e>
    261a:	2c00      	cmp	r4, #0
    261c:	d121      	bne.n	2662 <__aeabi_fadd+0x236>
    261e:	2b00      	cmp	r3, #0
    2620:	d054      	beq.n	26cc <__aeabi_fadd+0x2a0>
    2622:	43c9      	mvns	r1, r1
    2624:	2900      	cmp	r1, #0
    2626:	d004      	beq.n	2632 <__aeabi_fadd+0x206>
    2628:	28ff      	cmp	r0, #255	; 0xff
    262a:	d04c      	beq.n	26c6 <__aeabi_fadd+0x29a>
    262c:	291b      	cmp	r1, #27
    262e:	dd58      	ble.n	26e2 <__aeabi_fadd+0x2b6>
    2630:	2301      	movs	r3, #1
    2632:	199b      	adds	r3, r3, r6
    2634:	1c04      	adds	r4, r0, #0
    2636:	e779      	b.n	252c <__aeabi_fadd+0x100>
    2638:	2b00      	cmp	r3, #0
    263a:	d119      	bne.n	2670 <__aeabi_fadd+0x244>
    263c:	2e00      	cmp	r6, #0
    263e:	d048      	beq.n	26d2 <__aeabi_fadd+0x2a6>
    2640:	1c33      	adds	r3, r6, #0
    2642:	1c0d      	adds	r5, r1, #0
    2644:	24ff      	movs	r4, #255	; 0xff
    2646:	e708      	b.n	245a <__aeabi_fadd+0x2e>
    2648:	1c33      	adds	r3, r6, #0
    264a:	1c04      	adds	r4, r0, #0
    264c:	1c0d      	adds	r5, r1, #0
    264e:	e704      	b.n	245a <__aeabi_fadd+0x2e>
    2650:	1c1c      	adds	r4, r3, #0
    2652:	2520      	movs	r5, #32
    2654:	40d4      	lsrs	r4, r2
    2656:	1aaa      	subs	r2, r5, r2
    2658:	4093      	lsls	r3, r2
    265a:	1e5a      	subs	r2, r3, #1
    265c:	4193      	sbcs	r3, r2
    265e:	4323      	orrs	r3, r4
    2660:	e7a9      	b.n	25b6 <__aeabi_fadd+0x18a>
    2662:	28ff      	cmp	r0, #255	; 0xff
    2664:	d02f      	beq.n	26c6 <__aeabi_fadd+0x29a>
    2666:	2480      	movs	r4, #128	; 0x80
    2668:	04e4      	lsls	r4, r4, #19
    266a:	4249      	negs	r1, r1
    266c:	4323      	orrs	r3, r4
    266e:	e7dd      	b.n	262c <__aeabi_fadd+0x200>
    2670:	24ff      	movs	r4, #255	; 0xff
    2672:	2e00      	cmp	r6, #0
    2674:	d100      	bne.n	2678 <__aeabi_fadd+0x24c>
    2676:	e6f0      	b.n	245a <__aeabi_fadd+0x2e>
    2678:	2280      	movs	r2, #128	; 0x80
    267a:	08db      	lsrs	r3, r3, #3
    267c:	03d2      	lsls	r2, r2, #15
    267e:	4213      	tst	r3, r2
    2680:	d004      	beq.n	268c <__aeabi_fadd+0x260>
    2682:	08f6      	lsrs	r6, r6, #3
    2684:	4216      	tst	r6, r2
    2686:	d101      	bne.n	268c <__aeabi_fadd+0x260>
    2688:	1c33      	adds	r3, r6, #0
    268a:	1c0d      	adds	r5, r1, #0
    268c:	00db      	lsls	r3, r3, #3
    268e:	24ff      	movs	r4, #255	; 0xff
    2690:	e6e3      	b.n	245a <__aeabi_fadd+0x2e>
    2692:	2e00      	cmp	r6, #0
    2694:	d100      	bne.n	2698 <__aeabi_fadd+0x26c>
    2696:	e6e0      	b.n	245a <__aeabi_fadd+0x2e>
    2698:	1b9a      	subs	r2, r3, r6
    269a:	0150      	lsls	r0, r2, #5
    269c:	d400      	bmi.n	26a0 <__aeabi_fadd+0x274>
    269e:	e720      	b.n	24e2 <__aeabi_fadd+0xb6>
    26a0:	1af3      	subs	r3, r6, r3
    26a2:	1c0d      	adds	r5, r1, #0
    26a4:	e6d9      	b.n	245a <__aeabi_fadd+0x2e>
    26a6:	2b00      	cmp	r3, #0
    26a8:	d00d      	beq.n	26c6 <__aeabi_fadd+0x29a>
    26aa:	24ff      	movs	r4, #255	; 0xff
    26ac:	2e00      	cmp	r6, #0
    26ae:	d100      	bne.n	26b2 <__aeabi_fadd+0x286>
    26b0:	e6d3      	b.n	245a <__aeabi_fadd+0x2e>
    26b2:	2280      	movs	r2, #128	; 0x80
    26b4:	08db      	lsrs	r3, r3, #3
    26b6:	03d2      	lsls	r2, r2, #15
    26b8:	4213      	tst	r3, r2
    26ba:	d0e7      	beq.n	268c <__aeabi_fadd+0x260>
    26bc:	08f6      	lsrs	r6, r6, #3
    26be:	4216      	tst	r6, r2
    26c0:	d1e4      	bne.n	268c <__aeabi_fadd+0x260>
    26c2:	1c33      	adds	r3, r6, #0
    26c4:	e7e2      	b.n	268c <__aeabi_fadd+0x260>
    26c6:	1c33      	adds	r3, r6, #0
    26c8:	24ff      	movs	r4, #255	; 0xff
    26ca:	e6c6      	b.n	245a <__aeabi_fadd+0x2e>
    26cc:	1c33      	adds	r3, r6, #0
    26ce:	1c04      	adds	r4, r0, #0
    26d0:	e6c3      	b.n	245a <__aeabi_fadd+0x2e>
    26d2:	2380      	movs	r3, #128	; 0x80
    26d4:	2200      	movs	r2, #0
    26d6:	049b      	lsls	r3, r3, #18
    26d8:	24ff      	movs	r4, #255	; 0xff
    26da:	e706      	b.n	24ea <__aeabi_fadd+0xbe>
    26dc:	1c23      	adds	r3, r4, #0
    26de:	2200      	movs	r2, #0
    26e0:	e703      	b.n	24ea <__aeabi_fadd+0xbe>
    26e2:	1c1c      	adds	r4, r3, #0
    26e4:	2720      	movs	r7, #32
    26e6:	40cc      	lsrs	r4, r1
    26e8:	1a79      	subs	r1, r7, r1
    26ea:	408b      	lsls	r3, r1
    26ec:	1e59      	subs	r1, r3, #1
    26ee:	418b      	sbcs	r3, r1
    26f0:	4323      	orrs	r3, r4
    26f2:	e79e      	b.n	2632 <__aeabi_fadd+0x206>
    26f4:	1c33      	adds	r3, r6, #0
    26f6:	e6b0      	b.n	245a <__aeabi_fadd+0x2e>
    26f8:	2601      	movs	r6, #1
    26fa:	e716      	b.n	252a <__aeabi_fadd+0xfe>
    26fc:	2601      	movs	r6, #1
    26fe:	e6d7      	b.n	24b0 <__aeabi_fadd+0x84>
    2700:	fbffffff 	.word	0xfbffffff

00002704 <__aeabi_fmul>:
    2704:	b5f0      	push	{r4, r5, r6, r7, lr}
    2706:	465f      	mov	r7, fp
    2708:	4656      	mov	r6, sl
    270a:	464d      	mov	r5, r9
    270c:	4644      	mov	r4, r8
    270e:	b4f0      	push	{r4, r5, r6, r7}
    2710:	0244      	lsls	r4, r0, #9
    2712:	0046      	lsls	r6, r0, #1
    2714:	b083      	sub	sp, #12
    2716:	1c0f      	adds	r7, r1, #0
    2718:	0a64      	lsrs	r4, r4, #9
    271a:	0e36      	lsrs	r6, r6, #24
    271c:	0fc5      	lsrs	r5, r0, #31
    271e:	2e00      	cmp	r6, #0
    2720:	d041      	beq.n	27a6 <__aeabi_fmul+0xa2>
    2722:	2eff      	cmp	r6, #255	; 0xff
    2724:	d022      	beq.n	276c <__aeabi_fmul+0x68>
    2726:	2380      	movs	r3, #128	; 0x80
    2728:	041b      	lsls	r3, r3, #16
    272a:	2000      	movs	r0, #0
    272c:	431c      	orrs	r4, r3
    272e:	00e4      	lsls	r4, r4, #3
    2730:	3e7f      	subs	r6, #127	; 0x7f
    2732:	4682      	mov	sl, r0
    2734:	4680      	mov	r8, r0
    2736:	1c39      	adds	r1, r7, #0
    2738:	004b      	lsls	r3, r1, #1
    273a:	027f      	lsls	r7, r7, #9
    273c:	0fc9      	lsrs	r1, r1, #31
    273e:	0a7f      	lsrs	r7, r7, #9
    2740:	0e1b      	lsrs	r3, r3, #24
    2742:	468b      	mov	fp, r1
    2744:	d03b      	beq.n	27be <__aeabi_fmul+0xba>
    2746:	2bff      	cmp	r3, #255	; 0xff
    2748:	d034      	beq.n	27b4 <__aeabi_fmul+0xb0>
    274a:	2280      	movs	r2, #128	; 0x80
    274c:	0412      	lsls	r2, r2, #16
    274e:	4317      	orrs	r7, r2
    2750:	00ff      	lsls	r7, r7, #3
    2752:	3b7f      	subs	r3, #127	; 0x7f
    2754:	2100      	movs	r1, #0
    2756:	465a      	mov	r2, fp
    2758:	406a      	eors	r2, r5
    275a:	9201      	str	r2, [sp, #4]
    275c:	4652      	mov	r2, sl
    275e:	430a      	orrs	r2, r1
    2760:	2a0f      	cmp	r2, #15
    2762:	d863      	bhi.n	282c <__aeabi_fmul+0x128>
    2764:	487a      	ldr	r0, [pc, #488]	; (2950 <__aeabi_fmul+0x24c>)
    2766:	0092      	lsls	r2, r2, #2
    2768:	5882      	ldr	r2, [r0, r2]
    276a:	4697      	mov	pc, r2
    276c:	2c00      	cmp	r4, #0
    276e:	d13f      	bne.n	27f0 <__aeabi_fmul+0xec>
    2770:	2208      	movs	r2, #8
    2772:	2302      	movs	r3, #2
    2774:	4692      	mov	sl, r2
    2776:	4698      	mov	r8, r3
    2778:	e7dd      	b.n	2736 <__aeabi_fmul+0x32>
    277a:	9501      	str	r5, [sp, #4]
    277c:	4640      	mov	r0, r8
    277e:	2802      	cmp	r0, #2
    2780:	d12a      	bne.n	27d8 <__aeabi_fmul+0xd4>
    2782:	9a01      	ldr	r2, [sp, #4]
    2784:	2501      	movs	r5, #1
    2786:	4015      	ands	r5, r2
    2788:	23ff      	movs	r3, #255	; 0xff
    278a:	2400      	movs	r4, #0
    278c:	0264      	lsls	r4, r4, #9
    278e:	05db      	lsls	r3, r3, #23
    2790:	0a60      	lsrs	r0, r4, #9
    2792:	07ed      	lsls	r5, r5, #31
    2794:	4318      	orrs	r0, r3
    2796:	4328      	orrs	r0, r5
    2798:	b003      	add	sp, #12
    279a:	bc3c      	pop	{r2, r3, r4, r5}
    279c:	4690      	mov	r8, r2
    279e:	4699      	mov	r9, r3
    27a0:	46a2      	mov	sl, r4
    27a2:	46ab      	mov	fp, r5
    27a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    27a6:	2c00      	cmp	r4, #0
    27a8:	d127      	bne.n	27fa <__aeabi_fmul+0xf6>
    27aa:	2004      	movs	r0, #4
    27ac:	2201      	movs	r2, #1
    27ae:	4682      	mov	sl, r0
    27b0:	4690      	mov	r8, r2
    27b2:	e7c0      	b.n	2736 <__aeabi_fmul+0x32>
    27b4:	1c39      	adds	r1, r7, #0
    27b6:	1e4a      	subs	r2, r1, #1
    27b8:	4191      	sbcs	r1, r2
    27ba:	3102      	adds	r1, #2
    27bc:	e7cb      	b.n	2756 <__aeabi_fmul+0x52>
    27be:	2101      	movs	r1, #1
    27c0:	2f00      	cmp	r7, #0
    27c2:	d0c8      	beq.n	2756 <__aeabi_fmul+0x52>
    27c4:	1c38      	adds	r0, r7, #0
    27c6:	f000 faf3 	bl	2db0 <__clzsi2>
    27ca:	1f43      	subs	r3, r0, #5
    27cc:	409f      	lsls	r7, r3
    27ce:	2376      	movs	r3, #118	; 0x76
    27d0:	425b      	negs	r3, r3
    27d2:	1a1b      	subs	r3, r3, r0
    27d4:	2100      	movs	r1, #0
    27d6:	e7be      	b.n	2756 <__aeabi_fmul+0x52>
    27d8:	2803      	cmp	r0, #3
    27da:	d100      	bne.n	27de <__aeabi_fmul+0xda>
    27dc:	e0ae      	b.n	293c <__aeabi_fmul+0x238>
    27de:	2801      	cmp	r0, #1
    27e0:	d14f      	bne.n	2882 <__aeabi_fmul+0x17e>
    27e2:	9801      	ldr	r0, [sp, #4]
    27e4:	4642      	mov	r2, r8
    27e6:	4010      	ands	r0, r2
    27e8:	b2c5      	uxtb	r5, r0
    27ea:	2300      	movs	r3, #0
    27ec:	2400      	movs	r4, #0
    27ee:	e7cd      	b.n	278c <__aeabi_fmul+0x88>
    27f0:	230c      	movs	r3, #12
    27f2:	2003      	movs	r0, #3
    27f4:	469a      	mov	sl, r3
    27f6:	4680      	mov	r8, r0
    27f8:	e79d      	b.n	2736 <__aeabi_fmul+0x32>
    27fa:	1c20      	adds	r0, r4, #0
    27fc:	f000 fad8 	bl	2db0 <__clzsi2>
    2800:	2676      	movs	r6, #118	; 0x76
    2802:	1f43      	subs	r3, r0, #5
    2804:	409c      	lsls	r4, r3
    2806:	4276      	negs	r6, r6
    2808:	2300      	movs	r3, #0
    280a:	1a36      	subs	r6, r6, r0
    280c:	469a      	mov	sl, r3
    280e:	4698      	mov	r8, r3
    2810:	e791      	b.n	2736 <__aeabi_fmul+0x32>
    2812:	2480      	movs	r4, #128	; 0x80
    2814:	2500      	movs	r5, #0
    2816:	03e4      	lsls	r4, r4, #15
    2818:	23ff      	movs	r3, #255	; 0xff
    281a:	e7b7      	b.n	278c <__aeabi_fmul+0x88>
    281c:	465b      	mov	r3, fp
    281e:	1c3c      	adds	r4, r7, #0
    2820:	9301      	str	r3, [sp, #4]
    2822:	4688      	mov	r8, r1
    2824:	e7aa      	b.n	277c <__aeabi_fmul+0x78>
    2826:	1c3c      	adds	r4, r7, #0
    2828:	4688      	mov	r8, r1
    282a:	e7a7      	b.n	277c <__aeabi_fmul+0x78>
    282c:	0c25      	lsrs	r5, r4, #16
    282e:	0424      	lsls	r4, r4, #16
    2830:	0c3a      	lsrs	r2, r7, #16
    2832:	0c24      	lsrs	r4, r4, #16
    2834:	043f      	lsls	r7, r7, #16
    2836:	18f6      	adds	r6, r6, r3
    2838:	0c3f      	lsrs	r7, r7, #16
    283a:	1c21      	adds	r1, r4, #0
    283c:	1c23      	adds	r3, r4, #0
    283e:	4379      	muls	r1, r7
    2840:	4353      	muls	r3, r2
    2842:	436f      	muls	r7, r5
    2844:	4355      	muls	r5, r2
    2846:	18fb      	adds	r3, r7, r3
    2848:	0c0a      	lsrs	r2, r1, #16
    284a:	189b      	adds	r3, r3, r2
    284c:	46b1      	mov	r9, r6
    284e:	429f      	cmp	r7, r3
    2850:	d902      	bls.n	2858 <__aeabi_fmul+0x154>
    2852:	2280      	movs	r2, #128	; 0x80
    2854:	0252      	lsls	r2, r2, #9
    2856:	18ad      	adds	r5, r5, r2
    2858:	0409      	lsls	r1, r1, #16
    285a:	041a      	lsls	r2, r3, #16
    285c:	0c09      	lsrs	r1, r1, #16
    285e:	1852      	adds	r2, r2, r1
    2860:	0194      	lsls	r4, r2, #6
    2862:	0c1b      	lsrs	r3, r3, #16
    2864:	1e61      	subs	r1, r4, #1
    2866:	418c      	sbcs	r4, r1
    2868:	0e92      	lsrs	r2, r2, #26
    286a:	18ed      	adds	r5, r5, r3
    286c:	4314      	orrs	r4, r2
    286e:	01ad      	lsls	r5, r5, #6
    2870:	432c      	orrs	r4, r5
    2872:	0123      	lsls	r3, r4, #4
    2874:	d505      	bpl.n	2882 <__aeabi_fmul+0x17e>
    2876:	2201      	movs	r2, #1
    2878:	0863      	lsrs	r3, r4, #1
    287a:	2001      	movs	r0, #1
    287c:	4014      	ands	r4, r2
    287e:	4481      	add	r9, r0
    2880:	431c      	orrs	r4, r3
    2882:	464b      	mov	r3, r9
    2884:	337f      	adds	r3, #127	; 0x7f
    2886:	2b00      	cmp	r3, #0
    2888:	dd2d      	ble.n	28e6 <__aeabi_fmul+0x1e2>
    288a:	0760      	lsls	r0, r4, #29
    288c:	d004      	beq.n	2898 <__aeabi_fmul+0x194>
    288e:	220f      	movs	r2, #15
    2890:	4022      	ands	r2, r4
    2892:	2a04      	cmp	r2, #4
    2894:	d000      	beq.n	2898 <__aeabi_fmul+0x194>
    2896:	3404      	adds	r4, #4
    2898:	0122      	lsls	r2, r4, #4
    289a:	d503      	bpl.n	28a4 <__aeabi_fmul+0x1a0>
    289c:	4b2d      	ldr	r3, [pc, #180]	; (2954 <__aeabi_fmul+0x250>)
    289e:	401c      	ands	r4, r3
    28a0:	464b      	mov	r3, r9
    28a2:	3380      	adds	r3, #128	; 0x80
    28a4:	2bfe      	cmp	r3, #254	; 0xfe
    28a6:	dd17      	ble.n	28d8 <__aeabi_fmul+0x1d4>
    28a8:	9b01      	ldr	r3, [sp, #4]
    28aa:	2501      	movs	r5, #1
    28ac:	401d      	ands	r5, r3
    28ae:	2400      	movs	r4, #0
    28b0:	23ff      	movs	r3, #255	; 0xff
    28b2:	e76b      	b.n	278c <__aeabi_fmul+0x88>
    28b4:	2080      	movs	r0, #128	; 0x80
    28b6:	03c0      	lsls	r0, r0, #15
    28b8:	4204      	tst	r4, r0
    28ba:	d008      	beq.n	28ce <__aeabi_fmul+0x1ca>
    28bc:	4207      	tst	r7, r0
    28be:	d106      	bne.n	28ce <__aeabi_fmul+0x1ca>
    28c0:	1c04      	adds	r4, r0, #0
    28c2:	433c      	orrs	r4, r7
    28c4:	0264      	lsls	r4, r4, #9
    28c6:	0a64      	lsrs	r4, r4, #9
    28c8:	465d      	mov	r5, fp
    28ca:	23ff      	movs	r3, #255	; 0xff
    28cc:	e75e      	b.n	278c <__aeabi_fmul+0x88>
    28ce:	4304      	orrs	r4, r0
    28d0:	0264      	lsls	r4, r4, #9
    28d2:	0a64      	lsrs	r4, r4, #9
    28d4:	23ff      	movs	r3, #255	; 0xff
    28d6:	e759      	b.n	278c <__aeabi_fmul+0x88>
    28d8:	9801      	ldr	r0, [sp, #4]
    28da:	01a4      	lsls	r4, r4, #6
    28dc:	2501      	movs	r5, #1
    28de:	0a64      	lsrs	r4, r4, #9
    28e0:	b2db      	uxtb	r3, r3
    28e2:	4005      	ands	r5, r0
    28e4:	e752      	b.n	278c <__aeabi_fmul+0x88>
    28e6:	237e      	movs	r3, #126	; 0x7e
    28e8:	425b      	negs	r3, r3
    28ea:	464a      	mov	r2, r9
    28ec:	1a9b      	subs	r3, r3, r2
    28ee:	2b1b      	cmp	r3, #27
    28f0:	dd05      	ble.n	28fe <__aeabi_fmul+0x1fa>
    28f2:	9b01      	ldr	r3, [sp, #4]
    28f4:	2501      	movs	r5, #1
    28f6:	401d      	ands	r5, r3
    28f8:	2400      	movs	r4, #0
    28fa:	2300      	movs	r3, #0
    28fc:	e746      	b.n	278c <__aeabi_fmul+0x88>
    28fe:	1c22      	adds	r2, r4, #0
    2900:	40da      	lsrs	r2, r3
    2902:	464b      	mov	r3, r9
    2904:	339e      	adds	r3, #158	; 0x9e
    2906:	409c      	lsls	r4, r3
    2908:	1c23      	adds	r3, r4, #0
    290a:	1e5c      	subs	r4, r3, #1
    290c:	41a3      	sbcs	r3, r4
    290e:	4313      	orrs	r3, r2
    2910:	0758      	lsls	r0, r3, #29
    2912:	d004      	beq.n	291e <__aeabi_fmul+0x21a>
    2914:	220f      	movs	r2, #15
    2916:	401a      	ands	r2, r3
    2918:	2a04      	cmp	r2, #4
    291a:	d000      	beq.n	291e <__aeabi_fmul+0x21a>
    291c:	3304      	adds	r3, #4
    291e:	015a      	lsls	r2, r3, #5
    2920:	d505      	bpl.n	292e <__aeabi_fmul+0x22a>
    2922:	9b01      	ldr	r3, [sp, #4]
    2924:	2501      	movs	r5, #1
    2926:	401d      	ands	r5, r3
    2928:	2400      	movs	r4, #0
    292a:	2301      	movs	r3, #1
    292c:	e72e      	b.n	278c <__aeabi_fmul+0x88>
    292e:	9801      	ldr	r0, [sp, #4]
    2930:	019c      	lsls	r4, r3, #6
    2932:	2501      	movs	r5, #1
    2934:	0a64      	lsrs	r4, r4, #9
    2936:	4005      	ands	r5, r0
    2938:	2300      	movs	r3, #0
    293a:	e727      	b.n	278c <__aeabi_fmul+0x88>
    293c:	2780      	movs	r7, #128	; 0x80
    293e:	03ff      	lsls	r7, r7, #15
    2940:	9b01      	ldr	r3, [sp, #4]
    2942:	433c      	orrs	r4, r7
    2944:	0264      	lsls	r4, r4, #9
    2946:	2501      	movs	r5, #1
    2948:	401d      	ands	r5, r3
    294a:	0a64      	lsrs	r4, r4, #9
    294c:	23ff      	movs	r3, #255	; 0xff
    294e:	e71d      	b.n	278c <__aeabi_fmul+0x88>
    2950:	000040e4 	.word	0x000040e4
    2954:	f7ffffff 	.word	0xf7ffffff

00002958 <__aeabi_fsub>:
    2958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    295a:	0fc2      	lsrs	r2, r0, #31
    295c:	0243      	lsls	r3, r0, #9
    295e:	0044      	lsls	r4, r0, #1
    2960:	024d      	lsls	r5, r1, #9
    2962:	0048      	lsls	r0, r1, #1
    2964:	0e24      	lsrs	r4, r4, #24
    2966:	1c16      	adds	r6, r2, #0
    2968:	099b      	lsrs	r3, r3, #6
    296a:	0e00      	lsrs	r0, r0, #24
    296c:	0fc9      	lsrs	r1, r1, #31
    296e:	09ad      	lsrs	r5, r5, #6
    2970:	28ff      	cmp	r0, #255	; 0xff
    2972:	d100      	bne.n	2976 <__aeabi_fsub+0x1e>
    2974:	e083      	b.n	2a7e <__aeabi_fsub+0x126>
    2976:	2701      	movs	r7, #1
    2978:	4079      	eors	r1, r7
    297a:	428a      	cmp	r2, r1
    297c:	d05c      	beq.n	2a38 <__aeabi_fsub+0xe0>
    297e:	1a22      	subs	r2, r4, r0
    2980:	2a00      	cmp	r2, #0
    2982:	dc00      	bgt.n	2986 <__aeabi_fsub+0x2e>
    2984:	e08e      	b.n	2aa4 <__aeabi_fsub+0x14c>
    2986:	2800      	cmp	r0, #0
    2988:	d11e      	bne.n	29c8 <__aeabi_fsub+0x70>
    298a:	2d00      	cmp	r5, #0
    298c:	d000      	beq.n	2990 <__aeabi_fsub+0x38>
    298e:	e07a      	b.n	2a86 <__aeabi_fsub+0x12e>
    2990:	0758      	lsls	r0, r3, #29
    2992:	d004      	beq.n	299e <__aeabi_fsub+0x46>
    2994:	220f      	movs	r2, #15
    2996:	401a      	ands	r2, r3
    2998:	2a04      	cmp	r2, #4
    299a:	d000      	beq.n	299e <__aeabi_fsub+0x46>
    299c:	3304      	adds	r3, #4
    299e:	2180      	movs	r1, #128	; 0x80
    29a0:	04c9      	lsls	r1, r1, #19
    29a2:	2201      	movs	r2, #1
    29a4:	4019      	ands	r1, r3
    29a6:	4032      	ands	r2, r6
    29a8:	2900      	cmp	r1, #0
    29aa:	d03a      	beq.n	2a22 <__aeabi_fsub+0xca>
    29ac:	3401      	adds	r4, #1
    29ae:	2cff      	cmp	r4, #255	; 0xff
    29b0:	d100      	bne.n	29b4 <__aeabi_fsub+0x5c>
    29b2:	e083      	b.n	2abc <__aeabi_fsub+0x164>
    29b4:	019b      	lsls	r3, r3, #6
    29b6:	0a5b      	lsrs	r3, r3, #9
    29b8:	025b      	lsls	r3, r3, #9
    29ba:	b2e4      	uxtb	r4, r4
    29bc:	05e4      	lsls	r4, r4, #23
    29be:	0a58      	lsrs	r0, r3, #9
    29c0:	07d2      	lsls	r2, r2, #31
    29c2:	4320      	orrs	r0, r4
    29c4:	4310      	orrs	r0, r2
    29c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    29c8:	2cff      	cmp	r4, #255	; 0xff
    29ca:	d0e1      	beq.n	2990 <__aeabi_fsub+0x38>
    29cc:	2180      	movs	r1, #128	; 0x80
    29ce:	04c9      	lsls	r1, r1, #19
    29d0:	430d      	orrs	r5, r1
    29d2:	2a1b      	cmp	r2, #27
    29d4:	dd00      	ble.n	29d8 <__aeabi_fsub+0x80>
    29d6:	e131      	b.n	2c3c <__aeabi_fsub+0x2e4>
    29d8:	1c29      	adds	r1, r5, #0
    29da:	2020      	movs	r0, #32
    29dc:	40d1      	lsrs	r1, r2
    29de:	1a82      	subs	r2, r0, r2
    29e0:	4095      	lsls	r5, r2
    29e2:	1e6a      	subs	r2, r5, #1
    29e4:	4195      	sbcs	r5, r2
    29e6:	430d      	orrs	r5, r1
    29e8:	1b5b      	subs	r3, r3, r5
    29ea:	0158      	lsls	r0, r3, #5
    29ec:	d5d0      	bpl.n	2990 <__aeabi_fsub+0x38>
    29ee:	019b      	lsls	r3, r3, #6
    29f0:	099f      	lsrs	r7, r3, #6
    29f2:	1c38      	adds	r0, r7, #0
    29f4:	f000 f9dc 	bl	2db0 <__clzsi2>
    29f8:	1f42      	subs	r2, r0, #5
    29fa:	4097      	lsls	r7, r2
    29fc:	4294      	cmp	r4, r2
    29fe:	dc5f      	bgt.n	2ac0 <__aeabi_fsub+0x168>
    2a00:	1b14      	subs	r4, r2, r4
    2a02:	231f      	movs	r3, #31
    2a04:	1b1b      	subs	r3, r3, r4
    2a06:	1c3a      	adds	r2, r7, #0
    2a08:	409f      	lsls	r7, r3
    2a0a:	1c61      	adds	r1, r4, #1
    2a0c:	1c3b      	adds	r3, r7, #0
    2a0e:	40ca      	lsrs	r2, r1
    2a10:	1e5f      	subs	r7, r3, #1
    2a12:	41bb      	sbcs	r3, r7
    2a14:	4313      	orrs	r3, r2
    2a16:	2400      	movs	r4, #0
    2a18:	e7ba      	b.n	2990 <__aeabi_fsub+0x38>
    2a1a:	1e13      	subs	r3, r2, #0
    2a1c:	d1b8      	bne.n	2990 <__aeabi_fsub+0x38>
    2a1e:	2300      	movs	r3, #0
    2a20:	2200      	movs	r2, #0
    2a22:	08db      	lsrs	r3, r3, #3
    2a24:	2cff      	cmp	r4, #255	; 0xff
    2a26:	d104      	bne.n	2a32 <__aeabi_fsub+0xda>
    2a28:	2b00      	cmp	r3, #0
    2a2a:	d047      	beq.n	2abc <__aeabi_fsub+0x164>
    2a2c:	2080      	movs	r0, #128	; 0x80
    2a2e:	03c0      	lsls	r0, r0, #15
    2a30:	4303      	orrs	r3, r0
    2a32:	025b      	lsls	r3, r3, #9
    2a34:	0a5b      	lsrs	r3, r3, #9
    2a36:	e7bf      	b.n	29b8 <__aeabi_fsub+0x60>
    2a38:	1a21      	subs	r1, r4, r0
    2a3a:	2900      	cmp	r1, #0
    2a3c:	dd44      	ble.n	2ac8 <__aeabi_fsub+0x170>
    2a3e:	2800      	cmp	r0, #0
    2a40:	d027      	beq.n	2a92 <__aeabi_fsub+0x13a>
    2a42:	2cff      	cmp	r4, #255	; 0xff
    2a44:	d0a4      	beq.n	2990 <__aeabi_fsub+0x38>
    2a46:	2080      	movs	r0, #128	; 0x80
    2a48:	04c0      	lsls	r0, r0, #19
    2a4a:	4305      	orrs	r5, r0
    2a4c:	291b      	cmp	r1, #27
    2a4e:	dd00      	ble.n	2a52 <__aeabi_fsub+0xfa>
    2a50:	e0f2      	b.n	2c38 <__aeabi_fsub+0x2e0>
    2a52:	1c28      	adds	r0, r5, #0
    2a54:	2720      	movs	r7, #32
    2a56:	40c8      	lsrs	r0, r1
    2a58:	1a79      	subs	r1, r7, r1
    2a5a:	408d      	lsls	r5, r1
    2a5c:	1e69      	subs	r1, r5, #1
    2a5e:	418d      	sbcs	r5, r1
    2a60:	4305      	orrs	r5, r0
    2a62:	195b      	adds	r3, r3, r5
    2a64:	0159      	lsls	r1, r3, #5
    2a66:	d400      	bmi.n	2a6a <__aeabi_fsub+0x112>
    2a68:	e792      	b.n	2990 <__aeabi_fsub+0x38>
    2a6a:	3401      	adds	r4, #1
    2a6c:	2cff      	cmp	r4, #255	; 0xff
    2a6e:	d059      	beq.n	2b24 <__aeabi_fsub+0x1cc>
    2a70:	4973      	ldr	r1, [pc, #460]	; (2c40 <__aeabi_fsub+0x2e8>)
    2a72:	2201      	movs	r2, #1
    2a74:	401a      	ands	r2, r3
    2a76:	400b      	ands	r3, r1
    2a78:	085b      	lsrs	r3, r3, #1
    2a7a:	4313      	orrs	r3, r2
    2a7c:	e788      	b.n	2990 <__aeabi_fsub+0x38>
    2a7e:	2d00      	cmp	r5, #0
    2a80:	d000      	beq.n	2a84 <__aeabi_fsub+0x12c>
    2a82:	e77a      	b.n	297a <__aeabi_fsub+0x22>
    2a84:	e777      	b.n	2976 <__aeabi_fsub+0x1e>
    2a86:	3a01      	subs	r2, #1
    2a88:	2a00      	cmp	r2, #0
    2a8a:	d0ad      	beq.n	29e8 <__aeabi_fsub+0x90>
    2a8c:	2cff      	cmp	r4, #255	; 0xff
    2a8e:	d1a0      	bne.n	29d2 <__aeabi_fsub+0x7a>
    2a90:	e77e      	b.n	2990 <__aeabi_fsub+0x38>
    2a92:	2d00      	cmp	r5, #0
    2a94:	d100      	bne.n	2a98 <__aeabi_fsub+0x140>
    2a96:	e77b      	b.n	2990 <__aeabi_fsub+0x38>
    2a98:	3901      	subs	r1, #1
    2a9a:	2900      	cmp	r1, #0
    2a9c:	d0e1      	beq.n	2a62 <__aeabi_fsub+0x10a>
    2a9e:	2cff      	cmp	r4, #255	; 0xff
    2aa0:	d1d4      	bne.n	2a4c <__aeabi_fsub+0xf4>
    2aa2:	e775      	b.n	2990 <__aeabi_fsub+0x38>
    2aa4:	2a00      	cmp	r2, #0
    2aa6:	d11b      	bne.n	2ae0 <__aeabi_fsub+0x188>
    2aa8:	1c62      	adds	r2, r4, #1
    2aaa:	b2d2      	uxtb	r2, r2
    2aac:	2a01      	cmp	r2, #1
    2aae:	dd4b      	ble.n	2b48 <__aeabi_fsub+0x1f0>
    2ab0:	1b5f      	subs	r7, r3, r5
    2ab2:	017a      	lsls	r2, r7, #5
    2ab4:	d523      	bpl.n	2afe <__aeabi_fsub+0x1a6>
    2ab6:	1aef      	subs	r7, r5, r3
    2ab8:	1c0e      	adds	r6, r1, #0
    2aba:	e79a      	b.n	29f2 <__aeabi_fsub+0x9a>
    2abc:	2300      	movs	r3, #0
    2abe:	e77b      	b.n	29b8 <__aeabi_fsub+0x60>
    2ac0:	4b5f      	ldr	r3, [pc, #380]	; (2c40 <__aeabi_fsub+0x2e8>)
    2ac2:	1aa4      	subs	r4, r4, r2
    2ac4:	403b      	ands	r3, r7
    2ac6:	e763      	b.n	2990 <__aeabi_fsub+0x38>
    2ac8:	2900      	cmp	r1, #0
    2aca:	d146      	bne.n	2b5a <__aeabi_fsub+0x202>
    2acc:	1c61      	adds	r1, r4, #1
    2ace:	b2c8      	uxtb	r0, r1
    2ad0:	2801      	cmp	r0, #1
    2ad2:	dd29      	ble.n	2b28 <__aeabi_fsub+0x1d0>
    2ad4:	29ff      	cmp	r1, #255	; 0xff
    2ad6:	d024      	beq.n	2b22 <__aeabi_fsub+0x1ca>
    2ad8:	18eb      	adds	r3, r5, r3
    2ada:	085b      	lsrs	r3, r3, #1
    2adc:	1c0c      	adds	r4, r1, #0
    2ade:	e757      	b.n	2990 <__aeabi_fsub+0x38>
    2ae0:	2c00      	cmp	r4, #0
    2ae2:	d013      	beq.n	2b0c <__aeabi_fsub+0x1b4>
    2ae4:	28ff      	cmp	r0, #255	; 0xff
    2ae6:	d018      	beq.n	2b1a <__aeabi_fsub+0x1c2>
    2ae8:	2480      	movs	r4, #128	; 0x80
    2aea:	04e4      	lsls	r4, r4, #19
    2aec:	4252      	negs	r2, r2
    2aee:	4323      	orrs	r3, r4
    2af0:	2a1b      	cmp	r2, #27
    2af2:	dd4d      	ble.n	2b90 <__aeabi_fsub+0x238>
    2af4:	2301      	movs	r3, #1
    2af6:	1aeb      	subs	r3, r5, r3
    2af8:	1c04      	adds	r4, r0, #0
    2afa:	1c0e      	adds	r6, r1, #0
    2afc:	e775      	b.n	29ea <__aeabi_fsub+0x92>
    2afe:	2f00      	cmp	r7, #0
    2b00:	d000      	beq.n	2b04 <__aeabi_fsub+0x1ac>
    2b02:	e776      	b.n	29f2 <__aeabi_fsub+0x9a>
    2b04:	2300      	movs	r3, #0
    2b06:	2200      	movs	r2, #0
    2b08:	2400      	movs	r4, #0
    2b0a:	e78a      	b.n	2a22 <__aeabi_fsub+0xca>
    2b0c:	2b00      	cmp	r3, #0
    2b0e:	d03b      	beq.n	2b88 <__aeabi_fsub+0x230>
    2b10:	43d2      	mvns	r2, r2
    2b12:	2a00      	cmp	r2, #0
    2b14:	d0ef      	beq.n	2af6 <__aeabi_fsub+0x19e>
    2b16:	28ff      	cmp	r0, #255	; 0xff
    2b18:	d1ea      	bne.n	2af0 <__aeabi_fsub+0x198>
    2b1a:	1c2b      	adds	r3, r5, #0
    2b1c:	24ff      	movs	r4, #255	; 0xff
    2b1e:	1c0e      	adds	r6, r1, #0
    2b20:	e736      	b.n	2990 <__aeabi_fsub+0x38>
    2b22:	24ff      	movs	r4, #255	; 0xff
    2b24:	2300      	movs	r3, #0
    2b26:	e77c      	b.n	2a22 <__aeabi_fsub+0xca>
    2b28:	2c00      	cmp	r4, #0
    2b2a:	d15c      	bne.n	2be6 <__aeabi_fsub+0x28e>
    2b2c:	2b00      	cmp	r3, #0
    2b2e:	d100      	bne.n	2b32 <__aeabi_fsub+0x1da>
    2b30:	e080      	b.n	2c34 <__aeabi_fsub+0x2dc>
    2b32:	2d00      	cmp	r5, #0
    2b34:	d100      	bne.n	2b38 <__aeabi_fsub+0x1e0>
    2b36:	e72b      	b.n	2990 <__aeabi_fsub+0x38>
    2b38:	195b      	adds	r3, r3, r5
    2b3a:	0158      	lsls	r0, r3, #5
    2b3c:	d400      	bmi.n	2b40 <__aeabi_fsub+0x1e8>
    2b3e:	e727      	b.n	2990 <__aeabi_fsub+0x38>
    2b40:	4a3f      	ldr	r2, [pc, #252]	; (2c40 <__aeabi_fsub+0x2e8>)
    2b42:	2401      	movs	r4, #1
    2b44:	4013      	ands	r3, r2
    2b46:	e723      	b.n	2990 <__aeabi_fsub+0x38>
    2b48:	2c00      	cmp	r4, #0
    2b4a:	d115      	bne.n	2b78 <__aeabi_fsub+0x220>
    2b4c:	2b00      	cmp	r3, #0
    2b4e:	d140      	bne.n	2bd2 <__aeabi_fsub+0x27a>
    2b50:	2d00      	cmp	r5, #0
    2b52:	d063      	beq.n	2c1c <__aeabi_fsub+0x2c4>
    2b54:	1c2b      	adds	r3, r5, #0
    2b56:	1c0e      	adds	r6, r1, #0
    2b58:	e71a      	b.n	2990 <__aeabi_fsub+0x38>
    2b5a:	2c00      	cmp	r4, #0
    2b5c:	d121      	bne.n	2ba2 <__aeabi_fsub+0x24a>
    2b5e:	2b00      	cmp	r3, #0
    2b60:	d054      	beq.n	2c0c <__aeabi_fsub+0x2b4>
    2b62:	43c9      	mvns	r1, r1
    2b64:	2900      	cmp	r1, #0
    2b66:	d004      	beq.n	2b72 <__aeabi_fsub+0x21a>
    2b68:	28ff      	cmp	r0, #255	; 0xff
    2b6a:	d04c      	beq.n	2c06 <__aeabi_fsub+0x2ae>
    2b6c:	291b      	cmp	r1, #27
    2b6e:	dd58      	ble.n	2c22 <__aeabi_fsub+0x2ca>
    2b70:	2301      	movs	r3, #1
    2b72:	195b      	adds	r3, r3, r5
    2b74:	1c04      	adds	r4, r0, #0
    2b76:	e775      	b.n	2a64 <__aeabi_fsub+0x10c>
    2b78:	2b00      	cmp	r3, #0
    2b7a:	d119      	bne.n	2bb0 <__aeabi_fsub+0x258>
    2b7c:	2d00      	cmp	r5, #0
    2b7e:	d048      	beq.n	2c12 <__aeabi_fsub+0x2ba>
    2b80:	1c2b      	adds	r3, r5, #0
    2b82:	1c0e      	adds	r6, r1, #0
    2b84:	24ff      	movs	r4, #255	; 0xff
    2b86:	e703      	b.n	2990 <__aeabi_fsub+0x38>
    2b88:	1c2b      	adds	r3, r5, #0
    2b8a:	1c04      	adds	r4, r0, #0
    2b8c:	1c0e      	adds	r6, r1, #0
    2b8e:	e6ff      	b.n	2990 <__aeabi_fsub+0x38>
    2b90:	1c1c      	adds	r4, r3, #0
    2b92:	2620      	movs	r6, #32
    2b94:	40d4      	lsrs	r4, r2
    2b96:	1ab2      	subs	r2, r6, r2
    2b98:	4093      	lsls	r3, r2
    2b9a:	1e5a      	subs	r2, r3, #1
    2b9c:	4193      	sbcs	r3, r2
    2b9e:	4323      	orrs	r3, r4
    2ba0:	e7a9      	b.n	2af6 <__aeabi_fsub+0x19e>
    2ba2:	28ff      	cmp	r0, #255	; 0xff
    2ba4:	d02f      	beq.n	2c06 <__aeabi_fsub+0x2ae>
    2ba6:	2480      	movs	r4, #128	; 0x80
    2ba8:	04e4      	lsls	r4, r4, #19
    2baa:	4249      	negs	r1, r1
    2bac:	4323      	orrs	r3, r4
    2bae:	e7dd      	b.n	2b6c <__aeabi_fsub+0x214>
    2bb0:	24ff      	movs	r4, #255	; 0xff
    2bb2:	2d00      	cmp	r5, #0
    2bb4:	d100      	bne.n	2bb8 <__aeabi_fsub+0x260>
    2bb6:	e6eb      	b.n	2990 <__aeabi_fsub+0x38>
    2bb8:	2280      	movs	r2, #128	; 0x80
    2bba:	08db      	lsrs	r3, r3, #3
    2bbc:	03d2      	lsls	r2, r2, #15
    2bbe:	4213      	tst	r3, r2
    2bc0:	d004      	beq.n	2bcc <__aeabi_fsub+0x274>
    2bc2:	08ed      	lsrs	r5, r5, #3
    2bc4:	4215      	tst	r5, r2
    2bc6:	d101      	bne.n	2bcc <__aeabi_fsub+0x274>
    2bc8:	1c2b      	adds	r3, r5, #0
    2bca:	1c0e      	adds	r6, r1, #0
    2bcc:	00db      	lsls	r3, r3, #3
    2bce:	24ff      	movs	r4, #255	; 0xff
    2bd0:	e6de      	b.n	2990 <__aeabi_fsub+0x38>
    2bd2:	2d00      	cmp	r5, #0
    2bd4:	d100      	bne.n	2bd8 <__aeabi_fsub+0x280>
    2bd6:	e6db      	b.n	2990 <__aeabi_fsub+0x38>
    2bd8:	1b5a      	subs	r2, r3, r5
    2bda:	0150      	lsls	r0, r2, #5
    2bdc:	d400      	bmi.n	2be0 <__aeabi_fsub+0x288>
    2bde:	e71c      	b.n	2a1a <__aeabi_fsub+0xc2>
    2be0:	1aeb      	subs	r3, r5, r3
    2be2:	1c0e      	adds	r6, r1, #0
    2be4:	e6d4      	b.n	2990 <__aeabi_fsub+0x38>
    2be6:	2b00      	cmp	r3, #0
    2be8:	d00d      	beq.n	2c06 <__aeabi_fsub+0x2ae>
    2bea:	24ff      	movs	r4, #255	; 0xff
    2bec:	2d00      	cmp	r5, #0
    2bee:	d100      	bne.n	2bf2 <__aeabi_fsub+0x29a>
    2bf0:	e6ce      	b.n	2990 <__aeabi_fsub+0x38>
    2bf2:	2280      	movs	r2, #128	; 0x80
    2bf4:	08db      	lsrs	r3, r3, #3
    2bf6:	03d2      	lsls	r2, r2, #15
    2bf8:	4213      	tst	r3, r2
    2bfa:	d0e7      	beq.n	2bcc <__aeabi_fsub+0x274>
    2bfc:	08ed      	lsrs	r5, r5, #3
    2bfe:	4215      	tst	r5, r2
    2c00:	d1e4      	bne.n	2bcc <__aeabi_fsub+0x274>
    2c02:	1c2b      	adds	r3, r5, #0
    2c04:	e7e2      	b.n	2bcc <__aeabi_fsub+0x274>
    2c06:	1c2b      	adds	r3, r5, #0
    2c08:	24ff      	movs	r4, #255	; 0xff
    2c0a:	e6c1      	b.n	2990 <__aeabi_fsub+0x38>
    2c0c:	1c2b      	adds	r3, r5, #0
    2c0e:	1c04      	adds	r4, r0, #0
    2c10:	e6be      	b.n	2990 <__aeabi_fsub+0x38>
    2c12:	2380      	movs	r3, #128	; 0x80
    2c14:	2200      	movs	r2, #0
    2c16:	049b      	lsls	r3, r3, #18
    2c18:	24ff      	movs	r4, #255	; 0xff
    2c1a:	e702      	b.n	2a22 <__aeabi_fsub+0xca>
    2c1c:	1c23      	adds	r3, r4, #0
    2c1e:	2200      	movs	r2, #0
    2c20:	e6ff      	b.n	2a22 <__aeabi_fsub+0xca>
    2c22:	1c1c      	adds	r4, r3, #0
    2c24:	2720      	movs	r7, #32
    2c26:	40cc      	lsrs	r4, r1
    2c28:	1a79      	subs	r1, r7, r1
    2c2a:	408b      	lsls	r3, r1
    2c2c:	1e59      	subs	r1, r3, #1
    2c2e:	418b      	sbcs	r3, r1
    2c30:	4323      	orrs	r3, r4
    2c32:	e79e      	b.n	2b72 <__aeabi_fsub+0x21a>
    2c34:	1c2b      	adds	r3, r5, #0
    2c36:	e6ab      	b.n	2990 <__aeabi_fsub+0x38>
    2c38:	2501      	movs	r5, #1
    2c3a:	e712      	b.n	2a62 <__aeabi_fsub+0x10a>
    2c3c:	2501      	movs	r5, #1
    2c3e:	e6d3      	b.n	29e8 <__aeabi_fsub+0x90>
    2c40:	fbffffff 	.word	0xfbffffff

00002c44 <__aeabi_f2iz>:
    2c44:	0243      	lsls	r3, r0, #9
    2c46:	0a59      	lsrs	r1, r3, #9
    2c48:	0043      	lsls	r3, r0, #1
    2c4a:	0fc2      	lsrs	r2, r0, #31
    2c4c:	0e1b      	lsrs	r3, r3, #24
    2c4e:	2000      	movs	r0, #0
    2c50:	2b7e      	cmp	r3, #126	; 0x7e
    2c52:	dd0d      	ble.n	2c70 <__aeabi_f2iz+0x2c>
    2c54:	2b9d      	cmp	r3, #157	; 0x9d
    2c56:	dc0c      	bgt.n	2c72 <__aeabi_f2iz+0x2e>
    2c58:	2080      	movs	r0, #128	; 0x80
    2c5a:	0400      	lsls	r0, r0, #16
    2c5c:	4301      	orrs	r1, r0
    2c5e:	2b95      	cmp	r3, #149	; 0x95
    2c60:	dc0a      	bgt.n	2c78 <__aeabi_f2iz+0x34>
    2c62:	2096      	movs	r0, #150	; 0x96
    2c64:	1ac3      	subs	r3, r0, r3
    2c66:	40d9      	lsrs	r1, r3
    2c68:	4248      	negs	r0, r1
    2c6a:	2a00      	cmp	r2, #0
    2c6c:	d100      	bne.n	2c70 <__aeabi_f2iz+0x2c>
    2c6e:	1c08      	adds	r0, r1, #0
    2c70:	4770      	bx	lr
    2c72:	4b03      	ldr	r3, [pc, #12]	; (2c80 <__aeabi_f2iz+0x3c>)
    2c74:	18d0      	adds	r0, r2, r3
    2c76:	e7fb      	b.n	2c70 <__aeabi_f2iz+0x2c>
    2c78:	3b96      	subs	r3, #150	; 0x96
    2c7a:	4099      	lsls	r1, r3
    2c7c:	e7f4      	b.n	2c68 <__aeabi_f2iz+0x24>
    2c7e:	46c0      	nop			; (mov r8, r8)
    2c80:	7fffffff 	.word	0x7fffffff

00002c84 <__aeabi_i2f>:
    2c84:	b570      	push	{r4, r5, r6, lr}
    2c86:	1e04      	subs	r4, r0, #0
    2c88:	d03c      	beq.n	2d04 <__aeabi_i2f+0x80>
    2c8a:	0fc6      	lsrs	r6, r0, #31
    2c8c:	d000      	beq.n	2c90 <__aeabi_i2f+0xc>
    2c8e:	4244      	negs	r4, r0
    2c90:	1c20      	adds	r0, r4, #0
    2c92:	f000 f88d 	bl	2db0 <__clzsi2>
    2c96:	239e      	movs	r3, #158	; 0x9e
    2c98:	1c25      	adds	r5, r4, #0
    2c9a:	1a1b      	subs	r3, r3, r0
    2c9c:	2b96      	cmp	r3, #150	; 0x96
    2c9e:	dc0c      	bgt.n	2cba <__aeabi_i2f+0x36>
    2ca0:	3808      	subs	r0, #8
    2ca2:	4084      	lsls	r4, r0
    2ca4:	0264      	lsls	r4, r4, #9
    2ca6:	0a64      	lsrs	r4, r4, #9
    2ca8:	b2db      	uxtb	r3, r3
    2caa:	1c32      	adds	r2, r6, #0
    2cac:	0264      	lsls	r4, r4, #9
    2cae:	05db      	lsls	r3, r3, #23
    2cb0:	0a60      	lsrs	r0, r4, #9
    2cb2:	07d2      	lsls	r2, r2, #31
    2cb4:	4318      	orrs	r0, r3
    2cb6:	4310      	orrs	r0, r2
    2cb8:	bd70      	pop	{r4, r5, r6, pc}
    2cba:	2b99      	cmp	r3, #153	; 0x99
    2cbc:	dd0a      	ble.n	2cd4 <__aeabi_i2f+0x50>
    2cbe:	2205      	movs	r2, #5
    2cc0:	1a12      	subs	r2, r2, r0
    2cc2:	1c21      	adds	r1, r4, #0
    2cc4:	40d1      	lsrs	r1, r2
    2cc6:	1c0a      	adds	r2, r1, #0
    2cc8:	1c01      	adds	r1, r0, #0
    2cca:	311b      	adds	r1, #27
    2ccc:	408d      	lsls	r5, r1
    2cce:	1e69      	subs	r1, r5, #1
    2cd0:	418d      	sbcs	r5, r1
    2cd2:	4315      	orrs	r5, r2
    2cd4:	2805      	cmp	r0, #5
    2cd6:	dd01      	ble.n	2cdc <__aeabi_i2f+0x58>
    2cd8:	1f42      	subs	r2, r0, #5
    2cda:	4095      	lsls	r5, r2
    2cdc:	4c16      	ldr	r4, [pc, #88]	; (2d38 <__aeabi_i2f+0xb4>)
    2cde:	402c      	ands	r4, r5
    2ce0:	076a      	lsls	r2, r5, #29
    2ce2:	d004      	beq.n	2cee <__aeabi_i2f+0x6a>
    2ce4:	220f      	movs	r2, #15
    2ce6:	4015      	ands	r5, r2
    2ce8:	2d04      	cmp	r5, #4
    2cea:	d000      	beq.n	2cee <__aeabi_i2f+0x6a>
    2cec:	3404      	adds	r4, #4
    2cee:	0161      	lsls	r1, r4, #5
    2cf0:	d50c      	bpl.n	2d0c <__aeabi_i2f+0x88>
    2cf2:	239f      	movs	r3, #159	; 0x9f
    2cf4:	1a18      	subs	r0, r3, r0
    2cf6:	28ff      	cmp	r0, #255	; 0xff
    2cf8:	d01a      	beq.n	2d30 <__aeabi_i2f+0xac>
    2cfa:	01a4      	lsls	r4, r4, #6
    2cfc:	0a64      	lsrs	r4, r4, #9
    2cfe:	b2c3      	uxtb	r3, r0
    2d00:	1c32      	adds	r2, r6, #0
    2d02:	e7d3      	b.n	2cac <__aeabi_i2f+0x28>
    2d04:	2200      	movs	r2, #0
    2d06:	2300      	movs	r3, #0
    2d08:	2400      	movs	r4, #0
    2d0a:	e7cf      	b.n	2cac <__aeabi_i2f+0x28>
    2d0c:	08e4      	lsrs	r4, r4, #3
    2d0e:	2bff      	cmp	r3, #255	; 0xff
    2d10:	d004      	beq.n	2d1c <__aeabi_i2f+0x98>
    2d12:	0264      	lsls	r4, r4, #9
    2d14:	0a64      	lsrs	r4, r4, #9
    2d16:	b2db      	uxtb	r3, r3
    2d18:	1c32      	adds	r2, r6, #0
    2d1a:	e7c7      	b.n	2cac <__aeabi_i2f+0x28>
    2d1c:	2c00      	cmp	r4, #0
    2d1e:	d004      	beq.n	2d2a <__aeabi_i2f+0xa6>
    2d20:	2080      	movs	r0, #128	; 0x80
    2d22:	03c0      	lsls	r0, r0, #15
    2d24:	4304      	orrs	r4, r0
    2d26:	0264      	lsls	r4, r4, #9
    2d28:	0a64      	lsrs	r4, r4, #9
    2d2a:	1c32      	adds	r2, r6, #0
    2d2c:	23ff      	movs	r3, #255	; 0xff
    2d2e:	e7bd      	b.n	2cac <__aeabi_i2f+0x28>
    2d30:	1c32      	adds	r2, r6, #0
    2d32:	23ff      	movs	r3, #255	; 0xff
    2d34:	2400      	movs	r4, #0
    2d36:	e7b9      	b.n	2cac <__aeabi_i2f+0x28>
    2d38:	fbffffff 	.word	0xfbffffff

00002d3c <__aeabi_cfrcmple>:
    2d3c:	4684      	mov	ip, r0
    2d3e:	1c08      	adds	r0, r1, #0
    2d40:	4661      	mov	r1, ip
    2d42:	e7ff      	b.n	2d44 <__aeabi_cfcmpeq>

00002d44 <__aeabi_cfcmpeq>:
    2d44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    2d46:	f000 f8c3 	bl	2ed0 <__lesf2>
    2d4a:	2800      	cmp	r0, #0
    2d4c:	d401      	bmi.n	2d52 <__aeabi_cfcmpeq+0xe>
    2d4e:	2100      	movs	r1, #0
    2d50:	42c8      	cmn	r0, r1
    2d52:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00002d54 <__aeabi_fcmpeq>:
    2d54:	b510      	push	{r4, lr}
    2d56:	f000 f849 	bl	2dec <__eqsf2>
    2d5a:	4240      	negs	r0, r0
    2d5c:	3001      	adds	r0, #1
    2d5e:	bd10      	pop	{r4, pc}

00002d60 <__aeabi_fcmplt>:
    2d60:	b510      	push	{r4, lr}
    2d62:	f000 f8b5 	bl	2ed0 <__lesf2>
    2d66:	2800      	cmp	r0, #0
    2d68:	db01      	blt.n	2d6e <__aeabi_fcmplt+0xe>
    2d6a:	2000      	movs	r0, #0
    2d6c:	bd10      	pop	{r4, pc}
    2d6e:	2001      	movs	r0, #1
    2d70:	bd10      	pop	{r4, pc}
    2d72:	46c0      	nop			; (mov r8, r8)

00002d74 <__aeabi_fcmple>:
    2d74:	b510      	push	{r4, lr}
    2d76:	f000 f8ab 	bl	2ed0 <__lesf2>
    2d7a:	2800      	cmp	r0, #0
    2d7c:	dd01      	ble.n	2d82 <__aeabi_fcmple+0xe>
    2d7e:	2000      	movs	r0, #0
    2d80:	bd10      	pop	{r4, pc}
    2d82:	2001      	movs	r0, #1
    2d84:	bd10      	pop	{r4, pc}
    2d86:	46c0      	nop			; (mov r8, r8)

00002d88 <__aeabi_fcmpgt>:
    2d88:	b510      	push	{r4, lr}
    2d8a:	f000 f859 	bl	2e40 <__gesf2>
    2d8e:	2800      	cmp	r0, #0
    2d90:	dc01      	bgt.n	2d96 <__aeabi_fcmpgt+0xe>
    2d92:	2000      	movs	r0, #0
    2d94:	bd10      	pop	{r4, pc}
    2d96:	2001      	movs	r0, #1
    2d98:	bd10      	pop	{r4, pc}
    2d9a:	46c0      	nop			; (mov r8, r8)

00002d9c <__aeabi_fcmpge>:
    2d9c:	b510      	push	{r4, lr}
    2d9e:	f000 f84f 	bl	2e40 <__gesf2>
    2da2:	2800      	cmp	r0, #0
    2da4:	da01      	bge.n	2daa <__aeabi_fcmpge+0xe>
    2da6:	2000      	movs	r0, #0
    2da8:	bd10      	pop	{r4, pc}
    2daa:	2001      	movs	r0, #1
    2dac:	bd10      	pop	{r4, pc}
    2dae:	46c0      	nop			; (mov r8, r8)

00002db0 <__clzsi2>:
    2db0:	211c      	movs	r1, #28
    2db2:	2301      	movs	r3, #1
    2db4:	041b      	lsls	r3, r3, #16
    2db6:	4298      	cmp	r0, r3
    2db8:	d301      	bcc.n	2dbe <__clzsi2+0xe>
    2dba:	0c00      	lsrs	r0, r0, #16
    2dbc:	3910      	subs	r1, #16
    2dbe:	0a1b      	lsrs	r3, r3, #8
    2dc0:	4298      	cmp	r0, r3
    2dc2:	d301      	bcc.n	2dc8 <__clzsi2+0x18>
    2dc4:	0a00      	lsrs	r0, r0, #8
    2dc6:	3908      	subs	r1, #8
    2dc8:	091b      	lsrs	r3, r3, #4
    2dca:	4298      	cmp	r0, r3
    2dcc:	d301      	bcc.n	2dd2 <__clzsi2+0x22>
    2dce:	0900      	lsrs	r0, r0, #4
    2dd0:	3904      	subs	r1, #4
    2dd2:	a202      	add	r2, pc, #8	; (adr r2, 2ddc <__clzsi2+0x2c>)
    2dd4:	5c10      	ldrb	r0, [r2, r0]
    2dd6:	1840      	adds	r0, r0, r1
    2dd8:	4770      	bx	lr
    2dda:	46c0      	nop			; (mov r8, r8)
    2ddc:	02020304 	.word	0x02020304
    2de0:	01010101 	.word	0x01010101
	...

00002dec <__eqsf2>:
    2dec:	024a      	lsls	r2, r1, #9
    2dee:	0243      	lsls	r3, r0, #9
    2df0:	b570      	push	{r4, r5, r6, lr}
    2df2:	0a5c      	lsrs	r4, r3, #9
    2df4:	0a55      	lsrs	r5, r2, #9
    2df6:	0043      	lsls	r3, r0, #1
    2df8:	004a      	lsls	r2, r1, #1
    2dfa:	0e1b      	lsrs	r3, r3, #24
    2dfc:	0fc6      	lsrs	r6, r0, #31
    2dfe:	0e12      	lsrs	r2, r2, #24
    2e00:	0fc9      	lsrs	r1, r1, #31
    2e02:	2bff      	cmp	r3, #255	; 0xff
    2e04:	d005      	beq.n	2e12 <__eqsf2+0x26>
    2e06:	2aff      	cmp	r2, #255	; 0xff
    2e08:	d008      	beq.n	2e1c <__eqsf2+0x30>
    2e0a:	2001      	movs	r0, #1
    2e0c:	4293      	cmp	r3, r2
    2e0e:	d00b      	beq.n	2e28 <__eqsf2+0x3c>
    2e10:	bd70      	pop	{r4, r5, r6, pc}
    2e12:	2001      	movs	r0, #1
    2e14:	2c00      	cmp	r4, #0
    2e16:	d1fb      	bne.n	2e10 <__eqsf2+0x24>
    2e18:	2aff      	cmp	r2, #255	; 0xff
    2e1a:	d1f6      	bne.n	2e0a <__eqsf2+0x1e>
    2e1c:	2001      	movs	r0, #1
    2e1e:	2d00      	cmp	r5, #0
    2e20:	d1f6      	bne.n	2e10 <__eqsf2+0x24>
    2e22:	2001      	movs	r0, #1
    2e24:	4293      	cmp	r3, r2
    2e26:	d1f3      	bne.n	2e10 <__eqsf2+0x24>
    2e28:	42ac      	cmp	r4, r5
    2e2a:	d1f1      	bne.n	2e10 <__eqsf2+0x24>
    2e2c:	428e      	cmp	r6, r1
    2e2e:	d005      	beq.n	2e3c <__eqsf2+0x50>
    2e30:	2b00      	cmp	r3, #0
    2e32:	d1ed      	bne.n	2e10 <__eqsf2+0x24>
    2e34:	1c20      	adds	r0, r4, #0
    2e36:	1e44      	subs	r4, r0, #1
    2e38:	41a0      	sbcs	r0, r4
    2e3a:	e7e9      	b.n	2e10 <__eqsf2+0x24>
    2e3c:	2000      	movs	r0, #0
    2e3e:	e7e7      	b.n	2e10 <__eqsf2+0x24>

00002e40 <__gesf2>:
    2e40:	024a      	lsls	r2, r1, #9
    2e42:	0243      	lsls	r3, r0, #9
    2e44:	b5f0      	push	{r4, r5, r6, r7, lr}
    2e46:	0a5c      	lsrs	r4, r3, #9
    2e48:	0a55      	lsrs	r5, r2, #9
    2e4a:	0043      	lsls	r3, r0, #1
    2e4c:	004a      	lsls	r2, r1, #1
    2e4e:	0e1b      	lsrs	r3, r3, #24
    2e50:	0fc6      	lsrs	r6, r0, #31
    2e52:	0e12      	lsrs	r2, r2, #24
    2e54:	0fc9      	lsrs	r1, r1, #31
    2e56:	2bff      	cmp	r3, #255	; 0xff
    2e58:	d031      	beq.n	2ebe <__gesf2+0x7e>
    2e5a:	2aff      	cmp	r2, #255	; 0xff
    2e5c:	d034      	beq.n	2ec8 <__gesf2+0x88>
    2e5e:	2b00      	cmp	r3, #0
    2e60:	d116      	bne.n	2e90 <__gesf2+0x50>
    2e62:	4260      	negs	r0, r4
    2e64:	4160      	adcs	r0, r4
    2e66:	4684      	mov	ip, r0
    2e68:	2a00      	cmp	r2, #0
    2e6a:	d014      	beq.n	2e96 <__gesf2+0x56>
    2e6c:	2800      	cmp	r0, #0
    2e6e:	d120      	bne.n	2eb2 <__gesf2+0x72>
    2e70:	428e      	cmp	r6, r1
    2e72:	d117      	bne.n	2ea4 <__gesf2+0x64>
    2e74:	4293      	cmp	r3, r2
    2e76:	dc15      	bgt.n	2ea4 <__gesf2+0x64>
    2e78:	db04      	blt.n	2e84 <__gesf2+0x44>
    2e7a:	42ac      	cmp	r4, r5
    2e7c:	d812      	bhi.n	2ea4 <__gesf2+0x64>
    2e7e:	2000      	movs	r0, #0
    2e80:	42ac      	cmp	r4, r5
    2e82:	d212      	bcs.n	2eaa <__gesf2+0x6a>
    2e84:	4270      	negs	r0, r6
    2e86:	4170      	adcs	r0, r6
    2e88:	4240      	negs	r0, r0
    2e8a:	2301      	movs	r3, #1
    2e8c:	4318      	orrs	r0, r3
    2e8e:	e00c      	b.n	2eaa <__gesf2+0x6a>
    2e90:	2a00      	cmp	r2, #0
    2e92:	d1ed      	bne.n	2e70 <__gesf2+0x30>
    2e94:	4694      	mov	ip, r2
    2e96:	426f      	negs	r7, r5
    2e98:	416f      	adcs	r7, r5
    2e9a:	4660      	mov	r0, ip
    2e9c:	2800      	cmp	r0, #0
    2e9e:	d105      	bne.n	2eac <__gesf2+0x6c>
    2ea0:	2f00      	cmp	r7, #0
    2ea2:	d0e5      	beq.n	2e70 <__gesf2+0x30>
    2ea4:	4270      	negs	r0, r6
    2ea6:	2301      	movs	r3, #1
    2ea8:	4318      	orrs	r0, r3
    2eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2eac:	2000      	movs	r0, #0
    2eae:	2f00      	cmp	r7, #0
    2eb0:	d1fb      	bne.n	2eaa <__gesf2+0x6a>
    2eb2:	4248      	negs	r0, r1
    2eb4:	4148      	adcs	r0, r1
    2eb6:	4240      	negs	r0, r0
    2eb8:	2301      	movs	r3, #1
    2eba:	4318      	orrs	r0, r3
    2ebc:	e7f5      	b.n	2eaa <__gesf2+0x6a>
    2ebe:	2c00      	cmp	r4, #0
    2ec0:	d0cb      	beq.n	2e5a <__gesf2+0x1a>
    2ec2:	2002      	movs	r0, #2
    2ec4:	4240      	negs	r0, r0
    2ec6:	e7f0      	b.n	2eaa <__gesf2+0x6a>
    2ec8:	2d00      	cmp	r5, #0
    2eca:	d0c8      	beq.n	2e5e <__gesf2+0x1e>
    2ecc:	e7f9      	b.n	2ec2 <__gesf2+0x82>
    2ece:	46c0      	nop			; (mov r8, r8)

00002ed0 <__lesf2>:
    2ed0:	024a      	lsls	r2, r1, #9
    2ed2:	0243      	lsls	r3, r0, #9
    2ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ed6:	0a5c      	lsrs	r4, r3, #9
    2ed8:	0a55      	lsrs	r5, r2, #9
    2eda:	0043      	lsls	r3, r0, #1
    2edc:	004a      	lsls	r2, r1, #1
    2ede:	0e1b      	lsrs	r3, r3, #24
    2ee0:	0fc6      	lsrs	r6, r0, #31
    2ee2:	0e12      	lsrs	r2, r2, #24
    2ee4:	0fc9      	lsrs	r1, r1, #31
    2ee6:	2bff      	cmp	r3, #255	; 0xff
    2ee8:	d027      	beq.n	2f3a <__lesf2+0x6a>
    2eea:	2aff      	cmp	r2, #255	; 0xff
    2eec:	d029      	beq.n	2f42 <__lesf2+0x72>
    2eee:	2b00      	cmp	r3, #0
    2ef0:	d010      	beq.n	2f14 <__lesf2+0x44>
    2ef2:	2a00      	cmp	r2, #0
    2ef4:	d115      	bne.n	2f22 <__lesf2+0x52>
    2ef6:	4694      	mov	ip, r2
    2ef8:	426f      	negs	r7, r5
    2efa:	416f      	adcs	r7, r5
    2efc:	4660      	mov	r0, ip
    2efe:	2800      	cmp	r0, #0
    2f00:	d015      	beq.n	2f2e <__lesf2+0x5e>
    2f02:	2000      	movs	r0, #0
    2f04:	2f00      	cmp	r7, #0
    2f06:	d104      	bne.n	2f12 <__lesf2+0x42>
    2f08:	4248      	negs	r0, r1
    2f0a:	4148      	adcs	r0, r1
    2f0c:	4240      	negs	r0, r0
    2f0e:	2301      	movs	r3, #1
    2f10:	4318      	orrs	r0, r3
    2f12:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f14:	4260      	negs	r0, r4
    2f16:	4160      	adcs	r0, r4
    2f18:	4684      	mov	ip, r0
    2f1a:	2a00      	cmp	r2, #0
    2f1c:	d0ec      	beq.n	2ef8 <__lesf2+0x28>
    2f1e:	2800      	cmp	r0, #0
    2f20:	d1f2      	bne.n	2f08 <__lesf2+0x38>
    2f22:	428e      	cmp	r6, r1
    2f24:	d011      	beq.n	2f4a <__lesf2+0x7a>
    2f26:	4270      	negs	r0, r6
    2f28:	2301      	movs	r3, #1
    2f2a:	4318      	orrs	r0, r3
    2f2c:	e7f1      	b.n	2f12 <__lesf2+0x42>
    2f2e:	2f00      	cmp	r7, #0
    2f30:	d0f7      	beq.n	2f22 <__lesf2+0x52>
    2f32:	4270      	negs	r0, r6
    2f34:	2301      	movs	r3, #1
    2f36:	4318      	orrs	r0, r3
    2f38:	e7eb      	b.n	2f12 <__lesf2+0x42>
    2f3a:	2002      	movs	r0, #2
    2f3c:	2c00      	cmp	r4, #0
    2f3e:	d1e8      	bne.n	2f12 <__lesf2+0x42>
    2f40:	e7d3      	b.n	2eea <__lesf2+0x1a>
    2f42:	2002      	movs	r0, #2
    2f44:	2d00      	cmp	r5, #0
    2f46:	d1e4      	bne.n	2f12 <__lesf2+0x42>
    2f48:	e7d1      	b.n	2eee <__lesf2+0x1e>
    2f4a:	4293      	cmp	r3, r2
    2f4c:	dceb      	bgt.n	2f26 <__lesf2+0x56>
    2f4e:	db04      	blt.n	2f5a <__lesf2+0x8a>
    2f50:	42ac      	cmp	r4, r5
    2f52:	d8e8      	bhi.n	2f26 <__lesf2+0x56>
    2f54:	2000      	movs	r0, #0
    2f56:	42ac      	cmp	r4, r5
    2f58:	d2db      	bcs.n	2f12 <__lesf2+0x42>
    2f5a:	4270      	negs	r0, r6
    2f5c:	4170      	adcs	r0, r6
    2f5e:	4240      	negs	r0, r0
    2f60:	2301      	movs	r3, #1
    2f62:	4318      	orrs	r0, r3
    2f64:	e7d5      	b.n	2f12 <__lesf2+0x42>
    2f66:	46c0      	nop			; (mov r8, r8)

00002f68 <__libc_init_array>:
    2f68:	b570      	push	{r4, r5, r6, lr}
    2f6a:	4b0e      	ldr	r3, [pc, #56]	; (2fa4 <__libc_init_array+0x3c>)
    2f6c:	4d0e      	ldr	r5, [pc, #56]	; (2fa8 <__libc_init_array+0x40>)
    2f6e:	2400      	movs	r4, #0
    2f70:	1aed      	subs	r5, r5, r3
    2f72:	10ad      	asrs	r5, r5, #2
    2f74:	1c1e      	adds	r6, r3, #0
    2f76:	42ac      	cmp	r4, r5
    2f78:	d004      	beq.n	2f84 <__libc_init_array+0x1c>
    2f7a:	00a3      	lsls	r3, r4, #2
    2f7c:	58f3      	ldr	r3, [r6, r3]
    2f7e:	4798      	blx	r3
    2f80:	3401      	adds	r4, #1
    2f82:	e7f8      	b.n	2f76 <__libc_init_array+0xe>
    2f84:	f001 f91c 	bl	41c0 <_init>
    2f88:	4b08      	ldr	r3, [pc, #32]	; (2fac <__libc_init_array+0x44>)
    2f8a:	4d09      	ldr	r5, [pc, #36]	; (2fb0 <__libc_init_array+0x48>)
    2f8c:	2400      	movs	r4, #0
    2f8e:	1aed      	subs	r5, r5, r3
    2f90:	10ad      	asrs	r5, r5, #2
    2f92:	1c1e      	adds	r6, r3, #0
    2f94:	42ac      	cmp	r4, r5
    2f96:	d004      	beq.n	2fa2 <__libc_init_array+0x3a>
    2f98:	00a3      	lsls	r3, r4, #2
    2f9a:	58f3      	ldr	r3, [r6, r3]
    2f9c:	4798      	blx	r3
    2f9e:	3401      	adds	r4, #1
    2fa0:	e7f8      	b.n	2f94 <__libc_init_array+0x2c>
    2fa2:	bd70      	pop	{r4, r5, r6, pc}
    2fa4:	000041cc 	.word	0x000041cc
    2fa8:	000041cc 	.word	0x000041cc
    2fac:	000041cc 	.word	0x000041cc
    2fb0:	000041d0 	.word	0x000041d0

00002fb4 <memcpy>:
    2fb4:	b510      	push	{r4, lr}
    2fb6:	2300      	movs	r3, #0
    2fb8:	4293      	cmp	r3, r2
    2fba:	d003      	beq.n	2fc4 <memcpy+0x10>
    2fbc:	5ccc      	ldrb	r4, [r1, r3]
    2fbe:	54c4      	strb	r4, [r0, r3]
    2fc0:	3301      	adds	r3, #1
    2fc2:	e7f9      	b.n	2fb8 <memcpy+0x4>
    2fc4:	bd10      	pop	{r4, pc}

00002fc6 <memset>:
    2fc6:	1c03      	adds	r3, r0, #0
    2fc8:	1882      	adds	r2, r0, r2
    2fca:	4293      	cmp	r3, r2
    2fcc:	d002      	beq.n	2fd4 <memset+0xe>
    2fce:	7019      	strb	r1, [r3, #0]
    2fd0:	3301      	adds	r3, #1
    2fd2:	e7fa      	b.n	2fca <memset+0x4>
    2fd4:	4770      	bx	lr
	...

00002fd8 <iprintf>:
    2fd8:	b40f      	push	{r0, r1, r2, r3}
    2fda:	4b0b      	ldr	r3, [pc, #44]	; (3008 <iprintf+0x30>)
    2fdc:	b513      	push	{r0, r1, r4, lr}
    2fde:	681c      	ldr	r4, [r3, #0]
    2fe0:	2c00      	cmp	r4, #0
    2fe2:	d005      	beq.n	2ff0 <iprintf+0x18>
    2fe4:	69a3      	ldr	r3, [r4, #24]
    2fe6:	2b00      	cmp	r3, #0
    2fe8:	d102      	bne.n	2ff0 <iprintf+0x18>
    2fea:	1c20      	adds	r0, r4, #0
    2fec:	f000 fd2c 	bl	3a48 <__sinit>
    2ff0:	ab05      	add	r3, sp, #20
    2ff2:	68a1      	ldr	r1, [r4, #8]
    2ff4:	1c20      	adds	r0, r4, #0
    2ff6:	9a04      	ldr	r2, [sp, #16]
    2ff8:	9301      	str	r3, [sp, #4]
    2ffa:	f000 f8bf 	bl	317c <_vfiprintf_r>
    2ffe:	bc16      	pop	{r1, r2, r4}
    3000:	bc08      	pop	{r3}
    3002:	b004      	add	sp, #16
    3004:	4718      	bx	r3
    3006:	46c0      	nop			; (mov r8, r8)
    3008:	20000070 	.word	0x20000070

0000300c <setbuf>:
    300c:	b508      	push	{r3, lr}
    300e:	424a      	negs	r2, r1
    3010:	414a      	adcs	r2, r1
    3012:	2380      	movs	r3, #128	; 0x80
    3014:	0052      	lsls	r2, r2, #1
    3016:	00db      	lsls	r3, r3, #3
    3018:	f000 f802 	bl	3020 <setvbuf>
    301c:	bd08      	pop	{r3, pc}
	...

00003020 <setvbuf>:
    3020:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3022:	1c1e      	adds	r6, r3, #0
    3024:	4b3c      	ldr	r3, [pc, #240]	; (3118 <setvbuf+0xf8>)
    3026:	1c04      	adds	r4, r0, #0
    3028:	681d      	ldr	r5, [r3, #0]
    302a:	1c0f      	adds	r7, r1, #0
    302c:	9201      	str	r2, [sp, #4]
    302e:	2d00      	cmp	r5, #0
    3030:	d005      	beq.n	303e <setvbuf+0x1e>
    3032:	69aa      	ldr	r2, [r5, #24]
    3034:	2a00      	cmp	r2, #0
    3036:	d102      	bne.n	303e <setvbuf+0x1e>
    3038:	1c28      	adds	r0, r5, #0
    303a:	f000 fd05 	bl	3a48 <__sinit>
    303e:	4b37      	ldr	r3, [pc, #220]	; (311c <setvbuf+0xfc>)
    3040:	429c      	cmp	r4, r3
    3042:	d101      	bne.n	3048 <setvbuf+0x28>
    3044:	686c      	ldr	r4, [r5, #4]
    3046:	e008      	b.n	305a <setvbuf+0x3a>
    3048:	4b35      	ldr	r3, [pc, #212]	; (3120 <setvbuf+0x100>)
    304a:	429c      	cmp	r4, r3
    304c:	d101      	bne.n	3052 <setvbuf+0x32>
    304e:	68ac      	ldr	r4, [r5, #8]
    3050:	e003      	b.n	305a <setvbuf+0x3a>
    3052:	4b34      	ldr	r3, [pc, #208]	; (3124 <setvbuf+0x104>)
    3054:	429c      	cmp	r4, r3
    3056:	d100      	bne.n	305a <setvbuf+0x3a>
    3058:	68ec      	ldr	r4, [r5, #12]
    305a:	9b01      	ldr	r3, [sp, #4]
    305c:	2b02      	cmp	r3, #2
    305e:	d857      	bhi.n	3110 <setvbuf+0xf0>
    3060:	2e00      	cmp	r6, #0
    3062:	db55      	blt.n	3110 <setvbuf+0xf0>
    3064:	1c28      	adds	r0, r5, #0
    3066:	1c21      	adds	r1, r4, #0
    3068:	f000 fc6e 	bl	3948 <_fflush_r>
    306c:	2300      	movs	r3, #0
    306e:	6063      	str	r3, [r4, #4]
    3070:	61a3      	str	r3, [r4, #24]
    3072:	89a3      	ldrh	r3, [r4, #12]
    3074:	061a      	lsls	r2, r3, #24
    3076:	d503      	bpl.n	3080 <setvbuf+0x60>
    3078:	1c28      	adds	r0, r5, #0
    307a:	6921      	ldr	r1, [r4, #16]
    307c:	f000 fdba 	bl	3bf4 <_free_r>
    3080:	89a3      	ldrh	r3, [r4, #12]
    3082:	2283      	movs	r2, #131	; 0x83
    3084:	4393      	bics	r3, r2
    3086:	81a3      	strh	r3, [r4, #12]
    3088:	9b01      	ldr	r3, [sp, #4]
    308a:	2b02      	cmp	r3, #2
    308c:	d013      	beq.n	30b6 <setvbuf+0x96>
    308e:	2f00      	cmp	r7, #0
    3090:	d125      	bne.n	30de <setvbuf+0xbe>
    3092:	2e00      	cmp	r6, #0
    3094:	d101      	bne.n	309a <setvbuf+0x7a>
    3096:	2680      	movs	r6, #128	; 0x80
    3098:	00f6      	lsls	r6, r6, #3
    309a:	1c30      	adds	r0, r6, #0
    309c:	f000 fd94 	bl	3bc8 <malloc>
    30a0:	1e07      	subs	r7, r0, #0
    30a2:	d118      	bne.n	30d6 <setvbuf+0xb6>
    30a4:	2080      	movs	r0, #128	; 0x80
    30a6:	00c0      	lsls	r0, r0, #3
    30a8:	f000 fd8e 	bl	3bc8 <malloc>
    30ac:	1e07      	subs	r7, r0, #0
    30ae:	d110      	bne.n	30d2 <setvbuf+0xb2>
    30b0:	2001      	movs	r0, #1
    30b2:	4240      	negs	r0, r0
    30b4:	e000      	b.n	30b8 <setvbuf+0x98>
    30b6:	2000      	movs	r0, #0
    30b8:	89a3      	ldrh	r3, [r4, #12]
    30ba:	2202      	movs	r2, #2
    30bc:	4313      	orrs	r3, r2
    30be:	81a3      	strh	r3, [r4, #12]
    30c0:	2300      	movs	r3, #0
    30c2:	60a3      	str	r3, [r4, #8]
    30c4:	1c23      	adds	r3, r4, #0
    30c6:	3347      	adds	r3, #71	; 0x47
    30c8:	6023      	str	r3, [r4, #0]
    30ca:	6123      	str	r3, [r4, #16]
    30cc:	2301      	movs	r3, #1
    30ce:	6163      	str	r3, [r4, #20]
    30d0:	e020      	b.n	3114 <setvbuf+0xf4>
    30d2:	2680      	movs	r6, #128	; 0x80
    30d4:	00f6      	lsls	r6, r6, #3
    30d6:	89a3      	ldrh	r3, [r4, #12]
    30d8:	2280      	movs	r2, #128	; 0x80
    30da:	4313      	orrs	r3, r2
    30dc:	81a3      	strh	r3, [r4, #12]
    30de:	9a01      	ldr	r2, [sp, #4]
    30e0:	2a01      	cmp	r2, #1
    30e2:	d104      	bne.n	30ee <setvbuf+0xce>
    30e4:	89a3      	ldrh	r3, [r4, #12]
    30e6:	4313      	orrs	r3, r2
    30e8:	81a3      	strh	r3, [r4, #12]
    30ea:	4273      	negs	r3, r6
    30ec:	61a3      	str	r3, [r4, #24]
    30ee:	4b0e      	ldr	r3, [pc, #56]	; (3128 <setvbuf+0x108>)
    30f0:	2000      	movs	r0, #0
    30f2:	62ab      	str	r3, [r5, #40]	; 0x28
    30f4:	89a3      	ldrh	r3, [r4, #12]
    30f6:	6027      	str	r7, [r4, #0]
    30f8:	6127      	str	r7, [r4, #16]
    30fa:	6166      	str	r6, [r4, #20]
    30fc:	071a      	lsls	r2, r3, #28
    30fe:	d509      	bpl.n	3114 <setvbuf+0xf4>
    3100:	2203      	movs	r2, #3
    3102:	4013      	ands	r3, r2
    3104:	425a      	negs	r2, r3
    3106:	4153      	adcs	r3, r2
    3108:	425b      	negs	r3, r3
    310a:	401e      	ands	r6, r3
    310c:	60a6      	str	r6, [r4, #8]
    310e:	e001      	b.n	3114 <setvbuf+0xf4>
    3110:	2001      	movs	r0, #1
    3112:	4240      	negs	r0, r0
    3114:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    3116:	46c0      	nop			; (mov r8, r8)
    3118:	20000070 	.word	0x20000070
    311c:	00004160 	.word	0x00004160
    3120:	00004180 	.word	0x00004180
    3124:	000041a0 	.word	0x000041a0
    3128:	000039a1 	.word	0x000039a1

0000312c <__sfputc_r>:
    312c:	6893      	ldr	r3, [r2, #8]
    312e:	b510      	push	{r4, lr}
    3130:	3b01      	subs	r3, #1
    3132:	6093      	str	r3, [r2, #8]
    3134:	2b00      	cmp	r3, #0
    3136:	da05      	bge.n	3144 <__sfputc_r+0x18>
    3138:	6994      	ldr	r4, [r2, #24]
    313a:	42a3      	cmp	r3, r4
    313c:	db08      	blt.n	3150 <__sfputc_r+0x24>
    313e:	b2cb      	uxtb	r3, r1
    3140:	2b0a      	cmp	r3, #10
    3142:	d005      	beq.n	3150 <__sfputc_r+0x24>
    3144:	6813      	ldr	r3, [r2, #0]
    3146:	1c58      	adds	r0, r3, #1
    3148:	6010      	str	r0, [r2, #0]
    314a:	7019      	strb	r1, [r3, #0]
    314c:	b2c8      	uxtb	r0, r1
    314e:	e001      	b.n	3154 <__sfputc_r+0x28>
    3150:	f000 faa6 	bl	36a0 <__swbuf_r>
    3154:	bd10      	pop	{r4, pc}

00003156 <__sfputs_r>:
    3156:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3158:	1c06      	adds	r6, r0, #0
    315a:	1c0f      	adds	r7, r1, #0
    315c:	1c14      	adds	r4, r2, #0
    315e:	18d5      	adds	r5, r2, r3
    3160:	42ac      	cmp	r4, r5
    3162:	d008      	beq.n	3176 <__sfputs_r+0x20>
    3164:	7821      	ldrb	r1, [r4, #0]
    3166:	1c30      	adds	r0, r6, #0
    3168:	1c3a      	adds	r2, r7, #0
    316a:	f7ff ffdf 	bl	312c <__sfputc_r>
    316e:	3401      	adds	r4, #1
    3170:	1c43      	adds	r3, r0, #1
    3172:	d1f5      	bne.n	3160 <__sfputs_r+0xa>
    3174:	e000      	b.n	3178 <__sfputs_r+0x22>
    3176:	2000      	movs	r0, #0
    3178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000317c <_vfiprintf_r>:
    317c:	b5f0      	push	{r4, r5, r6, r7, lr}
    317e:	b09f      	sub	sp, #124	; 0x7c
    3180:	1c06      	adds	r6, r0, #0
    3182:	1c0f      	adds	r7, r1, #0
    3184:	9203      	str	r2, [sp, #12]
    3186:	9305      	str	r3, [sp, #20]
    3188:	2800      	cmp	r0, #0
    318a:	d004      	beq.n	3196 <_vfiprintf_r+0x1a>
    318c:	6981      	ldr	r1, [r0, #24]
    318e:	2900      	cmp	r1, #0
    3190:	d101      	bne.n	3196 <_vfiprintf_r+0x1a>
    3192:	f000 fc59 	bl	3a48 <__sinit>
    3196:	4b75      	ldr	r3, [pc, #468]	; (336c <_vfiprintf_r+0x1f0>)
    3198:	429f      	cmp	r7, r3
    319a:	d101      	bne.n	31a0 <_vfiprintf_r+0x24>
    319c:	6877      	ldr	r7, [r6, #4]
    319e:	e008      	b.n	31b2 <_vfiprintf_r+0x36>
    31a0:	4b73      	ldr	r3, [pc, #460]	; (3370 <_vfiprintf_r+0x1f4>)
    31a2:	429f      	cmp	r7, r3
    31a4:	d101      	bne.n	31aa <_vfiprintf_r+0x2e>
    31a6:	68b7      	ldr	r7, [r6, #8]
    31a8:	e003      	b.n	31b2 <_vfiprintf_r+0x36>
    31aa:	4b72      	ldr	r3, [pc, #456]	; (3374 <_vfiprintf_r+0x1f8>)
    31ac:	429f      	cmp	r7, r3
    31ae:	d100      	bne.n	31b2 <_vfiprintf_r+0x36>
    31b0:	68f7      	ldr	r7, [r6, #12]
    31b2:	89bb      	ldrh	r3, [r7, #12]
    31b4:	071a      	lsls	r2, r3, #28
    31b6:	d50a      	bpl.n	31ce <_vfiprintf_r+0x52>
    31b8:	693b      	ldr	r3, [r7, #16]
    31ba:	2b00      	cmp	r3, #0
    31bc:	d007      	beq.n	31ce <_vfiprintf_r+0x52>
    31be:	ad06      	add	r5, sp, #24
    31c0:	2300      	movs	r3, #0
    31c2:	616b      	str	r3, [r5, #20]
    31c4:	2320      	movs	r3, #32
    31c6:	766b      	strb	r3, [r5, #25]
    31c8:	2330      	movs	r3, #48	; 0x30
    31ca:	76ab      	strb	r3, [r5, #26]
    31cc:	e03b      	b.n	3246 <_vfiprintf_r+0xca>
    31ce:	1c30      	adds	r0, r6, #0
    31d0:	1c39      	adds	r1, r7, #0
    31d2:	f000 fabd 	bl	3750 <__swsetup_r>
    31d6:	2800      	cmp	r0, #0
    31d8:	d0f1      	beq.n	31be <_vfiprintf_r+0x42>
    31da:	2001      	movs	r0, #1
    31dc:	4240      	negs	r0, r0
    31de:	e0c2      	b.n	3366 <_vfiprintf_r+0x1ea>
    31e0:	9a05      	ldr	r2, [sp, #20]
    31e2:	1d11      	adds	r1, r2, #4
    31e4:	6812      	ldr	r2, [r2, #0]
    31e6:	9105      	str	r1, [sp, #20]
    31e8:	2a00      	cmp	r2, #0
    31ea:	db76      	blt.n	32da <_vfiprintf_r+0x15e>
    31ec:	9209      	str	r2, [sp, #36]	; 0x24
    31ee:	3401      	adds	r4, #1
    31f0:	7823      	ldrb	r3, [r4, #0]
    31f2:	2b2e      	cmp	r3, #46	; 0x2e
    31f4:	d100      	bne.n	31f8 <_vfiprintf_r+0x7c>
    31f6:	e081      	b.n	32fc <_vfiprintf_r+0x180>
    31f8:	7821      	ldrb	r1, [r4, #0]
    31fa:	485f      	ldr	r0, [pc, #380]	; (3378 <_vfiprintf_r+0x1fc>)
    31fc:	2203      	movs	r2, #3
    31fe:	f000 fced 	bl	3bdc <memchr>
    3202:	2800      	cmp	r0, #0
    3204:	d007      	beq.n	3216 <_vfiprintf_r+0x9a>
    3206:	495c      	ldr	r1, [pc, #368]	; (3378 <_vfiprintf_r+0x1fc>)
    3208:	682a      	ldr	r2, [r5, #0]
    320a:	1a43      	subs	r3, r0, r1
    320c:	2040      	movs	r0, #64	; 0x40
    320e:	4098      	lsls	r0, r3
    3210:	4310      	orrs	r0, r2
    3212:	6028      	str	r0, [r5, #0]
    3214:	3401      	adds	r4, #1
    3216:	7821      	ldrb	r1, [r4, #0]
    3218:	1c63      	adds	r3, r4, #1
    321a:	4858      	ldr	r0, [pc, #352]	; (337c <_vfiprintf_r+0x200>)
    321c:	2206      	movs	r2, #6
    321e:	9303      	str	r3, [sp, #12]
    3220:	7629      	strb	r1, [r5, #24]
    3222:	f000 fcdb 	bl	3bdc <memchr>
    3226:	2800      	cmp	r0, #0
    3228:	d100      	bne.n	322c <_vfiprintf_r+0xb0>
    322a:	e08a      	b.n	3342 <_vfiprintf_r+0x1c6>
    322c:	4b54      	ldr	r3, [pc, #336]	; (3380 <_vfiprintf_r+0x204>)
    322e:	2b00      	cmp	r3, #0
    3230:	d17e      	bne.n	3330 <_vfiprintf_r+0x1b4>
    3232:	9b05      	ldr	r3, [sp, #20]
    3234:	2207      	movs	r2, #7
    3236:	3307      	adds	r3, #7
    3238:	4393      	bics	r3, r2
    323a:	3308      	adds	r3, #8
    323c:	9305      	str	r3, [sp, #20]
    323e:	696a      	ldr	r2, [r5, #20]
    3240:	9904      	ldr	r1, [sp, #16]
    3242:	1853      	adds	r3, r2, r1
    3244:	616b      	str	r3, [r5, #20]
    3246:	9c03      	ldr	r4, [sp, #12]
    3248:	7823      	ldrb	r3, [r4, #0]
    324a:	2b00      	cmp	r3, #0
    324c:	d104      	bne.n	3258 <_vfiprintf_r+0xdc>
    324e:	9903      	ldr	r1, [sp, #12]
    3250:	1a61      	subs	r1, r4, r1
    3252:	9102      	str	r1, [sp, #8]
    3254:	d010      	beq.n	3278 <_vfiprintf_r+0xfc>
    3256:	e003      	b.n	3260 <_vfiprintf_r+0xe4>
    3258:	2b25      	cmp	r3, #37	; 0x25
    325a:	d0f8      	beq.n	324e <_vfiprintf_r+0xd2>
    325c:	3401      	adds	r4, #1
    325e:	e7f3      	b.n	3248 <_vfiprintf_r+0xcc>
    3260:	1c30      	adds	r0, r6, #0
    3262:	1c39      	adds	r1, r7, #0
    3264:	9a03      	ldr	r2, [sp, #12]
    3266:	9b02      	ldr	r3, [sp, #8]
    3268:	f7ff ff75 	bl	3156 <__sfputs_r>
    326c:	3001      	adds	r0, #1
    326e:	d075      	beq.n	335c <_vfiprintf_r+0x1e0>
    3270:	696a      	ldr	r2, [r5, #20]
    3272:	9902      	ldr	r1, [sp, #8]
    3274:	1853      	adds	r3, r2, r1
    3276:	616b      	str	r3, [r5, #20]
    3278:	7823      	ldrb	r3, [r4, #0]
    327a:	2b00      	cmp	r3, #0
    327c:	d06e      	beq.n	335c <_vfiprintf_r+0x1e0>
    327e:	2201      	movs	r2, #1
    3280:	4252      	negs	r2, r2
    3282:	606a      	str	r2, [r5, #4]
    3284:	466a      	mov	r2, sp
    3286:	2300      	movs	r3, #0
    3288:	325b      	adds	r2, #91	; 0x5b
    328a:	3401      	adds	r4, #1
    328c:	602b      	str	r3, [r5, #0]
    328e:	60eb      	str	r3, [r5, #12]
    3290:	60ab      	str	r3, [r5, #8]
    3292:	7013      	strb	r3, [r2, #0]
    3294:	65ab      	str	r3, [r5, #88]	; 0x58
    3296:	7821      	ldrb	r1, [r4, #0]
    3298:	483a      	ldr	r0, [pc, #232]	; (3384 <_vfiprintf_r+0x208>)
    329a:	2205      	movs	r2, #5
    329c:	f000 fc9e 	bl	3bdc <memchr>
    32a0:	2800      	cmp	r0, #0
    32a2:	d008      	beq.n	32b6 <_vfiprintf_r+0x13a>
    32a4:	4a37      	ldr	r2, [pc, #220]	; (3384 <_vfiprintf_r+0x208>)
    32a6:	3401      	adds	r4, #1
    32a8:	1a83      	subs	r3, r0, r2
    32aa:	2001      	movs	r0, #1
    32ac:	4098      	lsls	r0, r3
    32ae:	682b      	ldr	r3, [r5, #0]
    32b0:	4318      	orrs	r0, r3
    32b2:	6028      	str	r0, [r5, #0]
    32b4:	e7ef      	b.n	3296 <_vfiprintf_r+0x11a>
    32b6:	682b      	ldr	r3, [r5, #0]
    32b8:	06d9      	lsls	r1, r3, #27
    32ba:	d503      	bpl.n	32c4 <_vfiprintf_r+0x148>
    32bc:	466a      	mov	r2, sp
    32be:	2120      	movs	r1, #32
    32c0:	325b      	adds	r2, #91	; 0x5b
    32c2:	7011      	strb	r1, [r2, #0]
    32c4:	071a      	lsls	r2, r3, #28
    32c6:	d503      	bpl.n	32d0 <_vfiprintf_r+0x154>
    32c8:	466a      	mov	r2, sp
    32ca:	212b      	movs	r1, #43	; 0x2b
    32cc:	325b      	adds	r2, #91	; 0x5b
    32ce:	7011      	strb	r1, [r2, #0]
    32d0:	7822      	ldrb	r2, [r4, #0]
    32d2:	2a2a      	cmp	r2, #42	; 0x2a
    32d4:	d084      	beq.n	31e0 <_vfiprintf_r+0x64>
    32d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    32d8:	e005      	b.n	32e6 <_vfiprintf_r+0x16a>
    32da:	4252      	negs	r2, r2
    32dc:	60ea      	str	r2, [r5, #12]
    32de:	2202      	movs	r2, #2
    32e0:	4313      	orrs	r3, r2
    32e2:	602b      	str	r3, [r5, #0]
    32e4:	e783      	b.n	31ee <_vfiprintf_r+0x72>
    32e6:	7822      	ldrb	r2, [r4, #0]
    32e8:	3a30      	subs	r2, #48	; 0x30
    32ea:	2a09      	cmp	r2, #9
    32ec:	d804      	bhi.n	32f8 <_vfiprintf_r+0x17c>
    32ee:	210a      	movs	r1, #10
    32f0:	434b      	muls	r3, r1
    32f2:	3401      	adds	r4, #1
    32f4:	189b      	adds	r3, r3, r2
    32f6:	e7f6      	b.n	32e6 <_vfiprintf_r+0x16a>
    32f8:	9309      	str	r3, [sp, #36]	; 0x24
    32fa:	e779      	b.n	31f0 <_vfiprintf_r+0x74>
    32fc:	7863      	ldrb	r3, [r4, #1]
    32fe:	2b2a      	cmp	r3, #42	; 0x2a
    3300:	d109      	bne.n	3316 <_vfiprintf_r+0x19a>
    3302:	9b05      	ldr	r3, [sp, #20]
    3304:	3402      	adds	r4, #2
    3306:	1d1a      	adds	r2, r3, #4
    3308:	681b      	ldr	r3, [r3, #0]
    330a:	9205      	str	r2, [sp, #20]
    330c:	2b00      	cmp	r3, #0
    330e:	da0d      	bge.n	332c <_vfiprintf_r+0x1b0>
    3310:	2301      	movs	r3, #1
    3312:	425b      	negs	r3, r3
    3314:	e00a      	b.n	332c <_vfiprintf_r+0x1b0>
    3316:	3401      	adds	r4, #1
    3318:	2300      	movs	r3, #0
    331a:	7822      	ldrb	r2, [r4, #0]
    331c:	3a30      	subs	r2, #48	; 0x30
    331e:	2a09      	cmp	r2, #9
    3320:	d804      	bhi.n	332c <_vfiprintf_r+0x1b0>
    3322:	210a      	movs	r1, #10
    3324:	434b      	muls	r3, r1
    3326:	3401      	adds	r4, #1
    3328:	189b      	adds	r3, r3, r2
    332a:	e7f6      	b.n	331a <_vfiprintf_r+0x19e>
    332c:	9307      	str	r3, [sp, #28]
    332e:	e763      	b.n	31f8 <_vfiprintf_r+0x7c>
    3330:	ab05      	add	r3, sp, #20
    3332:	9300      	str	r3, [sp, #0]
    3334:	1c30      	adds	r0, r6, #0
    3336:	1c29      	adds	r1, r5, #0
    3338:	1c3a      	adds	r2, r7, #0
    333a:	4b13      	ldr	r3, [pc, #76]	; (3388 <_vfiprintf_r+0x20c>)
    333c:	e000      	b.n	3340 <_vfiprintf_r+0x1c4>
    333e:	bf00      	nop
    3340:	e007      	b.n	3352 <_vfiprintf_r+0x1d6>
    3342:	ab05      	add	r3, sp, #20
    3344:	9300      	str	r3, [sp, #0]
    3346:	1c30      	adds	r0, r6, #0
    3348:	1c29      	adds	r1, r5, #0
    334a:	1c3a      	adds	r2, r7, #0
    334c:	4b0e      	ldr	r3, [pc, #56]	; (3388 <_vfiprintf_r+0x20c>)
    334e:	f000 f891 	bl	3474 <_printf_i>
    3352:	9004      	str	r0, [sp, #16]
    3354:	9904      	ldr	r1, [sp, #16]
    3356:	3101      	adds	r1, #1
    3358:	d000      	beq.n	335c <_vfiprintf_r+0x1e0>
    335a:	e770      	b.n	323e <_vfiprintf_r+0xc2>
    335c:	89bb      	ldrh	r3, [r7, #12]
    335e:	065a      	lsls	r2, r3, #25
    3360:	d500      	bpl.n	3364 <_vfiprintf_r+0x1e8>
    3362:	e73a      	b.n	31da <_vfiprintf_r+0x5e>
    3364:	980b      	ldr	r0, [sp, #44]	; 0x2c
    3366:	b01f      	add	sp, #124	; 0x7c
    3368:	bdf0      	pop	{r4, r5, r6, r7, pc}
    336a:	46c0      	nop			; (mov r8, r8)
    336c:	00004160 	.word	0x00004160
    3370:	00004180 	.word	0x00004180
    3374:	000041a0 	.word	0x000041a0
    3378:	00004132 	.word	0x00004132
    337c:	00004136 	.word	0x00004136
    3380:	00000000 	.word	0x00000000
    3384:	0000412c 	.word	0x0000412c
    3388:	00003157 	.word	0x00003157

0000338c <_printf_common>:
    338c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    338e:	1c15      	adds	r5, r2, #0
    3390:	9301      	str	r3, [sp, #4]
    3392:	690a      	ldr	r2, [r1, #16]
    3394:	688b      	ldr	r3, [r1, #8]
    3396:	1c06      	adds	r6, r0, #0
    3398:	1c0c      	adds	r4, r1, #0
    339a:	4293      	cmp	r3, r2
    339c:	da00      	bge.n	33a0 <_printf_common+0x14>
    339e:	1c13      	adds	r3, r2, #0
    33a0:	1c22      	adds	r2, r4, #0
    33a2:	602b      	str	r3, [r5, #0]
    33a4:	3243      	adds	r2, #67	; 0x43
    33a6:	7812      	ldrb	r2, [r2, #0]
    33a8:	2a00      	cmp	r2, #0
    33aa:	d001      	beq.n	33b0 <_printf_common+0x24>
    33ac:	3301      	adds	r3, #1
    33ae:	602b      	str	r3, [r5, #0]
    33b0:	6820      	ldr	r0, [r4, #0]
    33b2:	0680      	lsls	r0, r0, #26
    33b4:	d502      	bpl.n	33bc <_printf_common+0x30>
    33b6:	682b      	ldr	r3, [r5, #0]
    33b8:	3302      	adds	r3, #2
    33ba:	602b      	str	r3, [r5, #0]
    33bc:	6821      	ldr	r1, [r4, #0]
    33be:	2706      	movs	r7, #6
    33c0:	400f      	ands	r7, r1
    33c2:	d01f      	beq.n	3404 <_printf_common+0x78>
    33c4:	1c23      	adds	r3, r4, #0
    33c6:	3343      	adds	r3, #67	; 0x43
    33c8:	781b      	ldrb	r3, [r3, #0]
    33ca:	1e5a      	subs	r2, r3, #1
    33cc:	4193      	sbcs	r3, r2
    33ce:	6822      	ldr	r2, [r4, #0]
    33d0:	0692      	lsls	r2, r2, #26
    33d2:	d51f      	bpl.n	3414 <_printf_common+0x88>
    33d4:	18e1      	adds	r1, r4, r3
    33d6:	3140      	adds	r1, #64	; 0x40
    33d8:	2030      	movs	r0, #48	; 0x30
    33da:	70c8      	strb	r0, [r1, #3]
    33dc:	1c21      	adds	r1, r4, #0
    33de:	1c5a      	adds	r2, r3, #1
    33e0:	3145      	adds	r1, #69	; 0x45
    33e2:	7809      	ldrb	r1, [r1, #0]
    33e4:	18a2      	adds	r2, r4, r2
    33e6:	3240      	adds	r2, #64	; 0x40
    33e8:	3302      	adds	r3, #2
    33ea:	70d1      	strb	r1, [r2, #3]
    33ec:	e012      	b.n	3414 <_printf_common+0x88>
    33ee:	1c22      	adds	r2, r4, #0
    33f0:	1c30      	adds	r0, r6, #0
    33f2:	9901      	ldr	r1, [sp, #4]
    33f4:	3219      	adds	r2, #25
    33f6:	2301      	movs	r3, #1
    33f8:	9f08      	ldr	r7, [sp, #32]
    33fa:	47b8      	blx	r7
    33fc:	3001      	adds	r0, #1
    33fe:	d011      	beq.n	3424 <_printf_common+0x98>
    3400:	9f00      	ldr	r7, [sp, #0]
    3402:	3701      	adds	r7, #1
    3404:	9700      	str	r7, [sp, #0]
    3406:	68e0      	ldr	r0, [r4, #12]
    3408:	6829      	ldr	r1, [r5, #0]
    340a:	9f00      	ldr	r7, [sp, #0]
    340c:	1a43      	subs	r3, r0, r1
    340e:	429f      	cmp	r7, r3
    3410:	dbed      	blt.n	33ee <_printf_common+0x62>
    3412:	e7d7      	b.n	33c4 <_printf_common+0x38>
    3414:	1c22      	adds	r2, r4, #0
    3416:	1c30      	adds	r0, r6, #0
    3418:	9901      	ldr	r1, [sp, #4]
    341a:	3243      	adds	r2, #67	; 0x43
    341c:	9f08      	ldr	r7, [sp, #32]
    341e:	47b8      	blx	r7
    3420:	3001      	adds	r0, #1
    3422:	d102      	bne.n	342a <_printf_common+0x9e>
    3424:	2001      	movs	r0, #1
    3426:	4240      	negs	r0, r0
    3428:	e023      	b.n	3472 <_printf_common+0xe6>
    342a:	6820      	ldr	r0, [r4, #0]
    342c:	2106      	movs	r1, #6
    342e:	682b      	ldr	r3, [r5, #0]
    3430:	68e2      	ldr	r2, [r4, #12]
    3432:	4001      	ands	r1, r0
    3434:	2500      	movs	r5, #0
    3436:	2904      	cmp	r1, #4
    3438:	d103      	bne.n	3442 <_printf_common+0xb6>
    343a:	1ad5      	subs	r5, r2, r3
    343c:	43eb      	mvns	r3, r5
    343e:	17db      	asrs	r3, r3, #31
    3440:	401d      	ands	r5, r3
    3442:	68a2      	ldr	r2, [r4, #8]
    3444:	6923      	ldr	r3, [r4, #16]
    3446:	429a      	cmp	r2, r3
    3448:	dd01      	ble.n	344e <_printf_common+0xc2>
    344a:	1ad3      	subs	r3, r2, r3
    344c:	18ed      	adds	r5, r5, r3
    344e:	2700      	movs	r7, #0
    3450:	9700      	str	r7, [sp, #0]
    3452:	9f00      	ldr	r7, [sp, #0]
    3454:	42af      	cmp	r7, r5
    3456:	da0b      	bge.n	3470 <_printf_common+0xe4>
    3458:	1c22      	adds	r2, r4, #0
    345a:	1c30      	adds	r0, r6, #0
    345c:	9901      	ldr	r1, [sp, #4]
    345e:	321a      	adds	r2, #26
    3460:	2301      	movs	r3, #1
    3462:	9f08      	ldr	r7, [sp, #32]
    3464:	47b8      	blx	r7
    3466:	3001      	adds	r0, #1
    3468:	d0dc      	beq.n	3424 <_printf_common+0x98>
    346a:	9f00      	ldr	r7, [sp, #0]
    346c:	3701      	adds	r7, #1
    346e:	e7ef      	b.n	3450 <_printf_common+0xc4>
    3470:	2000      	movs	r0, #0
    3472:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00003474 <_printf_i>:
    3474:	b5f0      	push	{r4, r5, r6, r7, lr}
    3476:	1c0d      	adds	r5, r1, #0
    3478:	b08b      	sub	sp, #44	; 0x2c
    347a:	3543      	adds	r5, #67	; 0x43
    347c:	9206      	str	r2, [sp, #24]
    347e:	9005      	str	r0, [sp, #20]
    3480:	9307      	str	r3, [sp, #28]
    3482:	9504      	str	r5, [sp, #16]
    3484:	7e0b      	ldrb	r3, [r1, #24]
    3486:	1c0c      	adds	r4, r1, #0
    3488:	9a10      	ldr	r2, [sp, #64]	; 0x40
    348a:	2b6e      	cmp	r3, #110	; 0x6e
    348c:	d100      	bne.n	3490 <_printf_i+0x1c>
    348e:	e0a7      	b.n	35e0 <_printf_i+0x16c>
    3490:	d811      	bhi.n	34b6 <_printf_i+0x42>
    3492:	2b63      	cmp	r3, #99	; 0x63
    3494:	d022      	beq.n	34dc <_printf_i+0x68>
    3496:	d809      	bhi.n	34ac <_printf_i+0x38>
    3498:	2b00      	cmp	r3, #0
    349a:	d100      	bne.n	349e <_printf_i+0x2a>
    349c:	e0b0      	b.n	3600 <_printf_i+0x18c>
    349e:	2b58      	cmp	r3, #88	; 0x58
    34a0:	d000      	beq.n	34a4 <_printf_i+0x30>
    34a2:	e0c0      	b.n	3626 <_printf_i+0x1b2>
    34a4:	3145      	adds	r1, #69	; 0x45
    34a6:	700b      	strb	r3, [r1, #0]
    34a8:	4d7b      	ldr	r5, [pc, #492]	; (3698 <_printf_i+0x224>)
    34aa:	e04e      	b.n	354a <_printf_i+0xd6>
    34ac:	2b64      	cmp	r3, #100	; 0x64
    34ae:	d01c      	beq.n	34ea <_printf_i+0x76>
    34b0:	2b69      	cmp	r3, #105	; 0x69
    34b2:	d01a      	beq.n	34ea <_printf_i+0x76>
    34b4:	e0b7      	b.n	3626 <_printf_i+0x1b2>
    34b6:	2b73      	cmp	r3, #115	; 0x73
    34b8:	d100      	bne.n	34bc <_printf_i+0x48>
    34ba:	e0a5      	b.n	3608 <_printf_i+0x194>
    34bc:	d809      	bhi.n	34d2 <_printf_i+0x5e>
    34be:	2b6f      	cmp	r3, #111	; 0x6f
    34c0:	d029      	beq.n	3516 <_printf_i+0xa2>
    34c2:	2b70      	cmp	r3, #112	; 0x70
    34c4:	d000      	beq.n	34c8 <_printf_i+0x54>
    34c6:	e0ae      	b.n	3626 <_printf_i+0x1b2>
    34c8:	680e      	ldr	r6, [r1, #0]
    34ca:	2320      	movs	r3, #32
    34cc:	4333      	orrs	r3, r6
    34ce:	600b      	str	r3, [r1, #0]
    34d0:	e036      	b.n	3540 <_printf_i+0xcc>
    34d2:	2b75      	cmp	r3, #117	; 0x75
    34d4:	d01f      	beq.n	3516 <_printf_i+0xa2>
    34d6:	2b78      	cmp	r3, #120	; 0x78
    34d8:	d032      	beq.n	3540 <_printf_i+0xcc>
    34da:	e0a4      	b.n	3626 <_printf_i+0x1b2>
    34dc:	6813      	ldr	r3, [r2, #0]
    34de:	1c0d      	adds	r5, r1, #0
    34e0:	1d19      	adds	r1, r3, #4
    34e2:	3542      	adds	r5, #66	; 0x42
    34e4:	6011      	str	r1, [r2, #0]
    34e6:	681b      	ldr	r3, [r3, #0]
    34e8:	e09f      	b.n	362a <_printf_i+0x1b6>
    34ea:	6821      	ldr	r1, [r4, #0]
    34ec:	6813      	ldr	r3, [r2, #0]
    34ee:	060e      	lsls	r6, r1, #24
    34f0:	d503      	bpl.n	34fa <_printf_i+0x86>
    34f2:	1d19      	adds	r1, r3, #4
    34f4:	6011      	str	r1, [r2, #0]
    34f6:	681e      	ldr	r6, [r3, #0]
    34f8:	e005      	b.n	3506 <_printf_i+0x92>
    34fa:	0648      	lsls	r0, r1, #25
    34fc:	d5f9      	bpl.n	34f2 <_printf_i+0x7e>
    34fe:	1d19      	adds	r1, r3, #4
    3500:	6011      	str	r1, [r2, #0]
    3502:	2100      	movs	r1, #0
    3504:	5e5e      	ldrsh	r6, [r3, r1]
    3506:	4b64      	ldr	r3, [pc, #400]	; (3698 <_printf_i+0x224>)
    3508:	2e00      	cmp	r6, #0
    350a:	da3b      	bge.n	3584 <_printf_i+0x110>
    350c:	9d04      	ldr	r5, [sp, #16]
    350e:	222d      	movs	r2, #45	; 0x2d
    3510:	4276      	negs	r6, r6
    3512:	702a      	strb	r2, [r5, #0]
    3514:	e036      	b.n	3584 <_printf_i+0x110>
    3516:	6821      	ldr	r1, [r4, #0]
    3518:	6813      	ldr	r3, [r2, #0]
    351a:	060e      	lsls	r6, r1, #24
    351c:	d503      	bpl.n	3526 <_printf_i+0xb2>
    351e:	1d19      	adds	r1, r3, #4
    3520:	6011      	str	r1, [r2, #0]
    3522:	681e      	ldr	r6, [r3, #0]
    3524:	e004      	b.n	3530 <_printf_i+0xbc>
    3526:	0648      	lsls	r0, r1, #25
    3528:	d5f9      	bpl.n	351e <_printf_i+0xaa>
    352a:	1d19      	adds	r1, r3, #4
    352c:	881e      	ldrh	r6, [r3, #0]
    352e:	6011      	str	r1, [r2, #0]
    3530:	4b59      	ldr	r3, [pc, #356]	; (3698 <_printf_i+0x224>)
    3532:	7e22      	ldrb	r2, [r4, #24]
    3534:	9303      	str	r3, [sp, #12]
    3536:	2708      	movs	r7, #8
    3538:	2a6f      	cmp	r2, #111	; 0x6f
    353a:	d01e      	beq.n	357a <_printf_i+0x106>
    353c:	270a      	movs	r7, #10
    353e:	e01c      	b.n	357a <_printf_i+0x106>
    3540:	1c23      	adds	r3, r4, #0
    3542:	2178      	movs	r1, #120	; 0x78
    3544:	3345      	adds	r3, #69	; 0x45
    3546:	4d55      	ldr	r5, [pc, #340]	; (369c <_printf_i+0x228>)
    3548:	7019      	strb	r1, [r3, #0]
    354a:	6811      	ldr	r1, [r2, #0]
    354c:	6823      	ldr	r3, [r4, #0]
    354e:	1d08      	adds	r0, r1, #4
    3550:	9503      	str	r5, [sp, #12]
    3552:	6010      	str	r0, [r2, #0]
    3554:	061e      	lsls	r6, r3, #24
    3556:	d501      	bpl.n	355c <_printf_i+0xe8>
    3558:	680e      	ldr	r6, [r1, #0]
    355a:	e002      	b.n	3562 <_printf_i+0xee>
    355c:	0658      	lsls	r0, r3, #25
    355e:	d5fb      	bpl.n	3558 <_printf_i+0xe4>
    3560:	880e      	ldrh	r6, [r1, #0]
    3562:	07d9      	lsls	r1, r3, #31
    3564:	d502      	bpl.n	356c <_printf_i+0xf8>
    3566:	2220      	movs	r2, #32
    3568:	4313      	orrs	r3, r2
    356a:	6023      	str	r3, [r4, #0]
    356c:	2710      	movs	r7, #16
    356e:	2e00      	cmp	r6, #0
    3570:	d103      	bne.n	357a <_printf_i+0x106>
    3572:	6822      	ldr	r2, [r4, #0]
    3574:	2320      	movs	r3, #32
    3576:	439a      	bics	r2, r3
    3578:	6022      	str	r2, [r4, #0]
    357a:	1c23      	adds	r3, r4, #0
    357c:	2200      	movs	r2, #0
    357e:	3343      	adds	r3, #67	; 0x43
    3580:	701a      	strb	r2, [r3, #0]
    3582:	e001      	b.n	3588 <_printf_i+0x114>
    3584:	9303      	str	r3, [sp, #12]
    3586:	270a      	movs	r7, #10
    3588:	6863      	ldr	r3, [r4, #4]
    358a:	60a3      	str	r3, [r4, #8]
    358c:	2b00      	cmp	r3, #0
    358e:	db03      	blt.n	3598 <_printf_i+0x124>
    3590:	6825      	ldr	r5, [r4, #0]
    3592:	2204      	movs	r2, #4
    3594:	4395      	bics	r5, r2
    3596:	6025      	str	r5, [r4, #0]
    3598:	2e00      	cmp	r6, #0
    359a:	d102      	bne.n	35a2 <_printf_i+0x12e>
    359c:	9d04      	ldr	r5, [sp, #16]
    359e:	2b00      	cmp	r3, #0
    35a0:	d00e      	beq.n	35c0 <_printf_i+0x14c>
    35a2:	9d04      	ldr	r5, [sp, #16]
    35a4:	1c30      	adds	r0, r6, #0
    35a6:	1c39      	adds	r1, r7, #0
    35a8:	f7fe fefa 	bl	23a0 <__aeabi_uidivmod>
    35ac:	9803      	ldr	r0, [sp, #12]
    35ae:	3d01      	subs	r5, #1
    35b0:	5c43      	ldrb	r3, [r0, r1]
    35b2:	1c30      	adds	r0, r6, #0
    35b4:	702b      	strb	r3, [r5, #0]
    35b6:	1c39      	adds	r1, r7, #0
    35b8:	f7fe feae 	bl	2318 <__aeabi_uidiv>
    35bc:	1e06      	subs	r6, r0, #0
    35be:	d1f1      	bne.n	35a4 <_printf_i+0x130>
    35c0:	2f08      	cmp	r7, #8
    35c2:	d109      	bne.n	35d8 <_printf_i+0x164>
    35c4:	6821      	ldr	r1, [r4, #0]
    35c6:	07c9      	lsls	r1, r1, #31
    35c8:	d506      	bpl.n	35d8 <_printf_i+0x164>
    35ca:	6862      	ldr	r2, [r4, #4]
    35cc:	6923      	ldr	r3, [r4, #16]
    35ce:	429a      	cmp	r2, r3
    35d0:	dc02      	bgt.n	35d8 <_printf_i+0x164>
    35d2:	3d01      	subs	r5, #1
    35d4:	2330      	movs	r3, #48	; 0x30
    35d6:	702b      	strb	r3, [r5, #0]
    35d8:	9e04      	ldr	r6, [sp, #16]
    35da:	1b73      	subs	r3, r6, r5
    35dc:	6123      	str	r3, [r4, #16]
    35de:	e02a      	b.n	3636 <_printf_i+0x1c2>
    35e0:	6808      	ldr	r0, [r1, #0]
    35e2:	6813      	ldr	r3, [r2, #0]
    35e4:	6949      	ldr	r1, [r1, #20]
    35e6:	0605      	lsls	r5, r0, #24
    35e8:	d504      	bpl.n	35f4 <_printf_i+0x180>
    35ea:	1d18      	adds	r0, r3, #4
    35ec:	6010      	str	r0, [r2, #0]
    35ee:	681b      	ldr	r3, [r3, #0]
    35f0:	6019      	str	r1, [r3, #0]
    35f2:	e005      	b.n	3600 <_printf_i+0x18c>
    35f4:	0646      	lsls	r6, r0, #25
    35f6:	d5f8      	bpl.n	35ea <_printf_i+0x176>
    35f8:	1d18      	adds	r0, r3, #4
    35fa:	6010      	str	r0, [r2, #0]
    35fc:	681b      	ldr	r3, [r3, #0]
    35fe:	8019      	strh	r1, [r3, #0]
    3600:	2300      	movs	r3, #0
    3602:	6123      	str	r3, [r4, #16]
    3604:	9d04      	ldr	r5, [sp, #16]
    3606:	e016      	b.n	3636 <_printf_i+0x1c2>
    3608:	6813      	ldr	r3, [r2, #0]
    360a:	1d19      	adds	r1, r3, #4
    360c:	6011      	str	r1, [r2, #0]
    360e:	681d      	ldr	r5, [r3, #0]
    3610:	1c28      	adds	r0, r5, #0
    3612:	f000 fbe9 	bl	3de8 <strlen>
    3616:	6863      	ldr	r3, [r4, #4]
    3618:	6120      	str	r0, [r4, #16]
    361a:	4298      	cmp	r0, r3
    361c:	d900      	bls.n	3620 <_printf_i+0x1ac>
    361e:	6123      	str	r3, [r4, #16]
    3620:	6920      	ldr	r0, [r4, #16]
    3622:	6060      	str	r0, [r4, #4]
    3624:	e004      	b.n	3630 <_printf_i+0x1bc>
    3626:	1c25      	adds	r5, r4, #0
    3628:	3542      	adds	r5, #66	; 0x42
    362a:	702b      	strb	r3, [r5, #0]
    362c:	2301      	movs	r3, #1
    362e:	6123      	str	r3, [r4, #16]
    3630:	9e04      	ldr	r6, [sp, #16]
    3632:	2300      	movs	r3, #0
    3634:	7033      	strb	r3, [r6, #0]
    3636:	9e07      	ldr	r6, [sp, #28]
    3638:	9805      	ldr	r0, [sp, #20]
    363a:	9600      	str	r6, [sp, #0]
    363c:	1c21      	adds	r1, r4, #0
    363e:	aa09      	add	r2, sp, #36	; 0x24
    3640:	9b06      	ldr	r3, [sp, #24]
    3642:	f7ff fea3 	bl	338c <_printf_common>
    3646:	3001      	adds	r0, #1
    3648:	d102      	bne.n	3650 <_printf_i+0x1dc>
    364a:	2001      	movs	r0, #1
    364c:	4240      	negs	r0, r0
    364e:	e021      	b.n	3694 <_printf_i+0x220>
    3650:	1c2a      	adds	r2, r5, #0
    3652:	9805      	ldr	r0, [sp, #20]
    3654:	9906      	ldr	r1, [sp, #24]
    3656:	6923      	ldr	r3, [r4, #16]
    3658:	9d07      	ldr	r5, [sp, #28]
    365a:	47a8      	blx	r5
    365c:	3001      	adds	r0, #1
    365e:	d0f4      	beq.n	364a <_printf_i+0x1d6>
    3660:	6826      	ldr	r6, [r4, #0]
    3662:	07b6      	lsls	r6, r6, #30
    3664:	d405      	bmi.n	3672 <_printf_i+0x1fe>
    3666:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3668:	68e0      	ldr	r0, [r4, #12]
    366a:	4298      	cmp	r0, r3
    366c:	da12      	bge.n	3694 <_printf_i+0x220>
    366e:	1c18      	adds	r0, r3, #0
    3670:	e010      	b.n	3694 <_printf_i+0x220>
    3672:	2500      	movs	r5, #0
    3674:	68e0      	ldr	r0, [r4, #12]
    3676:	9909      	ldr	r1, [sp, #36]	; 0x24
    3678:	1a43      	subs	r3, r0, r1
    367a:	429d      	cmp	r5, r3
    367c:	daf3      	bge.n	3666 <_printf_i+0x1f2>
    367e:	1c22      	adds	r2, r4, #0
    3680:	9805      	ldr	r0, [sp, #20]
    3682:	9906      	ldr	r1, [sp, #24]
    3684:	3219      	adds	r2, #25
    3686:	2301      	movs	r3, #1
    3688:	9e07      	ldr	r6, [sp, #28]
    368a:	47b0      	blx	r6
    368c:	3001      	adds	r0, #1
    368e:	d0dc      	beq.n	364a <_printf_i+0x1d6>
    3690:	3501      	adds	r5, #1
    3692:	e7ef      	b.n	3674 <_printf_i+0x200>
    3694:	b00b      	add	sp, #44	; 0x2c
    3696:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3698:	0000413d 	.word	0x0000413d
    369c:	0000414e 	.word	0x0000414e

000036a0 <__swbuf_r>:
    36a0:	b570      	push	{r4, r5, r6, lr}
    36a2:	1c05      	adds	r5, r0, #0
    36a4:	1c0e      	adds	r6, r1, #0
    36a6:	1c14      	adds	r4, r2, #0
    36a8:	2800      	cmp	r0, #0
    36aa:	d004      	beq.n	36b6 <__swbuf_r+0x16>
    36ac:	6982      	ldr	r2, [r0, #24]
    36ae:	2a00      	cmp	r2, #0
    36b0:	d101      	bne.n	36b6 <__swbuf_r+0x16>
    36b2:	f000 f9c9 	bl	3a48 <__sinit>
    36b6:	4b23      	ldr	r3, [pc, #140]	; (3744 <__swbuf_r+0xa4>)
    36b8:	429c      	cmp	r4, r3
    36ba:	d101      	bne.n	36c0 <__swbuf_r+0x20>
    36bc:	686c      	ldr	r4, [r5, #4]
    36be:	e008      	b.n	36d2 <__swbuf_r+0x32>
    36c0:	4b21      	ldr	r3, [pc, #132]	; (3748 <__swbuf_r+0xa8>)
    36c2:	429c      	cmp	r4, r3
    36c4:	d101      	bne.n	36ca <__swbuf_r+0x2a>
    36c6:	68ac      	ldr	r4, [r5, #8]
    36c8:	e003      	b.n	36d2 <__swbuf_r+0x32>
    36ca:	4b20      	ldr	r3, [pc, #128]	; (374c <__swbuf_r+0xac>)
    36cc:	429c      	cmp	r4, r3
    36ce:	d100      	bne.n	36d2 <__swbuf_r+0x32>
    36d0:	68ec      	ldr	r4, [r5, #12]
    36d2:	69a3      	ldr	r3, [r4, #24]
    36d4:	60a3      	str	r3, [r4, #8]
    36d6:	89a3      	ldrh	r3, [r4, #12]
    36d8:	071a      	lsls	r2, r3, #28
    36da:	d50a      	bpl.n	36f2 <__swbuf_r+0x52>
    36dc:	6923      	ldr	r3, [r4, #16]
    36de:	2b00      	cmp	r3, #0
    36e0:	d007      	beq.n	36f2 <__swbuf_r+0x52>
    36e2:	6822      	ldr	r2, [r4, #0]
    36e4:	6923      	ldr	r3, [r4, #16]
    36e6:	b2f6      	uxtb	r6, r6
    36e8:	1ad0      	subs	r0, r2, r3
    36ea:	6962      	ldr	r2, [r4, #20]
    36ec:	4290      	cmp	r0, r2
    36ee:	db0f      	blt.n	3710 <__swbuf_r+0x70>
    36f0:	e008      	b.n	3704 <__swbuf_r+0x64>
    36f2:	1c28      	adds	r0, r5, #0
    36f4:	1c21      	adds	r1, r4, #0
    36f6:	f000 f82b 	bl	3750 <__swsetup_r>
    36fa:	2800      	cmp	r0, #0
    36fc:	d0f1      	beq.n	36e2 <__swbuf_r+0x42>
    36fe:	2001      	movs	r0, #1
    3700:	4240      	negs	r0, r0
    3702:	e01d      	b.n	3740 <__swbuf_r+0xa0>
    3704:	1c28      	adds	r0, r5, #0
    3706:	1c21      	adds	r1, r4, #0
    3708:	f000 f91e 	bl	3948 <_fflush_r>
    370c:	2800      	cmp	r0, #0
    370e:	d1f6      	bne.n	36fe <__swbuf_r+0x5e>
    3710:	68a3      	ldr	r3, [r4, #8]
    3712:	3001      	adds	r0, #1
    3714:	3b01      	subs	r3, #1
    3716:	60a3      	str	r3, [r4, #8]
    3718:	6823      	ldr	r3, [r4, #0]
    371a:	1c5a      	adds	r2, r3, #1
    371c:	6022      	str	r2, [r4, #0]
    371e:	701e      	strb	r6, [r3, #0]
    3720:	6963      	ldr	r3, [r4, #20]
    3722:	4298      	cmp	r0, r3
    3724:	d005      	beq.n	3732 <__swbuf_r+0x92>
    3726:	89a3      	ldrh	r3, [r4, #12]
    3728:	1c30      	adds	r0, r6, #0
    372a:	07da      	lsls	r2, r3, #31
    372c:	d508      	bpl.n	3740 <__swbuf_r+0xa0>
    372e:	2e0a      	cmp	r6, #10
    3730:	d106      	bne.n	3740 <__swbuf_r+0xa0>
    3732:	1c28      	adds	r0, r5, #0
    3734:	1c21      	adds	r1, r4, #0
    3736:	f000 f907 	bl	3948 <_fflush_r>
    373a:	2800      	cmp	r0, #0
    373c:	d1df      	bne.n	36fe <__swbuf_r+0x5e>
    373e:	1c30      	adds	r0, r6, #0
    3740:	bd70      	pop	{r4, r5, r6, pc}
    3742:	46c0      	nop			; (mov r8, r8)
    3744:	00004160 	.word	0x00004160
    3748:	00004180 	.word	0x00004180
    374c:	000041a0 	.word	0x000041a0

00003750 <__swsetup_r>:
    3750:	4b34      	ldr	r3, [pc, #208]	; (3824 <__swsetup_r+0xd4>)
    3752:	b570      	push	{r4, r5, r6, lr}
    3754:	681d      	ldr	r5, [r3, #0]
    3756:	1c06      	adds	r6, r0, #0
    3758:	1c0c      	adds	r4, r1, #0
    375a:	2d00      	cmp	r5, #0
    375c:	d005      	beq.n	376a <__swsetup_r+0x1a>
    375e:	69a9      	ldr	r1, [r5, #24]
    3760:	2900      	cmp	r1, #0
    3762:	d102      	bne.n	376a <__swsetup_r+0x1a>
    3764:	1c28      	adds	r0, r5, #0
    3766:	f000 f96f 	bl	3a48 <__sinit>
    376a:	4b2f      	ldr	r3, [pc, #188]	; (3828 <__swsetup_r+0xd8>)
    376c:	429c      	cmp	r4, r3
    376e:	d101      	bne.n	3774 <__swsetup_r+0x24>
    3770:	686c      	ldr	r4, [r5, #4]
    3772:	e008      	b.n	3786 <__swsetup_r+0x36>
    3774:	4b2d      	ldr	r3, [pc, #180]	; (382c <__swsetup_r+0xdc>)
    3776:	429c      	cmp	r4, r3
    3778:	d101      	bne.n	377e <__swsetup_r+0x2e>
    377a:	68ac      	ldr	r4, [r5, #8]
    377c:	e003      	b.n	3786 <__swsetup_r+0x36>
    377e:	4b2c      	ldr	r3, [pc, #176]	; (3830 <__swsetup_r+0xe0>)
    3780:	429c      	cmp	r4, r3
    3782:	d100      	bne.n	3786 <__swsetup_r+0x36>
    3784:	68ec      	ldr	r4, [r5, #12]
    3786:	89a2      	ldrh	r2, [r4, #12]
    3788:	b293      	uxth	r3, r2
    378a:	0719      	lsls	r1, r3, #28
    378c:	d421      	bmi.n	37d2 <__swsetup_r+0x82>
    378e:	06d9      	lsls	r1, r3, #27
    3790:	d405      	bmi.n	379e <__swsetup_r+0x4e>
    3792:	2309      	movs	r3, #9
    3794:	6033      	str	r3, [r6, #0]
    3796:	2340      	movs	r3, #64	; 0x40
    3798:	431a      	orrs	r2, r3
    379a:	81a2      	strh	r2, [r4, #12]
    379c:	e03f      	b.n	381e <__swsetup_r+0xce>
    379e:	075a      	lsls	r2, r3, #29
    37a0:	d513      	bpl.n	37ca <__swsetup_r+0x7a>
    37a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
    37a4:	2900      	cmp	r1, #0
    37a6:	d008      	beq.n	37ba <__swsetup_r+0x6a>
    37a8:	1c23      	adds	r3, r4, #0
    37aa:	3344      	adds	r3, #68	; 0x44
    37ac:	4299      	cmp	r1, r3
    37ae:	d002      	beq.n	37b6 <__swsetup_r+0x66>
    37b0:	1c30      	adds	r0, r6, #0
    37b2:	f000 fa1f 	bl	3bf4 <_free_r>
    37b6:	2300      	movs	r3, #0
    37b8:	6363      	str	r3, [r4, #52]	; 0x34
    37ba:	89a3      	ldrh	r3, [r4, #12]
    37bc:	2224      	movs	r2, #36	; 0x24
    37be:	4393      	bics	r3, r2
    37c0:	81a3      	strh	r3, [r4, #12]
    37c2:	2300      	movs	r3, #0
    37c4:	6063      	str	r3, [r4, #4]
    37c6:	6923      	ldr	r3, [r4, #16]
    37c8:	6023      	str	r3, [r4, #0]
    37ca:	89a3      	ldrh	r3, [r4, #12]
    37cc:	2208      	movs	r2, #8
    37ce:	4313      	orrs	r3, r2
    37d0:	81a3      	strh	r3, [r4, #12]
    37d2:	6921      	ldr	r1, [r4, #16]
    37d4:	2900      	cmp	r1, #0
    37d6:	d10b      	bne.n	37f0 <__swsetup_r+0xa0>
    37d8:	89a3      	ldrh	r3, [r4, #12]
    37da:	22a0      	movs	r2, #160	; 0xa0
    37dc:	0092      	lsls	r2, r2, #2
    37de:	401a      	ands	r2, r3
    37e0:	2380      	movs	r3, #128	; 0x80
    37e2:	009b      	lsls	r3, r3, #2
    37e4:	429a      	cmp	r2, r3
    37e6:	d003      	beq.n	37f0 <__swsetup_r+0xa0>
    37e8:	1c30      	adds	r0, r6, #0
    37ea:	1c21      	adds	r1, r4, #0
    37ec:	f000 f99c 	bl	3b28 <__smakebuf_r>
    37f0:	89a3      	ldrh	r3, [r4, #12]
    37f2:	2201      	movs	r2, #1
    37f4:	401a      	ands	r2, r3
    37f6:	d005      	beq.n	3804 <__swsetup_r+0xb4>
    37f8:	6961      	ldr	r1, [r4, #20]
    37fa:	2200      	movs	r2, #0
    37fc:	60a2      	str	r2, [r4, #8]
    37fe:	424a      	negs	r2, r1
    3800:	61a2      	str	r2, [r4, #24]
    3802:	e003      	b.n	380c <__swsetup_r+0xbc>
    3804:	0799      	lsls	r1, r3, #30
    3806:	d400      	bmi.n	380a <__swsetup_r+0xba>
    3808:	6962      	ldr	r2, [r4, #20]
    380a:	60a2      	str	r2, [r4, #8]
    380c:	6922      	ldr	r2, [r4, #16]
    380e:	2000      	movs	r0, #0
    3810:	4282      	cmp	r2, r0
    3812:	d106      	bne.n	3822 <__swsetup_r+0xd2>
    3814:	0619      	lsls	r1, r3, #24
    3816:	d504      	bpl.n	3822 <__swsetup_r+0xd2>
    3818:	2240      	movs	r2, #64	; 0x40
    381a:	4313      	orrs	r3, r2
    381c:	81a3      	strh	r3, [r4, #12]
    381e:	2001      	movs	r0, #1
    3820:	4240      	negs	r0, r0
    3822:	bd70      	pop	{r4, r5, r6, pc}
    3824:	20000070 	.word	0x20000070
    3828:	00004160 	.word	0x00004160
    382c:	00004180 	.word	0x00004180
    3830:	000041a0 	.word	0x000041a0

00003834 <__sflush_r>:
    3834:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3836:	898b      	ldrh	r3, [r1, #12]
    3838:	1c05      	adds	r5, r0, #0
    383a:	1c0c      	adds	r4, r1, #0
    383c:	0719      	lsls	r1, r3, #28
    383e:	d45e      	bmi.n	38fe <__sflush_r+0xca>
    3840:	6862      	ldr	r2, [r4, #4]
    3842:	2a00      	cmp	r2, #0
    3844:	dc02      	bgt.n	384c <__sflush_r+0x18>
    3846:	6c27      	ldr	r7, [r4, #64]	; 0x40
    3848:	2f00      	cmp	r7, #0
    384a:	dd1a      	ble.n	3882 <__sflush_r+0x4e>
    384c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    384e:	2f00      	cmp	r7, #0
    3850:	d017      	beq.n	3882 <__sflush_r+0x4e>
    3852:	2200      	movs	r2, #0
    3854:	682e      	ldr	r6, [r5, #0]
    3856:	602a      	str	r2, [r5, #0]
    3858:	2280      	movs	r2, #128	; 0x80
    385a:	0152      	lsls	r2, r2, #5
    385c:	401a      	ands	r2, r3
    385e:	d001      	beq.n	3864 <__sflush_r+0x30>
    3860:	6d62      	ldr	r2, [r4, #84]	; 0x54
    3862:	e015      	b.n	3890 <__sflush_r+0x5c>
    3864:	1c28      	adds	r0, r5, #0
    3866:	6a21      	ldr	r1, [r4, #32]
    3868:	2301      	movs	r3, #1
    386a:	47b8      	blx	r7
    386c:	1c02      	adds	r2, r0, #0
    386e:	1c41      	adds	r1, r0, #1
    3870:	d10e      	bne.n	3890 <__sflush_r+0x5c>
    3872:	682b      	ldr	r3, [r5, #0]
    3874:	2b00      	cmp	r3, #0
    3876:	d00b      	beq.n	3890 <__sflush_r+0x5c>
    3878:	2b1d      	cmp	r3, #29
    387a:	d001      	beq.n	3880 <__sflush_r+0x4c>
    387c:	2b16      	cmp	r3, #22
    387e:	d102      	bne.n	3886 <__sflush_r+0x52>
    3880:	602e      	str	r6, [r5, #0]
    3882:	2000      	movs	r0, #0
    3884:	e05e      	b.n	3944 <__sflush_r+0x110>
    3886:	89a3      	ldrh	r3, [r4, #12]
    3888:	2140      	movs	r1, #64	; 0x40
    388a:	430b      	orrs	r3, r1
    388c:	81a3      	strh	r3, [r4, #12]
    388e:	e059      	b.n	3944 <__sflush_r+0x110>
    3890:	89a3      	ldrh	r3, [r4, #12]
    3892:	075f      	lsls	r7, r3, #29
    3894:	d506      	bpl.n	38a4 <__sflush_r+0x70>
    3896:	6861      	ldr	r1, [r4, #4]
    3898:	6b63      	ldr	r3, [r4, #52]	; 0x34
    389a:	1a52      	subs	r2, r2, r1
    389c:	2b00      	cmp	r3, #0
    389e:	d001      	beq.n	38a4 <__sflush_r+0x70>
    38a0:	6c27      	ldr	r7, [r4, #64]	; 0x40
    38a2:	1bd2      	subs	r2, r2, r7
    38a4:	1c28      	adds	r0, r5, #0
    38a6:	6a21      	ldr	r1, [r4, #32]
    38a8:	2300      	movs	r3, #0
    38aa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    38ac:	47b8      	blx	r7
    38ae:	89a2      	ldrh	r2, [r4, #12]
    38b0:	1c41      	adds	r1, r0, #1
    38b2:	d106      	bne.n	38c2 <__sflush_r+0x8e>
    38b4:	682b      	ldr	r3, [r5, #0]
    38b6:	2b00      	cmp	r3, #0
    38b8:	d003      	beq.n	38c2 <__sflush_r+0x8e>
    38ba:	2b1d      	cmp	r3, #29
    38bc:	d001      	beq.n	38c2 <__sflush_r+0x8e>
    38be:	2b16      	cmp	r3, #22
    38c0:	d119      	bne.n	38f6 <__sflush_r+0xc2>
    38c2:	2300      	movs	r3, #0
    38c4:	6063      	str	r3, [r4, #4]
    38c6:	6923      	ldr	r3, [r4, #16]
    38c8:	6023      	str	r3, [r4, #0]
    38ca:	04d7      	lsls	r7, r2, #19
    38cc:	d505      	bpl.n	38da <__sflush_r+0xa6>
    38ce:	1c41      	adds	r1, r0, #1
    38d0:	d102      	bne.n	38d8 <__sflush_r+0xa4>
    38d2:	682a      	ldr	r2, [r5, #0]
    38d4:	2a00      	cmp	r2, #0
    38d6:	d100      	bne.n	38da <__sflush_r+0xa6>
    38d8:	6560      	str	r0, [r4, #84]	; 0x54
    38da:	6b61      	ldr	r1, [r4, #52]	; 0x34
    38dc:	602e      	str	r6, [r5, #0]
    38de:	2900      	cmp	r1, #0
    38e0:	d0cf      	beq.n	3882 <__sflush_r+0x4e>
    38e2:	1c23      	adds	r3, r4, #0
    38e4:	3344      	adds	r3, #68	; 0x44
    38e6:	4299      	cmp	r1, r3
    38e8:	d002      	beq.n	38f0 <__sflush_r+0xbc>
    38ea:	1c28      	adds	r0, r5, #0
    38ec:	f000 f982 	bl	3bf4 <_free_r>
    38f0:	2000      	movs	r0, #0
    38f2:	6360      	str	r0, [r4, #52]	; 0x34
    38f4:	e026      	b.n	3944 <__sflush_r+0x110>
    38f6:	2340      	movs	r3, #64	; 0x40
    38f8:	431a      	orrs	r2, r3
    38fa:	81a2      	strh	r2, [r4, #12]
    38fc:	e022      	b.n	3944 <__sflush_r+0x110>
    38fe:	6926      	ldr	r6, [r4, #16]
    3900:	2e00      	cmp	r6, #0
    3902:	d0be      	beq.n	3882 <__sflush_r+0x4e>
    3904:	6827      	ldr	r7, [r4, #0]
    3906:	2200      	movs	r2, #0
    3908:	1bbf      	subs	r7, r7, r6
    390a:	9701      	str	r7, [sp, #4]
    390c:	6026      	str	r6, [r4, #0]
    390e:	0799      	lsls	r1, r3, #30
    3910:	d100      	bne.n	3914 <__sflush_r+0xe0>
    3912:	6962      	ldr	r2, [r4, #20]
    3914:	60a2      	str	r2, [r4, #8]
    3916:	9f01      	ldr	r7, [sp, #4]
    3918:	2f00      	cmp	r7, #0
    391a:	ddb2      	ble.n	3882 <__sflush_r+0x4e>
    391c:	1c28      	adds	r0, r5, #0
    391e:	6a21      	ldr	r1, [r4, #32]
    3920:	1c32      	adds	r2, r6, #0
    3922:	9b01      	ldr	r3, [sp, #4]
    3924:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    3926:	47b8      	blx	r7
    3928:	2800      	cmp	r0, #0
    392a:	dc06      	bgt.n	393a <__sflush_r+0x106>
    392c:	89a3      	ldrh	r3, [r4, #12]
    392e:	2240      	movs	r2, #64	; 0x40
    3930:	4313      	orrs	r3, r2
    3932:	2001      	movs	r0, #1
    3934:	81a3      	strh	r3, [r4, #12]
    3936:	4240      	negs	r0, r0
    3938:	e004      	b.n	3944 <__sflush_r+0x110>
    393a:	9f01      	ldr	r7, [sp, #4]
    393c:	1836      	adds	r6, r6, r0
    393e:	1a3f      	subs	r7, r7, r0
    3940:	9701      	str	r7, [sp, #4]
    3942:	e7e8      	b.n	3916 <__sflush_r+0xe2>
    3944:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

00003948 <_fflush_r>:
    3948:	690a      	ldr	r2, [r1, #16]
    394a:	b538      	push	{r3, r4, r5, lr}
    394c:	1c05      	adds	r5, r0, #0
    394e:	1c0c      	adds	r4, r1, #0
    3950:	2a00      	cmp	r2, #0
    3952:	d101      	bne.n	3958 <_fflush_r+0x10>
    3954:	2000      	movs	r0, #0
    3956:	e01c      	b.n	3992 <_fflush_r+0x4a>
    3958:	2800      	cmp	r0, #0
    395a:	d004      	beq.n	3966 <_fflush_r+0x1e>
    395c:	6983      	ldr	r3, [r0, #24]
    395e:	2b00      	cmp	r3, #0
    3960:	d101      	bne.n	3966 <_fflush_r+0x1e>
    3962:	f000 f871 	bl	3a48 <__sinit>
    3966:	4b0b      	ldr	r3, [pc, #44]	; (3994 <_fflush_r+0x4c>)
    3968:	429c      	cmp	r4, r3
    396a:	d101      	bne.n	3970 <_fflush_r+0x28>
    396c:	686c      	ldr	r4, [r5, #4]
    396e:	e008      	b.n	3982 <_fflush_r+0x3a>
    3970:	4b09      	ldr	r3, [pc, #36]	; (3998 <_fflush_r+0x50>)
    3972:	429c      	cmp	r4, r3
    3974:	d101      	bne.n	397a <_fflush_r+0x32>
    3976:	68ac      	ldr	r4, [r5, #8]
    3978:	e003      	b.n	3982 <_fflush_r+0x3a>
    397a:	4b08      	ldr	r3, [pc, #32]	; (399c <_fflush_r+0x54>)
    397c:	429c      	cmp	r4, r3
    397e:	d100      	bne.n	3982 <_fflush_r+0x3a>
    3980:	68ec      	ldr	r4, [r5, #12]
    3982:	220c      	movs	r2, #12
    3984:	5ea3      	ldrsh	r3, [r4, r2]
    3986:	2b00      	cmp	r3, #0
    3988:	d0e4      	beq.n	3954 <_fflush_r+0xc>
    398a:	1c28      	adds	r0, r5, #0
    398c:	1c21      	adds	r1, r4, #0
    398e:	f7ff ff51 	bl	3834 <__sflush_r>
    3992:	bd38      	pop	{r3, r4, r5, pc}
    3994:	00004160 	.word	0x00004160
    3998:	00004180 	.word	0x00004180
    399c:	000041a0 	.word	0x000041a0

000039a0 <_cleanup_r>:
    39a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    39a2:	1c04      	adds	r4, r0, #0
    39a4:	1c07      	adds	r7, r0, #0
    39a6:	3448      	adds	r4, #72	; 0x48
    39a8:	2c00      	cmp	r4, #0
    39aa:	d012      	beq.n	39d2 <_cleanup_r+0x32>
    39ac:	68a5      	ldr	r5, [r4, #8]
    39ae:	6866      	ldr	r6, [r4, #4]
    39b0:	3e01      	subs	r6, #1
    39b2:	d40c      	bmi.n	39ce <_cleanup_r+0x2e>
    39b4:	89ab      	ldrh	r3, [r5, #12]
    39b6:	2b01      	cmp	r3, #1
    39b8:	d907      	bls.n	39ca <_cleanup_r+0x2a>
    39ba:	220e      	movs	r2, #14
    39bc:	5eab      	ldrsh	r3, [r5, r2]
    39be:	3301      	adds	r3, #1
    39c0:	d003      	beq.n	39ca <_cleanup_r+0x2a>
    39c2:	1c38      	adds	r0, r7, #0
    39c4:	1c29      	adds	r1, r5, #0
    39c6:	f7ff ffbf 	bl	3948 <_fflush_r>
    39ca:	3568      	adds	r5, #104	; 0x68
    39cc:	e7f0      	b.n	39b0 <_cleanup_r+0x10>
    39ce:	6824      	ldr	r4, [r4, #0]
    39d0:	e7ea      	b.n	39a8 <_cleanup_r+0x8>
    39d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000039d4 <std.isra.0>:
    39d4:	2300      	movs	r3, #0
    39d6:	b510      	push	{r4, lr}
    39d8:	1c04      	adds	r4, r0, #0
    39da:	6003      	str	r3, [r0, #0]
    39dc:	6043      	str	r3, [r0, #4]
    39de:	6083      	str	r3, [r0, #8]
    39e0:	8181      	strh	r1, [r0, #12]
    39e2:	6643      	str	r3, [r0, #100]	; 0x64
    39e4:	81c2      	strh	r2, [r0, #14]
    39e6:	6103      	str	r3, [r0, #16]
    39e8:	6143      	str	r3, [r0, #20]
    39ea:	6183      	str	r3, [r0, #24]
    39ec:	1c19      	adds	r1, r3, #0
    39ee:	2208      	movs	r2, #8
    39f0:	305c      	adds	r0, #92	; 0x5c
    39f2:	f7ff fae8 	bl	2fc6 <memset>
    39f6:	4b05      	ldr	r3, [pc, #20]	; (3a0c <std.isra.0+0x38>)
    39f8:	6224      	str	r4, [r4, #32]
    39fa:	6263      	str	r3, [r4, #36]	; 0x24
    39fc:	4b04      	ldr	r3, [pc, #16]	; (3a10 <std.isra.0+0x3c>)
    39fe:	62a3      	str	r3, [r4, #40]	; 0x28
    3a00:	4b04      	ldr	r3, [pc, #16]	; (3a14 <std.isra.0+0x40>)
    3a02:	62e3      	str	r3, [r4, #44]	; 0x2c
    3a04:	4b04      	ldr	r3, [pc, #16]	; (3a18 <std.isra.0+0x44>)
    3a06:	6323      	str	r3, [r4, #48]	; 0x30
    3a08:	bd10      	pop	{r4, pc}
    3a0a:	46c0      	nop			; (mov r8, r8)
    3a0c:	00003d51 	.word	0x00003d51
    3a10:	00003d79 	.word	0x00003d79
    3a14:	00003db1 	.word	0x00003db1
    3a18:	00003ddd 	.word	0x00003ddd

00003a1c <__sfmoreglue>:
    3a1c:	b570      	push	{r4, r5, r6, lr}
    3a1e:	1e4b      	subs	r3, r1, #1
    3a20:	2568      	movs	r5, #104	; 0x68
    3a22:	435d      	muls	r5, r3
    3a24:	1c0e      	adds	r6, r1, #0
    3a26:	1c29      	adds	r1, r5, #0
    3a28:	3174      	adds	r1, #116	; 0x74
    3a2a:	f000 f92b 	bl	3c84 <_malloc_r>
    3a2e:	1e04      	subs	r4, r0, #0
    3a30:	d008      	beq.n	3a44 <__sfmoreglue+0x28>
    3a32:	2100      	movs	r1, #0
    3a34:	6001      	str	r1, [r0, #0]
    3a36:	6046      	str	r6, [r0, #4]
    3a38:	1c2a      	adds	r2, r5, #0
    3a3a:	300c      	adds	r0, #12
    3a3c:	60a0      	str	r0, [r4, #8]
    3a3e:	3268      	adds	r2, #104	; 0x68
    3a40:	f7ff fac1 	bl	2fc6 <memset>
    3a44:	1c20      	adds	r0, r4, #0
    3a46:	bd70      	pop	{r4, r5, r6, pc}

00003a48 <__sinit>:
    3a48:	6983      	ldr	r3, [r0, #24]
    3a4a:	b513      	push	{r0, r1, r4, lr}
    3a4c:	1c04      	adds	r4, r0, #0
    3a4e:	2b00      	cmp	r3, #0
    3a50:	d127      	bne.n	3aa2 <__sinit+0x5a>
    3a52:	6483      	str	r3, [r0, #72]	; 0x48
    3a54:	64c3      	str	r3, [r0, #76]	; 0x4c
    3a56:	6503      	str	r3, [r0, #80]	; 0x50
    3a58:	4b12      	ldr	r3, [pc, #72]	; (3aa4 <__sinit+0x5c>)
    3a5a:	4a13      	ldr	r2, [pc, #76]	; (3aa8 <__sinit+0x60>)
    3a5c:	681b      	ldr	r3, [r3, #0]
    3a5e:	6282      	str	r2, [r0, #40]	; 0x28
    3a60:	4298      	cmp	r0, r3
    3a62:	d101      	bne.n	3a68 <__sinit+0x20>
    3a64:	2301      	movs	r3, #1
    3a66:	6183      	str	r3, [r0, #24]
    3a68:	1c20      	adds	r0, r4, #0
    3a6a:	f000 f81f 	bl	3aac <__sfp>
    3a6e:	6060      	str	r0, [r4, #4]
    3a70:	1c20      	adds	r0, r4, #0
    3a72:	f000 f81b 	bl	3aac <__sfp>
    3a76:	60a0      	str	r0, [r4, #8]
    3a78:	1c20      	adds	r0, r4, #0
    3a7a:	f000 f817 	bl	3aac <__sfp>
    3a7e:	2104      	movs	r1, #4
    3a80:	60e0      	str	r0, [r4, #12]
    3a82:	2200      	movs	r2, #0
    3a84:	6860      	ldr	r0, [r4, #4]
    3a86:	f7ff ffa5 	bl	39d4 <std.isra.0>
    3a8a:	68a0      	ldr	r0, [r4, #8]
    3a8c:	2109      	movs	r1, #9
    3a8e:	2201      	movs	r2, #1
    3a90:	f7ff ffa0 	bl	39d4 <std.isra.0>
    3a94:	68e0      	ldr	r0, [r4, #12]
    3a96:	2112      	movs	r1, #18
    3a98:	2202      	movs	r2, #2
    3a9a:	f7ff ff9b 	bl	39d4 <std.isra.0>
    3a9e:	2301      	movs	r3, #1
    3aa0:	61a3      	str	r3, [r4, #24]
    3aa2:	bd13      	pop	{r0, r1, r4, pc}
    3aa4:	00004128 	.word	0x00004128
    3aa8:	000039a1 	.word	0x000039a1

00003aac <__sfp>:
    3aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3aae:	4b1d      	ldr	r3, [pc, #116]	; (3b24 <__sfp+0x78>)
    3ab0:	1c07      	adds	r7, r0, #0
    3ab2:	681e      	ldr	r6, [r3, #0]
    3ab4:	69b2      	ldr	r2, [r6, #24]
    3ab6:	2a00      	cmp	r2, #0
    3ab8:	d102      	bne.n	3ac0 <__sfp+0x14>
    3aba:	1c30      	adds	r0, r6, #0
    3abc:	f7ff ffc4 	bl	3a48 <__sinit>
    3ac0:	3648      	adds	r6, #72	; 0x48
    3ac2:	68b4      	ldr	r4, [r6, #8]
    3ac4:	6873      	ldr	r3, [r6, #4]
    3ac6:	3b01      	subs	r3, #1
    3ac8:	d405      	bmi.n	3ad6 <__sfp+0x2a>
    3aca:	220c      	movs	r2, #12
    3acc:	5ea5      	ldrsh	r5, [r4, r2]
    3ace:	2d00      	cmp	r5, #0
    3ad0:	d010      	beq.n	3af4 <__sfp+0x48>
    3ad2:	3468      	adds	r4, #104	; 0x68
    3ad4:	e7f7      	b.n	3ac6 <__sfp+0x1a>
    3ad6:	6833      	ldr	r3, [r6, #0]
    3ad8:	2b00      	cmp	r3, #0
    3ada:	d106      	bne.n	3aea <__sfp+0x3e>
    3adc:	1c38      	adds	r0, r7, #0
    3ade:	2104      	movs	r1, #4
    3ae0:	f7ff ff9c 	bl	3a1c <__sfmoreglue>
    3ae4:	6030      	str	r0, [r6, #0]
    3ae6:	2800      	cmp	r0, #0
    3ae8:	d001      	beq.n	3aee <__sfp+0x42>
    3aea:	6836      	ldr	r6, [r6, #0]
    3aec:	e7e9      	b.n	3ac2 <__sfp+0x16>
    3aee:	230c      	movs	r3, #12
    3af0:	603b      	str	r3, [r7, #0]
    3af2:	e016      	b.n	3b22 <__sfp+0x76>
    3af4:	2301      	movs	r3, #1
    3af6:	425b      	negs	r3, r3
    3af8:	81e3      	strh	r3, [r4, #14]
    3afa:	1c20      	adds	r0, r4, #0
    3afc:	2301      	movs	r3, #1
    3afe:	81a3      	strh	r3, [r4, #12]
    3b00:	6665      	str	r5, [r4, #100]	; 0x64
    3b02:	6025      	str	r5, [r4, #0]
    3b04:	60a5      	str	r5, [r4, #8]
    3b06:	6065      	str	r5, [r4, #4]
    3b08:	6125      	str	r5, [r4, #16]
    3b0a:	6165      	str	r5, [r4, #20]
    3b0c:	61a5      	str	r5, [r4, #24]
    3b0e:	305c      	adds	r0, #92	; 0x5c
    3b10:	1c29      	adds	r1, r5, #0
    3b12:	2208      	movs	r2, #8
    3b14:	f7ff fa57 	bl	2fc6 <memset>
    3b18:	6365      	str	r5, [r4, #52]	; 0x34
    3b1a:	63a5      	str	r5, [r4, #56]	; 0x38
    3b1c:	64a5      	str	r5, [r4, #72]	; 0x48
    3b1e:	64e5      	str	r5, [r4, #76]	; 0x4c
    3b20:	1c20      	adds	r0, r4, #0
    3b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3b24:	00004128 	.word	0x00004128

00003b28 <__smakebuf_r>:
    3b28:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b2a:	898b      	ldrh	r3, [r1, #12]
    3b2c:	b091      	sub	sp, #68	; 0x44
    3b2e:	1c05      	adds	r5, r0, #0
    3b30:	1c0c      	adds	r4, r1, #0
    3b32:	079a      	lsls	r2, r3, #30
    3b34:	d425      	bmi.n	3b82 <__smakebuf_r+0x5a>
    3b36:	230e      	movs	r3, #14
    3b38:	5ec9      	ldrsh	r1, [r1, r3]
    3b3a:	2900      	cmp	r1, #0
    3b3c:	da06      	bge.n	3b4c <__smakebuf_r+0x24>
    3b3e:	89a7      	ldrh	r7, [r4, #12]
    3b40:	2380      	movs	r3, #128	; 0x80
    3b42:	401f      	ands	r7, r3
    3b44:	d00f      	beq.n	3b66 <__smakebuf_r+0x3e>
    3b46:	2700      	movs	r7, #0
    3b48:	2640      	movs	r6, #64	; 0x40
    3b4a:	e00e      	b.n	3b6a <__smakebuf_r+0x42>
    3b4c:	aa01      	add	r2, sp, #4
    3b4e:	f000 f979 	bl	3e44 <_fstat_r>
    3b52:	2800      	cmp	r0, #0
    3b54:	dbf3      	blt.n	3b3e <__smakebuf_r+0x16>
    3b56:	9b02      	ldr	r3, [sp, #8]
    3b58:	27f0      	movs	r7, #240	; 0xf0
    3b5a:	023f      	lsls	r7, r7, #8
    3b5c:	4a18      	ldr	r2, [pc, #96]	; (3bc0 <__smakebuf_r+0x98>)
    3b5e:	401f      	ands	r7, r3
    3b60:	18bf      	adds	r7, r7, r2
    3b62:	427b      	negs	r3, r7
    3b64:	415f      	adcs	r7, r3
    3b66:	2680      	movs	r6, #128	; 0x80
    3b68:	00f6      	lsls	r6, r6, #3
    3b6a:	1c28      	adds	r0, r5, #0
    3b6c:	1c31      	adds	r1, r6, #0
    3b6e:	f000 f889 	bl	3c84 <_malloc_r>
    3b72:	2800      	cmp	r0, #0
    3b74:	d10c      	bne.n	3b90 <__smakebuf_r+0x68>
    3b76:	89a3      	ldrh	r3, [r4, #12]
    3b78:	059a      	lsls	r2, r3, #22
    3b7a:	d41f      	bmi.n	3bbc <__smakebuf_r+0x94>
    3b7c:	2202      	movs	r2, #2
    3b7e:	4313      	orrs	r3, r2
    3b80:	81a3      	strh	r3, [r4, #12]
    3b82:	1c23      	adds	r3, r4, #0
    3b84:	3347      	adds	r3, #71	; 0x47
    3b86:	6023      	str	r3, [r4, #0]
    3b88:	6123      	str	r3, [r4, #16]
    3b8a:	2301      	movs	r3, #1
    3b8c:	6163      	str	r3, [r4, #20]
    3b8e:	e015      	b.n	3bbc <__smakebuf_r+0x94>
    3b90:	4b0c      	ldr	r3, [pc, #48]	; (3bc4 <__smakebuf_r+0x9c>)
    3b92:	2280      	movs	r2, #128	; 0x80
    3b94:	62ab      	str	r3, [r5, #40]	; 0x28
    3b96:	89a3      	ldrh	r3, [r4, #12]
    3b98:	6020      	str	r0, [r4, #0]
    3b9a:	4313      	orrs	r3, r2
    3b9c:	81a3      	strh	r3, [r4, #12]
    3b9e:	6120      	str	r0, [r4, #16]
    3ba0:	6166      	str	r6, [r4, #20]
    3ba2:	2f00      	cmp	r7, #0
    3ba4:	d00a      	beq.n	3bbc <__smakebuf_r+0x94>
    3ba6:	230e      	movs	r3, #14
    3ba8:	5ee1      	ldrsh	r1, [r4, r3]
    3baa:	1c28      	adds	r0, r5, #0
    3bac:	f000 f95c 	bl	3e68 <_isatty_r>
    3bb0:	2800      	cmp	r0, #0
    3bb2:	d003      	beq.n	3bbc <__smakebuf_r+0x94>
    3bb4:	89a3      	ldrh	r3, [r4, #12]
    3bb6:	2201      	movs	r2, #1
    3bb8:	4313      	orrs	r3, r2
    3bba:	81a3      	strh	r3, [r4, #12]
    3bbc:	b011      	add	sp, #68	; 0x44
    3bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3bc0:	ffffe000 	.word	0xffffe000
    3bc4:	000039a1 	.word	0x000039a1

00003bc8 <malloc>:
    3bc8:	b508      	push	{r3, lr}
    3bca:	4b03      	ldr	r3, [pc, #12]	; (3bd8 <malloc+0x10>)
    3bcc:	1c01      	adds	r1, r0, #0
    3bce:	6818      	ldr	r0, [r3, #0]
    3bd0:	f000 f858 	bl	3c84 <_malloc_r>
    3bd4:	bd08      	pop	{r3, pc}
    3bd6:	46c0      	nop			; (mov r8, r8)
    3bd8:	20000070 	.word	0x20000070

00003bdc <memchr>:
    3bdc:	b2c9      	uxtb	r1, r1
    3bde:	1882      	adds	r2, r0, r2
    3be0:	4290      	cmp	r0, r2
    3be2:	d004      	beq.n	3bee <memchr+0x12>
    3be4:	7803      	ldrb	r3, [r0, #0]
    3be6:	428b      	cmp	r3, r1
    3be8:	d002      	beq.n	3bf0 <memchr+0x14>
    3bea:	3001      	adds	r0, #1
    3bec:	e7f8      	b.n	3be0 <memchr+0x4>
    3bee:	2000      	movs	r0, #0
    3bf0:	4770      	bx	lr
	...

00003bf4 <_free_r>:
    3bf4:	b530      	push	{r4, r5, lr}
    3bf6:	2900      	cmp	r1, #0
    3bf8:	d040      	beq.n	3c7c <_free_r+0x88>
    3bfa:	3904      	subs	r1, #4
    3bfc:	680b      	ldr	r3, [r1, #0]
    3bfe:	2b00      	cmp	r3, #0
    3c00:	da00      	bge.n	3c04 <_free_r+0x10>
    3c02:	18c9      	adds	r1, r1, r3
    3c04:	4a1e      	ldr	r2, [pc, #120]	; (3c80 <_free_r+0x8c>)
    3c06:	6813      	ldr	r3, [r2, #0]
    3c08:	1c14      	adds	r4, r2, #0
    3c0a:	2b00      	cmp	r3, #0
    3c0c:	d102      	bne.n	3c14 <_free_r+0x20>
    3c0e:	604b      	str	r3, [r1, #4]
    3c10:	6011      	str	r1, [r2, #0]
    3c12:	e033      	b.n	3c7c <_free_r+0x88>
    3c14:	4299      	cmp	r1, r3
    3c16:	d20f      	bcs.n	3c38 <_free_r+0x44>
    3c18:	6808      	ldr	r0, [r1, #0]
    3c1a:	180a      	adds	r2, r1, r0
    3c1c:	429a      	cmp	r2, r3
    3c1e:	d105      	bne.n	3c2c <_free_r+0x38>
    3c20:	6813      	ldr	r3, [r2, #0]
    3c22:	6852      	ldr	r2, [r2, #4]
    3c24:	18c0      	adds	r0, r0, r3
    3c26:	6008      	str	r0, [r1, #0]
    3c28:	604a      	str	r2, [r1, #4]
    3c2a:	e000      	b.n	3c2e <_free_r+0x3a>
    3c2c:	604b      	str	r3, [r1, #4]
    3c2e:	6021      	str	r1, [r4, #0]
    3c30:	e024      	b.n	3c7c <_free_r+0x88>
    3c32:	428a      	cmp	r2, r1
    3c34:	d803      	bhi.n	3c3e <_free_r+0x4a>
    3c36:	1c13      	adds	r3, r2, #0
    3c38:	685a      	ldr	r2, [r3, #4]
    3c3a:	2a00      	cmp	r2, #0
    3c3c:	d1f9      	bne.n	3c32 <_free_r+0x3e>
    3c3e:	681d      	ldr	r5, [r3, #0]
    3c40:	195c      	adds	r4, r3, r5
    3c42:	428c      	cmp	r4, r1
    3c44:	d10b      	bne.n	3c5e <_free_r+0x6a>
    3c46:	6809      	ldr	r1, [r1, #0]
    3c48:	1869      	adds	r1, r5, r1
    3c4a:	1858      	adds	r0, r3, r1
    3c4c:	6019      	str	r1, [r3, #0]
    3c4e:	4290      	cmp	r0, r2
    3c50:	d114      	bne.n	3c7c <_free_r+0x88>
    3c52:	6814      	ldr	r4, [r2, #0]
    3c54:	6852      	ldr	r2, [r2, #4]
    3c56:	1909      	adds	r1, r1, r4
    3c58:	6019      	str	r1, [r3, #0]
    3c5a:	605a      	str	r2, [r3, #4]
    3c5c:	e00e      	b.n	3c7c <_free_r+0x88>
    3c5e:	428c      	cmp	r4, r1
    3c60:	d902      	bls.n	3c68 <_free_r+0x74>
    3c62:	230c      	movs	r3, #12
    3c64:	6003      	str	r3, [r0, #0]
    3c66:	e009      	b.n	3c7c <_free_r+0x88>
    3c68:	6808      	ldr	r0, [r1, #0]
    3c6a:	180c      	adds	r4, r1, r0
    3c6c:	4294      	cmp	r4, r2
    3c6e:	d103      	bne.n	3c78 <_free_r+0x84>
    3c70:	6814      	ldr	r4, [r2, #0]
    3c72:	6852      	ldr	r2, [r2, #4]
    3c74:	1900      	adds	r0, r0, r4
    3c76:	6008      	str	r0, [r1, #0]
    3c78:	604a      	str	r2, [r1, #4]
    3c7a:	6059      	str	r1, [r3, #4]
    3c7c:	bd30      	pop	{r4, r5, pc}
    3c7e:	46c0      	nop			; (mov r8, r8)
    3c80:	200000d8 	.word	0x200000d8

00003c84 <_malloc_r>:
    3c84:	b570      	push	{r4, r5, r6, lr}
    3c86:	2303      	movs	r3, #3
    3c88:	1ccd      	adds	r5, r1, #3
    3c8a:	439d      	bics	r5, r3
    3c8c:	3508      	adds	r5, #8
    3c8e:	1c06      	adds	r6, r0, #0
    3c90:	2d0c      	cmp	r5, #12
    3c92:	d201      	bcs.n	3c98 <_malloc_r+0x14>
    3c94:	250c      	movs	r5, #12
    3c96:	e001      	b.n	3c9c <_malloc_r+0x18>
    3c98:	2d00      	cmp	r5, #0
    3c9a:	db3f      	blt.n	3d1c <_malloc_r+0x98>
    3c9c:	428d      	cmp	r5, r1
    3c9e:	d33d      	bcc.n	3d1c <_malloc_r+0x98>
    3ca0:	4b20      	ldr	r3, [pc, #128]	; (3d24 <_malloc_r+0xa0>)
    3ca2:	681c      	ldr	r4, [r3, #0]
    3ca4:	1c1a      	adds	r2, r3, #0
    3ca6:	1c21      	adds	r1, r4, #0
    3ca8:	2900      	cmp	r1, #0
    3caa:	d013      	beq.n	3cd4 <_malloc_r+0x50>
    3cac:	6808      	ldr	r0, [r1, #0]
    3cae:	1b43      	subs	r3, r0, r5
    3cb0:	d40d      	bmi.n	3cce <_malloc_r+0x4a>
    3cb2:	2b0b      	cmp	r3, #11
    3cb4:	d902      	bls.n	3cbc <_malloc_r+0x38>
    3cb6:	600b      	str	r3, [r1, #0]
    3cb8:	18cc      	adds	r4, r1, r3
    3cba:	e01e      	b.n	3cfa <_malloc_r+0x76>
    3cbc:	428c      	cmp	r4, r1
    3cbe:	d102      	bne.n	3cc6 <_malloc_r+0x42>
    3cc0:	6863      	ldr	r3, [r4, #4]
    3cc2:	6013      	str	r3, [r2, #0]
    3cc4:	e01a      	b.n	3cfc <_malloc_r+0x78>
    3cc6:	6848      	ldr	r0, [r1, #4]
    3cc8:	6060      	str	r0, [r4, #4]
    3cca:	1c0c      	adds	r4, r1, #0
    3ccc:	e016      	b.n	3cfc <_malloc_r+0x78>
    3cce:	1c0c      	adds	r4, r1, #0
    3cd0:	6849      	ldr	r1, [r1, #4]
    3cd2:	e7e9      	b.n	3ca8 <_malloc_r+0x24>
    3cd4:	4c14      	ldr	r4, [pc, #80]	; (3d28 <_malloc_r+0xa4>)
    3cd6:	6820      	ldr	r0, [r4, #0]
    3cd8:	2800      	cmp	r0, #0
    3cda:	d103      	bne.n	3ce4 <_malloc_r+0x60>
    3cdc:	1c30      	adds	r0, r6, #0
    3cde:	f000 f825 	bl	3d2c <_sbrk_r>
    3ce2:	6020      	str	r0, [r4, #0]
    3ce4:	1c30      	adds	r0, r6, #0
    3ce6:	1c29      	adds	r1, r5, #0
    3ce8:	f000 f820 	bl	3d2c <_sbrk_r>
    3cec:	1c43      	adds	r3, r0, #1
    3cee:	d015      	beq.n	3d1c <_malloc_r+0x98>
    3cf0:	1cc4      	adds	r4, r0, #3
    3cf2:	2303      	movs	r3, #3
    3cf4:	439c      	bics	r4, r3
    3cf6:	4284      	cmp	r4, r0
    3cf8:	d10a      	bne.n	3d10 <_malloc_r+0x8c>
    3cfa:	6025      	str	r5, [r4, #0]
    3cfc:	1c20      	adds	r0, r4, #0
    3cfe:	300b      	adds	r0, #11
    3d00:	2207      	movs	r2, #7
    3d02:	1d23      	adds	r3, r4, #4
    3d04:	4390      	bics	r0, r2
    3d06:	1ac3      	subs	r3, r0, r3
    3d08:	d00b      	beq.n	3d22 <_malloc_r+0x9e>
    3d0a:	425a      	negs	r2, r3
    3d0c:	50e2      	str	r2, [r4, r3]
    3d0e:	e008      	b.n	3d22 <_malloc_r+0x9e>
    3d10:	1a21      	subs	r1, r4, r0
    3d12:	1c30      	adds	r0, r6, #0
    3d14:	f000 f80a 	bl	3d2c <_sbrk_r>
    3d18:	3001      	adds	r0, #1
    3d1a:	d1ee      	bne.n	3cfa <_malloc_r+0x76>
    3d1c:	230c      	movs	r3, #12
    3d1e:	6033      	str	r3, [r6, #0]
    3d20:	2000      	movs	r0, #0
    3d22:	bd70      	pop	{r4, r5, r6, pc}
    3d24:	200000d8 	.word	0x200000d8
    3d28:	200000d4 	.word	0x200000d4

00003d2c <_sbrk_r>:
    3d2c:	b538      	push	{r3, r4, r5, lr}
    3d2e:	4c07      	ldr	r4, [pc, #28]	; (3d4c <_sbrk_r+0x20>)
    3d30:	2300      	movs	r3, #0
    3d32:	1c05      	adds	r5, r0, #0
    3d34:	1c08      	adds	r0, r1, #0
    3d36:	6023      	str	r3, [r4, #0]
    3d38:	f7fe f976 	bl	2028 <_sbrk>
    3d3c:	1c43      	adds	r3, r0, #1
    3d3e:	d103      	bne.n	3d48 <_sbrk_r+0x1c>
    3d40:	6823      	ldr	r3, [r4, #0]
    3d42:	2b00      	cmp	r3, #0
    3d44:	d000      	beq.n	3d48 <_sbrk_r+0x1c>
    3d46:	602b      	str	r3, [r5, #0]
    3d48:	bd38      	pop	{r3, r4, r5, pc}
    3d4a:	46c0      	nop			; (mov r8, r8)
    3d4c:	200001a4 	.word	0x200001a4

00003d50 <__sread>:
    3d50:	b538      	push	{r3, r4, r5, lr}
    3d52:	1c0c      	adds	r4, r1, #0
    3d54:	250e      	movs	r5, #14
    3d56:	5f49      	ldrsh	r1, [r1, r5]
    3d58:	f000 f8ac 	bl	3eb4 <_read_r>
    3d5c:	2800      	cmp	r0, #0
    3d5e:	db03      	blt.n	3d68 <__sread+0x18>
    3d60:	6d62      	ldr	r2, [r4, #84]	; 0x54
    3d62:	1813      	adds	r3, r2, r0
    3d64:	6563      	str	r3, [r4, #84]	; 0x54
    3d66:	e003      	b.n	3d70 <__sread+0x20>
    3d68:	89a2      	ldrh	r2, [r4, #12]
    3d6a:	4b02      	ldr	r3, [pc, #8]	; (3d74 <__sread+0x24>)
    3d6c:	4013      	ands	r3, r2
    3d6e:	81a3      	strh	r3, [r4, #12]
    3d70:	bd38      	pop	{r3, r4, r5, pc}
    3d72:	46c0      	nop			; (mov r8, r8)
    3d74:	ffffefff 	.word	0xffffefff

00003d78 <__swrite>:
    3d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3d7a:	1c1e      	adds	r6, r3, #0
    3d7c:	898b      	ldrh	r3, [r1, #12]
    3d7e:	1c05      	adds	r5, r0, #0
    3d80:	1c0c      	adds	r4, r1, #0
    3d82:	1c17      	adds	r7, r2, #0
    3d84:	05da      	lsls	r2, r3, #23
    3d86:	d505      	bpl.n	3d94 <__swrite+0x1c>
    3d88:	230e      	movs	r3, #14
    3d8a:	5ec9      	ldrsh	r1, [r1, r3]
    3d8c:	2200      	movs	r2, #0
    3d8e:	2302      	movs	r3, #2
    3d90:	f000 f87c 	bl	3e8c <_lseek_r>
    3d94:	89a2      	ldrh	r2, [r4, #12]
    3d96:	4b05      	ldr	r3, [pc, #20]	; (3dac <__swrite+0x34>)
    3d98:	1c28      	adds	r0, r5, #0
    3d9a:	4013      	ands	r3, r2
    3d9c:	81a3      	strh	r3, [r4, #12]
    3d9e:	220e      	movs	r2, #14
    3da0:	5ea1      	ldrsh	r1, [r4, r2]
    3da2:	1c33      	adds	r3, r6, #0
    3da4:	1c3a      	adds	r2, r7, #0
    3da6:	f000 f827 	bl	3df8 <_write_r>
    3daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3dac:	ffffefff 	.word	0xffffefff

00003db0 <__sseek>:
    3db0:	b538      	push	{r3, r4, r5, lr}
    3db2:	1c0c      	adds	r4, r1, #0
    3db4:	250e      	movs	r5, #14
    3db6:	5f49      	ldrsh	r1, [r1, r5]
    3db8:	f000 f868 	bl	3e8c <_lseek_r>
    3dbc:	89a3      	ldrh	r3, [r4, #12]
    3dbe:	1c42      	adds	r2, r0, #1
    3dc0:	d103      	bne.n	3dca <__sseek+0x1a>
    3dc2:	4a05      	ldr	r2, [pc, #20]	; (3dd8 <__sseek+0x28>)
    3dc4:	4013      	ands	r3, r2
    3dc6:	81a3      	strh	r3, [r4, #12]
    3dc8:	e004      	b.n	3dd4 <__sseek+0x24>
    3dca:	2280      	movs	r2, #128	; 0x80
    3dcc:	0152      	lsls	r2, r2, #5
    3dce:	4313      	orrs	r3, r2
    3dd0:	81a3      	strh	r3, [r4, #12]
    3dd2:	6560      	str	r0, [r4, #84]	; 0x54
    3dd4:	bd38      	pop	{r3, r4, r5, pc}
    3dd6:	46c0      	nop			; (mov r8, r8)
    3dd8:	ffffefff 	.word	0xffffefff

00003ddc <__sclose>:
    3ddc:	b508      	push	{r3, lr}
    3dde:	230e      	movs	r3, #14
    3de0:	5ec9      	ldrsh	r1, [r1, r3]
    3de2:	f000 f81d 	bl	3e20 <_close_r>
    3de6:	bd08      	pop	{r3, pc}

00003de8 <strlen>:
    3de8:	2300      	movs	r3, #0
    3dea:	5cc2      	ldrb	r2, [r0, r3]
    3dec:	3301      	adds	r3, #1
    3dee:	2a00      	cmp	r2, #0
    3df0:	d1fb      	bne.n	3dea <strlen+0x2>
    3df2:	1e58      	subs	r0, r3, #1
    3df4:	4770      	bx	lr
	...

00003df8 <_write_r>:
    3df8:	b538      	push	{r3, r4, r5, lr}
    3dfa:	4c08      	ldr	r4, [pc, #32]	; (3e1c <_write_r+0x24>)
    3dfc:	1c05      	adds	r5, r0, #0
    3dfe:	2000      	movs	r0, #0
    3e00:	6020      	str	r0, [r4, #0]
    3e02:	1c08      	adds	r0, r1, #0
    3e04:	1c11      	adds	r1, r2, #0
    3e06:	1c1a      	adds	r2, r3, #0
    3e08:	f7fd fa32 	bl	1270 <_write>
    3e0c:	1c43      	adds	r3, r0, #1
    3e0e:	d103      	bne.n	3e18 <_write_r+0x20>
    3e10:	6823      	ldr	r3, [r4, #0]
    3e12:	2b00      	cmp	r3, #0
    3e14:	d000      	beq.n	3e18 <_write_r+0x20>
    3e16:	602b      	str	r3, [r5, #0]
    3e18:	bd38      	pop	{r3, r4, r5, pc}
    3e1a:	46c0      	nop			; (mov r8, r8)
    3e1c:	200001a4 	.word	0x200001a4

00003e20 <_close_r>:
    3e20:	b538      	push	{r3, r4, r5, lr}
    3e22:	4c07      	ldr	r4, [pc, #28]	; (3e40 <_close_r+0x20>)
    3e24:	2300      	movs	r3, #0
    3e26:	1c05      	adds	r5, r0, #0
    3e28:	1c08      	adds	r0, r1, #0
    3e2a:	6023      	str	r3, [r4, #0]
    3e2c:	f7fe f90e 	bl	204c <_close>
    3e30:	1c43      	adds	r3, r0, #1
    3e32:	d103      	bne.n	3e3c <_close_r+0x1c>
    3e34:	6823      	ldr	r3, [r4, #0]
    3e36:	2b00      	cmp	r3, #0
    3e38:	d000      	beq.n	3e3c <_close_r+0x1c>
    3e3a:	602b      	str	r3, [r5, #0]
    3e3c:	bd38      	pop	{r3, r4, r5, pc}
    3e3e:	46c0      	nop			; (mov r8, r8)
    3e40:	200001a4 	.word	0x200001a4

00003e44 <_fstat_r>:
    3e44:	b538      	push	{r3, r4, r5, lr}
    3e46:	4c07      	ldr	r4, [pc, #28]	; (3e64 <_fstat_r+0x20>)
    3e48:	2300      	movs	r3, #0
    3e4a:	1c05      	adds	r5, r0, #0
    3e4c:	1c08      	adds	r0, r1, #0
    3e4e:	1c11      	adds	r1, r2, #0
    3e50:	6023      	str	r3, [r4, #0]
    3e52:	f7fe f8ff 	bl	2054 <_fstat>
    3e56:	1c43      	adds	r3, r0, #1
    3e58:	d103      	bne.n	3e62 <_fstat_r+0x1e>
    3e5a:	6823      	ldr	r3, [r4, #0]
    3e5c:	2b00      	cmp	r3, #0
    3e5e:	d000      	beq.n	3e62 <_fstat_r+0x1e>
    3e60:	602b      	str	r3, [r5, #0]
    3e62:	bd38      	pop	{r3, r4, r5, pc}
    3e64:	200001a4 	.word	0x200001a4

00003e68 <_isatty_r>:
    3e68:	b538      	push	{r3, r4, r5, lr}
    3e6a:	4c07      	ldr	r4, [pc, #28]	; (3e88 <_isatty_r+0x20>)
    3e6c:	2300      	movs	r3, #0
    3e6e:	1c05      	adds	r5, r0, #0
    3e70:	1c08      	adds	r0, r1, #0
    3e72:	6023      	str	r3, [r4, #0]
    3e74:	f7fe f8f4 	bl	2060 <_isatty>
    3e78:	1c43      	adds	r3, r0, #1
    3e7a:	d103      	bne.n	3e84 <_isatty_r+0x1c>
    3e7c:	6823      	ldr	r3, [r4, #0]
    3e7e:	2b00      	cmp	r3, #0
    3e80:	d000      	beq.n	3e84 <_isatty_r+0x1c>
    3e82:	602b      	str	r3, [r5, #0]
    3e84:	bd38      	pop	{r3, r4, r5, pc}
    3e86:	46c0      	nop			; (mov r8, r8)
    3e88:	200001a4 	.word	0x200001a4

00003e8c <_lseek_r>:
    3e8c:	b538      	push	{r3, r4, r5, lr}
    3e8e:	4c08      	ldr	r4, [pc, #32]	; (3eb0 <_lseek_r+0x24>)
    3e90:	1c05      	adds	r5, r0, #0
    3e92:	2000      	movs	r0, #0
    3e94:	6020      	str	r0, [r4, #0]
    3e96:	1c08      	adds	r0, r1, #0
    3e98:	1c11      	adds	r1, r2, #0
    3e9a:	1c1a      	adds	r2, r3, #0
    3e9c:	f7fe f8e2 	bl	2064 <_lseek>
    3ea0:	1c43      	adds	r3, r0, #1
    3ea2:	d103      	bne.n	3eac <_lseek_r+0x20>
    3ea4:	6823      	ldr	r3, [r4, #0]
    3ea6:	2b00      	cmp	r3, #0
    3ea8:	d000      	beq.n	3eac <_lseek_r+0x20>
    3eaa:	602b      	str	r3, [r5, #0]
    3eac:	bd38      	pop	{r3, r4, r5, pc}
    3eae:	46c0      	nop			; (mov r8, r8)
    3eb0:	200001a4 	.word	0x200001a4

00003eb4 <_read_r>:
    3eb4:	b538      	push	{r3, r4, r5, lr}
    3eb6:	4c08      	ldr	r4, [pc, #32]	; (3ed8 <_read_r+0x24>)
    3eb8:	1c05      	adds	r5, r0, #0
    3eba:	2000      	movs	r0, #0
    3ebc:	6020      	str	r0, [r4, #0]
    3ebe:	1c08      	adds	r0, r1, #0
    3ec0:	1c11      	adds	r1, r2, #0
    3ec2:	1c1a      	adds	r2, r3, #0
    3ec4:	f7fd f9b2 	bl	122c <_read>
    3ec8:	1c43      	adds	r3, r0, #1
    3eca:	d103      	bne.n	3ed4 <_read_r+0x20>
    3ecc:	6823      	ldr	r3, [r4, #0]
    3ece:	2b00      	cmp	r3, #0
    3ed0:	d000      	beq.n	3ed4 <_read_r+0x20>
    3ed2:	602b      	str	r3, [r5, #0]
    3ed4:	bd38      	pop	{r3, r4, r5, pc}
    3ed6:	46c0      	nop			; (mov r8, r8)
    3ed8:	200001a4 	.word	0x200001a4
    3edc:	00006425 	.word	0x00006425

00003ee0 <_tcc_gclk_ids>:
    3ee0:	001b1a1a                                ....

00003ee4 <_tcc_apbcmasks>:
    3ee4:	00000100 00000200 00000400              ............

00003ef0 <_tcc_maxs>:
    3ef0:	00ffffff 00ffffff 0000ffff              ............

00003efc <_tcc_cc_nums>:
    3efc:	00020204                                ....

00003f00 <_tcc_ow_nums>:
    3f00:	00020408                                ....

00003f04 <_tcc_intflag>:
    3f04:	00000001 00000002 00000004 00000008     ................
    3f14:	00001000 00002000 00004000 00008000     ..... ...@......
    3f24:	00010000 00020000 00040000 00080000     ................
    3f34:	00000afe 00000d44 00000d44 00000d44     ....D...D...D...
    3f44:	00000d44 00000d44 00000d44 00000d44     D...D...D...D...
    3f54:	00000d44 00000d44 00000d44 00000d44     D...D...D...D...
    3f64:	00000d44 00000d44 00000d44 00000d44     D...D...D...D...
    3f74:	00000ae6 00000d44 00000d44 00000d44     ....D...D...D...
    3f84:	00000d44 00000d44 00000d44 00000d44     D...D...D...D...
    3f94:	00000d44 00000d44 00000d44 00000d44     D...D...D...D...
    3fa4:	00000d44 00000d44 00000d44 00000d44     D...D...D...D...
    3fb4:	00000af6 00000d44 00000d44 00000d44     ....D...D...D...
    3fc4:	00000d44 00000d44 00000d44 00000d44     D...D...D...D...
    3fd4:	00000d44 00000d44 00000d44 00000d44     D...D...D...D...
    3fe4:	00000d44 00000d44 00000d44 00000d44     D...D...D...D...
    3ff4:	00000aee 00000ace 00000b06 00000ade     ................
    4004:	00000ad6 00000002 00000003 00000028     ............(...
    4014:	00000029 00000004 00000005 00000006     )...............
    4024:	00000007 00000020 00000021 00000022     .... ...!..."...
    4034:	00000023 00000024 00000025 00000026     #...$...%...&...
    4044:	00000027 00000008 00000009 0000000a     '...............
    4054:	0000000b 42000800 42000c00 42001000     .......B...B...B
    4064:	42001400 42001800 42001c00 0c0b0a09     ...B...B...B....
    4074:	00000e0d 000019b8 00001a14 00001a14     ................
    4084:	000019b2 000019b2 000019ce 000019be     ................
    4094:	000019d4 00001a02 00001a9c 00001afc     ................
    40a4:	00001afc 00001a7c 00001a8e 00001aaa     ....|...........
    40b4:	00001a80 00001ab8 00001aec 61207055     ............Up a
    40c4:	7220646e 696e6e75 0021676e 20636461     nd running!.adc 
    40d4:	756c6176 00202d65 0d206425 00000000     value- .%d .....
    40e4:	0000282c 00002826 00002826 0000281c     ,(..&(..&(...(..
    40f4:	0000277c 0000277c 00002812 0000281c     |'..|'...(...(..
    4104:	0000277c 00002812 0000277c 0000281c     |'...(..|'...(..
    4114:	0000277a 0000277a 0000277a 000028b4     z'..z'..z'...(..
    4124:	00000043                                C...

00004128 <_global_impure_ptr>:
    4128:	20000010 2b302d23 6c680020 6665004c     ... #-0+ .hlL.ef
    4138:	47464567 32313000 36353433 41393837     gEFG.0123456789A
    4148:	45444342 31300046 35343332 39383736     BCDEF.0123456789
    4158:	64636261 00006665                       abcdef..

00004160 <__sf_fake_stdin>:
	...

00004180 <__sf_fake_stdout>:
	...

000041a0 <__sf_fake_stderr>:
	...

000041c0 <_init>:
    41c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    41c2:	46c0      	nop			; (mov r8, r8)
    41c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    41c6:	bc08      	pop	{r3}
    41c8:	469e      	mov	lr, r3
    41ca:	4770      	bx	lr

000041cc <__init_array_start>:
    41cc:	000000d9 	.word	0x000000d9

000041d0 <_fini>:
    41d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    41d2:	46c0      	nop			; (mov r8, r8)
    41d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    41d6:	bc08      	pop	{r3}
    41d8:	469e      	mov	lr, r3
    41da:	4770      	bx	lr

000041dc <__fini_array_start>:
    41dc:	000000b1 	.word	0x000000b1
